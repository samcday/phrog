name: build

on:
  push:
    branches: [main]
    tags: ['*']
  pull_request:
    branches: [main]
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  image-hash:
    runs-on: ubuntu-24.04
    outputs:
      value: ${{ steps.hash.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: get CI image hash
        id: hash
        run: |
          set -uexo pipefail
          echo "value=${{ hashFiles('.github/Dockerfile') }}" >> $GITHUB_OUTPUT
  build:
    needs: image-hash
    runs-on: ubuntu-24.04
    container: ghcr.io/samcday/phrog-ci:${{ needs.image-hash.outputs.value }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Phosh build-deps
        run: |
          set -uexo pipefail
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get --no-install-recommends -y build-dep ./phosh/
      - name: Build
        run: |
          set -uexo pipefail
          cargo build --features=static --all-targets --verbose
      - uses: actions/upload-artifact@v4
        with:
          name: x86-64-debug
          path: target/debug/phrog
      - name: Test
        run: |
          set -uexo pipefail

          export XDG_RUNTIME_DIR=/tmp

          # The build doesn't have anything installed, so fake a Phosh session file
          mkdir /usr/share/wayland-sessions
          cp ./phosh/data/wayland-sessions/phosh.desktop /usr/share/wayland-sessions

          # run tests
          mkdir -p test-recordings/
          export RECORD_TESTS=`pwd`/demo-video/recordings/
          export G_MESSAGES_DEBUG=all
          cat > phoc.ini <<HERE
          [output:X11-1]
          mode = 720x1440
          scale = 2
          HERE
          dbus-run-session xvfb-run -a -s -noreset phoc -C phoc.ini -S -E "cargo test --features=static --verbose -- --test-threads=1 --nocapture"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-recordings
          path: demo-video/recordings
  demo:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: test-recordings
          path: demo-video/recordings
      - name: Generate demo.mp4 with editly
        run: |
          set -uexo pipefail
          docker run \
            -v `pwd`/demo-video:/work -i ghcr.io/samcday/editly:latest \
            bash -c 'cd /work; editly --json editly.json5; \
            ffmpeg -i demo.mp4 -vcodec libwebp -filter:v fps=fps=60 -lossless 0 -loop 0 -preset default -an -vsync 0 -s 160:320 demo.webp'
      - uses: actions/upload-artifact@v4
        with:
          name: demo-video
          path: |
            demo-video/demo.mp4
            demo-video/demo.webp
  release:
    needs: [build, demo]
    runs-on: ubuntu-24.04
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: demo-video
          path: demo-video
      - name: upload release artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            demo-video/demo.mp4
            demo-video/demo.webp
