<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gcr" version="3"/>
  <include name="Gio" version="2.0"/>
  <include name="GnomeBluetooth" version="3.0"/>
  <include name="GnomeDesktop" version="3.0"/>
  <include name="Gtk" version="3.0"/>
  <include name="Handy" version="1"/>
  <include name="NM" version="1.0"/>
  <package name="libphosh-0.43"/>
  <c:include name="libphosh.h"/>
  <namespace name="Phosh"
             version="0"
             shared-library="libphosh-0.43.so.0"
             c:identifier-prefixes="Phosh"
             c:symbol-prefixes="phosh">
    <constant name="APP_AUTH_PROMPT_CHOICES_FORMAT"
              value="a(ssa(ss)s)"
              c:type="PHOSH_APP_AUTH_PROMPT_CHOICES_FORMAT">
      <source-position filename="src/app-auth-prompt.h" line="15"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="APP_UNKNOWN_ICON"
              value="app-icon-unknown"
              c:type="PHOSH_APP_UNKNOWN_ICON">
      <doc xml:space="preserve"
           filename="src/app-grid-button.h"
           line="19">Icon name to use for apps we can't identify or whose icon is invalid</doc>
      <source-position filename="src/app-grid-button.h" line="24"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Activity"
           c:symbol-prefix="activity"
           c:type="PhoshActivity"
           parent="Gtk.EventBox"
           glib:type-name="PhoshActivity"
           glib:get-type="phosh_activity_get_type"
           glib:type-struct="ActivityClass">
      <doc xml:space="preserve"
           filename="src/activity.c"
           line="21">An app in the favorites overview

The #PhoshActivity is used to select a running application in the overview.</doc>
      <source-position filename="src/activity.h" line="13"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_activity_new">
        <source-position filename="src/activity.h" line="15"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="app_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_app_id"
              c:identifier="phosh_activity_get_app_id"
              glib:get-property="app-id">
        <source-position filename="src/activity.h" line="16"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Activity" c:type="PhoshActivity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thumbnail_allocation"
              c:identifier="phosh_activity_get_thumbnail_allocation">
        <source-position filename="src/activity.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Activity" c:type="PhoshActivity*"/>
          </instance-parameter>
          <parameter name="allocation" transfer-ownership="none">
            <type name="Gtk.Allocation" c:type="GtkAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thumbnail" c:identifier="phosh_activity_set_thumbnail">
        <source-position filename="src/activity.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Activity" c:type="PhoshActivity*"/>
          </instance-parameter>
          <parameter name="thumbnail" transfer-ownership="none">
            <type name="Thumbnail" c:type="PhoshThumbnail*"/>
          </parameter>
        </parameters>
      </method>
      <property name="app-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_app_id">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="fullscreen"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="maximized"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="parent-app-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/activity.c"
             line="567">The app-id of the parent activity (if any)</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="win-height"
                writable="1"
                transfer-ownership="none"
                default-value="300">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="win-width"
                writable="1"
                transfer-ownership="none"
                default-value="300">
        <type name="gint" c:type="gint"/>
      </property>
      <glib:signal name="clicked" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="closed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="resized" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Rectangle"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ActivityClass"
            c:type="PhoshActivityClass"
            glib:is-gtype-struct-for="Activity">
      <source-position filename="src/activity.h" line="13"/>
      <field name="parent_class">
        <type name="Gtk.EventBoxClass" c:type="GtkEventBoxClass"/>
      </field>
    </record>
    <class name="Ambient"
           c:symbol-prefix="ambient"
           c:type="PhoshAmbient"
           parent="GObject.Object"
           glib:type-name="PhoshAmbient"
           glib:get-type="phosh_ambient_get_type"
           glib:type-struct="AmbientClass">
      <doc xml:space="preserve"
           filename="src/ambient.c"
           line="30">Ambient light sensor handling

#PhoshAmbient handles enabling and disabling the ambient detection
based and toggles related actions.</doc>
      <source-position filename="src/ambient.h" line="16"/>
      <constructor name="new" c:identifier="phosh_ambient_new">
        <source-position filename="src/ambient.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="Ambient" c:type="PhoshAmbient*"/>
        </return-value>
        <parameters>
          <parameter name="sensor_proxy_manager" transfer-ownership="none">
            <type name="SensorProxyManager" c:type="PhoshSensorProxyManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="sensor-proxy-manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SensorProxyManager"/>
      </property>
    </class>
    <record name="AmbientClass"
            c:type="PhoshAmbientClass"
            glib:is-gtype-struct-for="Ambient">
      <source-position filename="src/ambient.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="Animation"
            c:type="PhoshAnimation"
            opaque="1"
            glib:type-name="PhoshAnimation"
            glib:get-type="phosh_animation_get_type"
            c:symbol-prefix="animation">
      <source-position filename="src/animation.h" line="32"/>
      <constructor name="new" c:identifier="phosh_animation_new">
        <doc xml:space="preserve"
             filename="src/animation.c"
             line="145">Get a new animation object for @widget.

Note that the scope of the `value_cb` and `done_cb` callbacks is
actually as long as the animation exists.</doc>
        <source-position filename="src/animation.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/animation.c"
               line="160">The animation</doc>
          <type name="Animation" c:type="PhoshAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/animation.c"
                 line="147">A widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/animation.c"
                 line="148">The animation's start value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/animation.c"
                 line="149">The animation's end value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/animation.c"
                 line="150">The type of animation</doc>
            <type name="AnimationType" c:type="PhoshAnimationType"/>
          </parameter>
          <parameter name="value_cb" transfer-ownership="none" scope="forever">
            <doc xml:space="preserve"
                 filename="src/animation.c"
                 line="151">The callback applying `value`</doc>
            <type name="AnimationValueCallback"
                  c:type="PhoshAnimationValueCallback"/>
          </parameter>
          <parameter name="done_cb"
                     transfer-ownership="none"
                     scope="forever"
                     closure="7">
            <doc xml:space="preserve"
                 filename="src/animation.c"
                 line="152">The callback invoked when the animation is done</doc>
            <type name="AnimationDoneCallback"
                  c:type="PhoshAnimationDoneCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/animation.c"
                 line="153">user_data passed to `value_cb` and `done_cb`</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_value" c:identifier="phosh_animation_get_value">
        <source-position filename="src/animation.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Animation" c:type="PhoshAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="phosh_animation_ref">
        <source-position filename="src/animation.h" line="49"/>
        <return-value transfer-ownership="full">
          <type name="Animation" c:type="PhoshAnimation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Animation" c:type="PhoshAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="phosh_animation_start">
        <source-position filename="src/animation.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Animation" c:type="PhoshAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="phosh_animation_stop">
        <source-position filename="src/animation.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Animation" c:type="PhoshAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="phosh_animation_unref">
        <source-position filename="src/animation.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Animation" c:type="PhoshAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="AnimationDoneCallback" c:type="PhoshAnimationDoneCallback">
      <source-position filename="src/animation.h" line="36"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="AnimationType"
                 glib:type-name="PhoshAnimationType"
                 glib:get-type="phosh_animation_type_get_type"
                 c:type="PhoshAnimationType">
      <doc xml:space="preserve"
           filename="src/animation.h"
           line="16">The animation type of #PhoshAnimationType.</doc>
      <member name="out_cubic"
              value="0"
              c:identifier="PHOSH_ANIMATION_TYPE_EASE_OUT_CUBIC"
              glib:nick="out-cubic"
              glib:name="PHOSH_ANIMATION_TYPE_EASE_OUT_CUBIC">
        <doc xml:space="preserve"
             filename="src/animation.h"
             line="18">Use ease out cubic interpolation.</doc>
      </member>
      <member name="in_quintic"
              value="1"
              c:identifier="PHOSH_ANIMATION_TYPE_EASE_IN_QUINTIC"
              glib:nick="in-quintic"
              glib:name="PHOSH_ANIMATION_TYPE_EASE_IN_QUINTIC">
        <doc xml:space="preserve"
             filename="src/animation.h"
             line="19">Use ease in quintic interpolation.</doc>
      </member>
      <member name="out_quintic"
              value="2"
              c:identifier="PHOSH_ANIMATION_TYPE_EASE_OUT_QUINTIC"
              glib:nick="out-quintic"
              glib:name="PHOSH_ANIMATION_TYPE_EASE_OUT_QUINTIC">
        <doc xml:space="preserve"
             filename="src/animation.h"
             line="20">Use ease out quintic interpolation.</doc>
      </member>
      <member name="out_bounce"
              value="3"
              c:identifier="PHOSH_ANIMATION_TYPE_EASE_OUT_BOUNCE"
              glib:nick="out-bounce"
              glib:name="PHOSH_ANIMATION_TYPE_EASE_OUT_BOUNCE">
        <doc xml:space="preserve"
             filename="src/animation.h"
             line="21">Use easeOutBounce interpolation.</doc>
      </member>
    </enumeration>
    <callback name="AnimationValueCallback"
              c:type="PhoshAnimationValueCallback">
      <source-position filename="src/animation.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="AppAuthPrompt"
           c:symbol-prefix="app_auth_prompt"
           c:type="PhoshAppAuthPrompt"
           parent="SystemModalDialog"
           glib:type-name="PhoshAppAuthPrompt"
           glib:get-type="phosh_app_auth_prompt_get_type"
           glib:type-struct="AppAuthPromptClass">
      <doc xml:space="preserve"
           filename="src/app-auth-prompt.c"
           line="19">A system modal prompt to authorize applications

The #PhoshAppAuthPrompt is used to authorize applications. It's used
by the #PhoshLocationManager and for org.freedesktop.impl.Access.</doc>
      <source-position filename="src/app-auth-prompt.h" line="19"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_app_auth_prompt_new">
        <source-position filename="src/app-auth-prompt.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="body" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="grant_label" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="deny_label" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="offer_remember" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="choices" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_grant_access"
                c:identifier="phosh_app_auth_prompt_get_grant_access">
        <source-position filename="src/app-auth-prompt.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="self" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_remember"
                c:identifier="phosh_app_auth_prompt_get_remember">
        <source-position filename="src/app-auth-prompt.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="self" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_selected_choices"
                c:identifier="phosh_app_auth_prompt_get_selected_choices">
        <source-position filename="src/app-auth-prompt.h" line="30"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <parameter name="self" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </function>
      <property name="body"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="choices"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="deny-label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="grant-label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.Icon"/>
      </property>
      <property name="offer-remember"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="subtitle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="closed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="AppAuthPromptClass"
            c:type="PhoshAppAuthPromptClass"
            glib:is-gtype-struct-for="AppAuthPrompt">
      <source-position filename="src/app-auth-prompt.h" line="19"/>
      <field name="parent_class">
        <type name="SystemModalDialogClass"
              c:type="PhoshSystemModalDialogClass"/>
      </field>
    </record>
    <bitfield name="AppFilterModeFlags"
              glib:type-name="PhoshAppFilterModeFlags"
              glib:get-type="phosh_app_filter_mode_flags_get_type"
              c:type="PhoshAppFilterModeFlags">
      <doc xml:space="preserve"
           filename="src/phosh-settings-enums.h"
           line="11">Controls what kind of app filtering is done.</doc>
      <member name="none"
              value="0"
              c:identifier="PHOSH_APP_FILTER_MODE_FLAGS_NONE"
              glib:nick="none"
              glib:name="PHOSH_APP_FILTER_MODE_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="src/phosh-settings-enums.h"
             line="13">No filtering</doc>
      </member>
      <member name="adaptive"
              value="1"
              c:identifier="PHOSH_APP_FILTER_MODE_FLAGS_ADAPTIVE"
              glib:nick="adaptive"
              glib:name="PHOSH_APP_FILTER_MODE_FLAGS_ADAPTIVE">
        <doc xml:space="preserve"
             filename="src/phosh-settings-enums.h"
             line="14">Only show apps in mobile mode that adapt
   to smalls screen sizes.</doc>
      </member>
    </bitfield>
    <class name="AppGrid"
           c:symbol-prefix="app_grid"
           c:type="PhoshAppGrid"
           parent="Gtk.Box"
           glib:type-name="PhoshAppGrid"
           glib:get-type="phosh_app_grid_get_type"
           glib:type-struct="AppGridClass">
      <source-position filename="src/app-grid.h" line="25"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="phosh_app_grid_new">
        <source-position filename="src/app-grid.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="focus_search" c:identifier="phosh_app_grid_focus_search">
        <source-position filename="src/app-grid.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGrid" c:type="PhoshAppGrid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="handle_search" c:identifier="phosh_app_grid_handle_search">
        <source-position filename="src/app-grid.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGrid" c:type="PhoshAppGrid*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="phosh_app_grid_reset">
        <source-position filename="src/app-grid.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGrid" c:type="PhoshAppGrid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_filter_adaptive"
              c:identifier="phosh_app_grid_set_filter_adaptive"
              glib:set-property="filter-adaptive">
        <source-position filename="src/app-grid.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGrid" c:type="PhoshAppGrid*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="filter-adaptive"
                writable="1"
                transfer-ownership="none"
                setter="set_filter_adaptive"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/app-grid.c"
             line="707">Whether only adaptive apps should be shown</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
      <glib:signal name="app-launched" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gio.AppInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="AppGridBaseButton"
           c:symbol-prefix="app_grid_base_button"
           c:type="PhoshAppGridBaseButton"
           parent="Gtk.FlowBoxChild"
           glib:type-name="PhoshAppGridBaseButton"
           glib:get-type="phosh_app_grid_base_button_get_type"
           glib:type-struct="AppGridBaseButtonClass">
      <doc xml:space="preserve"
           filename="src/app-grid-base-button.c"
           line="16">Base class for buttons in app grid. Add the display widget (like image or grid of images) as a
child. Use [property@Phosh.AppGridBaseButton:label] property to set the label.</doc>
      <source-position filename="src/app-grid-base-button.h" line="20"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_label"
              c:identifier="phosh_app_grid_base_button_get_label"
              glib:get-property="label">
        <source-position filename="src/app-grid-base-button.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGridBaseButton" c:type="PhoshAppGridBaseButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="phosh_app_grid_base_button_set_label"
              glib:set-property="label">
        <source-position filename="src/app-grid-base-button.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGridBaseButton" c:type="PhoshAppGridBaseButton*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="label"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/app-grid-base-button.c"
             line="120">The label to display for button. A `NULL` results in the label widget being hidden.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.FlowBoxChild" c:type="GtkFlowBoxChild"/>
      </field>
    </class>
    <record name="AppGridBaseButtonClass"
            c:type="PhoshAppGridBaseButtonClass"
            glib:is-gtype-struct-for="AppGridBaseButton">
      <source-position filename="src/app-grid-base-button.h" line="20"/>
      <field name="parent_class">
        <type name="Gtk.FlowBoxChildClass" c:type="GtkFlowBoxChildClass"/>
      </field>
    </record>
    <class name="AppGridButton"
           c:symbol-prefix="app_grid_button"
           c:type="PhoshAppGridButton"
           parent="AppGridBaseButton"
           glib:type-name="PhoshAppGridButton"
           glib:get-type="phosh_app_grid_button_get_type"
           glib:type-struct="AppGridButtonClass">
      <doc xml:space="preserve"
           filename="src/app-grid-button.c"
           line="21">An app-grid button to represent an application launcher or favorite.</doc>
      <source-position filename="src/app-grid-button.h" line="46"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_app_grid_button_new">
        <source-position filename="src/app-grid-button.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_favorite"
                   c:identifier="phosh_app_grid_button_new_favorite">
        <source-position filename="src/app-grid-button.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_app_info"
              c:identifier="phosh_app_grid_button_get_app_info"
              glib:get-property="app-info">
        <doc xml:space="preserve"
             filename="src/app-grid-button.c"
             line="703">Get the app info</doc>
        <source-position filename="src/app-grid-button.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/app-grid-button.c"
               line="709">The app info</doc>
          <type name="Gio.AppInfo" c:type="GAppInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app-grid-button.c"
                 line="705">An app grid button</doc>
            <type name="AppGridButton" c:type="PhoshAppGridButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="phosh_app_grid_button_get_mode"
              glib:get-property="mode">
        <source-position filename="src/app-grid-button.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="AppGridButtonMode" c:type="PhoshAppGridButtonMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGridButton" c:type="PhoshAppGridButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_favorite"
              c:identifier="phosh_app_grid_button_is_favorite"
              glib:get-property="is-favorite">
        <source-position filename="src/app-grid-button.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGridButton" c:type="PhoshAppGridButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_app_info"
              c:identifier="phosh_app_grid_button_set_app_info"
              glib:set-property="app-info">
        <source-position filename="src/app-grid-button.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGridButton" c:type="PhoshAppGridButton*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_folder_info"
              c:identifier="phosh_app_grid_button_set_folder_info"
              glib:set-property="folder-info">
        <source-position filename="src/app-grid-button.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGridButton" c:type="PhoshAppGridButton*"/>
          </instance-parameter>
          <parameter name="folder_info" transfer-ownership="none">
            <type name="FolderInfo" c:type="PhoshFolderInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode"
              c:identifier="phosh_app_grid_button_set_mode"
              glib:set-property="mode">
        <source-position filename="src/app-grid-button.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppGridButton" c:type="PhoshAppGridButton*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="AppGridButtonMode" c:type="PhoshAppGridButtonMode"/>
          </parameter>
        </parameters>
      </method>
      <property name="app-info"
                writable="1"
                transfer-ownership="none"
                setter="set_app_info"
                getter="get_app_info">
        <type name="Gio.AppInfo"/>
      </property>
      <property name="folder-info"
                stability="Private"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_folder_info">
        <doc xml:space="preserve"
             filename="src/app-grid-button.c"
             line="286">The folder-info to which the button is a part of. Can be NULL.</doc>
        <type name="FolderInfo"/>
      </property>
      <property name="is-favorite"
                stability="Private"
                transfer-ownership="none"
                getter="is_favorite"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/app-grid-button.c"
             line="254">%TRUE when the application is currently favorited</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mode"
                stability="Private"
                writable="1"
                transfer-ownership="none"
                setter="set_mode"
                getter="get_mode"
                default-value="PHOSH_APP_GRID_BUTTON_LAUNCHER">
        <doc xml:space="preserve"
             filename="src/app-grid-button.c"
             line="268">The #PhoshAppGridButtonMode of the button

In %PHOSH_APP_GRID_BUTTON_FAVORITES the label is
hidden</doc>
        <type name="AppGridButtonMode"/>
      </property>
      <field name="parent_instance">
        <type name="AppGridBaseButton" c:type="PhoshAppGridBaseButton"/>
      </field>
      <glib:signal name="app-launched" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gio.AppInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AppGridButtonClass"
            c:type="PhoshAppGridButtonClass"
            glib:is-gtype-struct-for="AppGridButton">
      <source-position filename="src/app-grid-button.h" line="46"/>
      <field name="parent_class">
        <type name="AppGridBaseButtonClass"
              c:type="PhoshAppGridBaseButtonClass"/>
      </field>
    </record>
    <enumeration name="AppGridButtonMode"
                 glib:type-name="PhoshAppGridButtonMode"
                 glib:get-type="phosh_app_grid_button_mode_get_type"
                 c:type="PhoshAppGridButtonMode">
      <doc xml:space="preserve"
           filename="src/app-grid-button.h"
           line="28">Display mode of a #PhoshAppGridButton</doc>
      <member name="launcher"
              value="0"
              c:identifier="PHOSH_APP_GRID_BUTTON_LAUNCHER"
              glib:nick="launcher"
              glib:name="PHOSH_APP_GRID_BUTTON_LAUNCHER">
        <doc xml:space="preserve"
             filename="src/app-grid-button.h"
             line="30">Standard mode used in drawer/search etc</doc>
      </member>
      <member name="favorites"
              value="1"
              c:identifier="PHOSH_APP_GRID_BUTTON_FAVORITES"
              glib:nick="favorites"
              glib:name="PHOSH_APP_GRID_BUTTON_FAVORITES">
        <doc xml:space="preserve"
             filename="src/app-grid-button.h"
             line="31">Fovourites area (doesn't show label)</doc>
      </member>
    </enumeration>
    <record name="AppGridClass"
            c:type="PhoshAppGridClass"
            glib:is-gtype-struct-for="AppGrid">
      <source-position filename="src/app-grid.h" line="25"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="AppGridFolderButton"
           c:symbol-prefix="app_grid_folder_button"
           c:type="PhoshAppGridFolderButton"
           parent="AppGridBaseButton"
           glib:type-name="PhoshAppGridFolderButton"
           glib:get-type="phosh_app_grid_folder_button_get_type"
           glib:type-struct="AppGridFolderButtonClass">
      <doc xml:space="preserve"
           filename="src/app-grid-folder-button.c"
           line="14">A widget to display the apps in a folder.</doc>
      <source-position filename="src/app-grid-folder-button.h" line="15"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new_from_folder_info"
                   c:identifier="phosh_app_grid_folder_button_new_from_folder_info">
        <source-position filename="src/app-grid-folder-button.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="folder_info" transfer-ownership="none">
            <type name="FolderInfo" c:type="PhoshFolderInfo*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="folder-info"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/app-grid-folder-button.c"
             line="168">The folder info whose apps the widget displays</doc>
        <type name="FolderInfo"/>
      </property>
      <glib:signal name="folder-launched" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="FolderInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AppGridFolderButtonClass"
            c:type="PhoshAppGridFolderButtonClass"
            glib:is-gtype-struct-for="AppGridFolderButton">
      <source-position filename="src/app-grid-folder-button.h" line="15"/>
      <field name="parent_class">
        <type name="AppGridBaseButtonClass"
              c:type="PhoshAppGridBaseButtonClass"/>
      </field>
    </record>
    <class name="AppListModel"
           c:symbol-prefix="app_list_model"
           c:type="PhoshAppListModel"
           parent="GObject.Object"
           glib:type-name="PhoshAppListModel"
           glib:get-type="phosh_app_list_model_get_type"
           glib:type-struct="AppListModelClass">
      <source-position filename="src/app-list-model.h" line="20"/>
      <implements name="Gio.ListModel"/>
      <function name="get_default"
                c:identifier="phosh_app_list_model_get_default">
        <source-position filename="src/app-list-model.h" line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/app-list-model.c"
               line="266">The global #PhoshAppListModel singleton</doc>
          <type name="AppListModel" c:type="PhoshAppListModel*"/>
        </return-value>
      </function>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="AppListModelClass"
            c:type="PhoshAppListModelClass"
            glib:is-gtype-struct-for="AppListModel">
      <source-position filename="src/app-list-model.h" line="20"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="AppTracker"
           c:symbol-prefix="app_tracker"
           c:type="PhoshAppTracker"
           parent="GObject.Object"
           glib:type-name="PhoshAppTracker"
           glib:get-type="phosh_app_tracker_get_type"
           glib:type-struct="AppTrackerClass">
      <doc xml:space="preserve"
           filename="src/app-tracker.c"
           line="29">Application state tracker

Tracks the startup state of applications</doc>
      <source-position filename="src/app-tracker.h" line="17"/>
      <constructor name="new" c:identifier="phosh_app_tracker_new">
        <source-position filename="src/app-tracker.h" line="19"/>
        <return-value transfer-ownership="full">
          <type name="AppTracker" c:type="PhoshAppTracker*"/>
        </return-value>
      </constructor>
      <method name="launch_app_info"
              c:identifier="phosh_app_tracker_launch_app_info">
        <source-position filename="src/app-tracker.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AppTracker" c:type="PhoshAppTracker*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="app-activated" when="last">
        <doc xml:space="preserve"
             filename="src/app-tracker.c"
             line="636">An already running app was activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="app_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app-tracker.c"
                 line="639">The `GAppInfo` of the activated application</doc>
            <type name="Gio.AppInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="app-failed" when="last">
        <doc xml:space="preserve"
             filename="src/app-tracker.c"
             line="616">The app failed to launch.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="app_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app-tracker.c"
                 line="619">The `GAppInfo` of the application that failed to launch</doc>
            <type name="Gio.AppInfo"/>
          </parameter>
          <parameter name="app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app-tracker.c"
                 line="620">The startup-id of the application that failed to launch</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="app-launch-started" when="last" detailed="1">
        <doc xml:space="preserve"
             filename="src/app-tracker.c"
             line="551">The app is about to be launched by the shell or external process. This
is guaranteed to be followed by at least one PhoshAppTracker:app-launched or
PhoshAppTracker:app-failed signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="app_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app-tracker.c"
                 line="554">The `GAppInfo` of the launched application</doc>
            <type name="Gio.AppInfo"/>
          </parameter>
          <parameter name="app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app-tracker.c"
                 line="555">The startup-id of the launched application</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="app-launched" when="last" detailed="1">
        <doc xml:space="preserve"
             filename="src/app-tracker.c"
             line="575">The app got spawned or DBus activated. This is guaranteed to be followed
by a PhoshAppTracker:app-ready or PhoshAppTracker:app-failed signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="app_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app-tracker.c"
                 line="578">The `GAppInfo` of the launched application</doc>
            <type name="Gio.AppInfo"/>
          </parameter>
          <parameter name="app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app-tracker.c"
                 line="579">The startup-id of the launched application</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="app-ready" when="last">
        <doc xml:space="preserve"
             filename="src/app-tracker.c"
             line="596">The app is ready to be used by the user</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="app_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app-tracker.c"
                 line="599">The `GAppInfo` of the ready application</doc>
            <type name="Gio.AppInfo"/>
          </parameter>
          <parameter name="app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/app-tracker.c"
                 line="600">The startup-id of the ready application</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AppTrackerClass"
            c:type="PhoshAppTrackerClass"
            glib:is-gtype-struct-for="AppTracker">
      <source-position filename="src/app-tracker.h" line="17"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Arrow"
           c:symbol-prefix="arrow"
           c:type="PhoshArrow"
           parent="Gtk.DrawingArea"
           glib:type-name="PhoshArrow"
           glib:get-type="phosh_arrow_get_type"
           glib:type-struct="ArrowClass">
      <doc xml:space="preserve"
           filename="src/arrow.c"
           line="15">An animated arrow

An animated arrow that initially points upward and
rotates downwards as `progress` increases.</doc>
      <source-position filename="src/arrow.h" line="15"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_arrow_new">
        <source-position filename="src/arrow.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="Arrow" c:type="PhoshArrow*"/>
        </return-value>
      </constructor>
      <method name="get_progress"
              c:identifier="phosh_arrow_get_progress"
              glib:get-property="progress">
        <source-position filename="src/arrow.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Arrow" c:type="PhoshArrow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="phosh_arrow_set_progress"
              glib:set-property="progress">
        <source-position filename="src/arrow.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Arrow" c:type="PhoshArrow*"/>
          </instance-parameter>
          <parameter name="progress" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="ArrowClass"
            c:type="PhoshArrowClass"
            glib:is-gtype-struct-for="Arrow">
      <source-position filename="src/arrow.h" line="15"/>
      <field name="parent_class">
        <type name="Gtk.DrawingAreaClass" c:type="GtkDrawingAreaClass"/>
      </field>
    </record>
    <class name="AudioDevice"
           c:symbol-prefix="audio_device"
           c:type="PhoshAudioDevice"
           parent="GObject.Object"
           glib:type-name="PhoshAudioDevice"
           glib:get-type="phosh_audio_device_get_type"
           glib:type-struct="AudioDeviceClass">
      <doc xml:space="preserve"
           filename="src/settings/audio-device.c"
           line="13">Audio device information stored in [class@AudioDevices].</doc>
      <source-position filename="src/settings/audio-device.h" line="15"/>
      <constructor name="new" c:identifier="phosh_audio_device_new">
        <source-position filename="src/settings/audio-device.h" line="17"/>
        <return-value transfer-ownership="full">
          <type name="AudioDevice" c:type="PhoshAudioDevice*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_description"
              c:identifier="phosh_audio_device_get_description"
              glib:get-property="description">
        <source-position filename="src/settings/audio-device.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AudioDevice" c:type="PhoshAudioDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="phosh_audio_device_get_id"
              glib:get-property="id">
        <source-position filename="src/settings/audio-device.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AudioDevice" c:type="PhoshAudioDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="phosh_audio_device_set_active"
              glib:set-property="active">
        <source-position filename="src/settings/audio-device.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AudioDevice" c:type="PhoshAudioDevice*"/>
          </instance-parameter>
          <parameter name="active" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="description"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_description"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="4294967295">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="AudioDeviceClass"
            c:type="PhoshAudioDeviceClass"
            glib:is-gtype-struct-for="AudioDevice">
      <source-position filename="src/settings/audio-device.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="AudioDeviceRow"
           c:symbol-prefix="audio_device_row"
           c:type="PhoshAudioDeviceRow"
           parent="Gtk.ListBoxRow"
           glib:type-name="PhoshAudioDeviceRow"
           glib:get-type="phosh_audio_device_row_get_type"
           glib:type-struct="AudioDeviceRowClass">
      <doc xml:space="preserve"
           filename="src/settings/audio-device-row.c"
           line="14">A widget intended to be stored in a `GtkListBox` to represent and audio device.</doc>
      <source-position filename="src/settings/audio-device-row.h" line="17"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_audio_device_row_new">
        <source-position filename="src/settings/audio-device-row.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="AudioDeviceRow" c:type="PhoshAudioDeviceRow*"/>
        </return-value>
        <parameters>
          <parameter name="audio_device" transfer-ownership="none">
            <type name="AudioDevice" c:type="PhoshAudioDevice*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_audio_device"
              c:identifier="phosh_audio_device_row_get_audio_device"
              glib:get-property="audio-device">
        <doc xml:space="preserve"
             filename="src/settings/audio-device-row.c"
             line="168">Get the audio device associated with this row</doc>
        <source-position filename="src/settings/audio-device-row.h" line="20"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/settings/audio-device-row.c"
               line="174">The audio device</doc>
          <type name="AudioDevice" c:type="PhoshAudioDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/settings/audio-device-row.c"
                 line="170">An audio device row</doc>
            <type name="AudioDeviceRow" c:type="PhoshAudioDeviceRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="audio-device"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_audio_device">
        <type name="AudioDevice"/>
      </property>
    </class>
    <record name="AudioDeviceRowClass"
            c:type="PhoshAudioDeviceRowClass"
            glib:is-gtype-struct-for="AudioDeviceRow">
      <source-position filename="src/settings/audio-device-row.h" line="17"/>
      <field name="parent_class">
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
    </record>
    <class name="AudioDevices"
           c:symbol-prefix="audio_devices"
           c:type="PhoshAudioDevices"
           parent="GObject.Object"
           glib:type-name="PhoshAudioDevices"
           glib:get-type="phosh_audio_devices_get_type"
           glib:type-struct="AudioDevicesClass">
      <doc xml:space="preserve"
           filename="src/settings/audio-devices.c"
           line="23">The currently available audio devices as a list model. The model
can hold either input or output devices.</doc>
      <source-position filename="src/settings/audio-devices.h" line="17"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="phosh_audio_devices_new">
        <doc xml:space="preserve"
             filename="src/settings/audio-devices.c"
             line="315">Gets a new audio devices object which exposes the currently known
input or output devices as a list model.</doc>
        <source-position filename="src/settings/audio-devices.h" line="19"/>
        <return-value transfer-ownership="full">
          <type name="AudioDevices" c:type="PhoshAudioDevices*"/>
        </return-value>
        <parameters>
          <parameter name="mixer_control"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/settings/audio-devices.c"
                 line="317">A new GvcMixerControl</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="is_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/settings/audio-devices.c"
                 line="318">Whether this is this an input</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="has-devices"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/settings/audio-devices.c"
             line="269">%TRUE when there's at least on audio device present</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-input"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/settings/audio-devices.c"
             line="247">%TRUE Whether this list model stores input devices, %FALSE for output
devices.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mixer-control"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/settings/audio-devices.c"
             line="258">%TRUE Whether this list model stores input devices, %FALSE for output
devices.</doc>
        <type/>
      </property>
    </class>
    <record name="AudioDevicesClass"
            c:type="PhoshAudioDevicesClass"
            glib:is-gtype-struct-for="AudioDevices">
      <source-position filename="src/settings/audio-devices.h" line="17"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="AudioSettings"
           c:symbol-prefix="audio_settings"
           c:type="PhoshAudioSettings"
           parent="Gtk.Bin"
           glib:type-name="PhoshAudioSettings"
           glib:get-type="phosh_audio_settings_get_type"
           glib:type-struct="AudioSettingsClass">
      <doc xml:space="preserve"
           filename="src/settings/audio-settings.c"
           line="32">Widget to conrol Audio device selection and volume.</doc>
      <source-position filename="src/settings/audio-settings.h" line="15"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_audio_settings_new">
        <source-position filename="src/settings/audio-settings.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="AudioSettings" c:type="PhoshAudioSettings*"/>
        </return-value>
      </constructor>
      <method name="get_output_is_headphone"
              c:identifier="phosh_audio_settings_get_output_is_headphone">
        <source-position filename="src/settings/audio-settings.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AudioSettings" c:type="PhoshAudioSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide_details"
              c:identifier="phosh_audio_settings_hide_details">
        <doc xml:space="preserve"
             filename="src/settings/audio-settings.c"
             line="435">Hides the audio settings details</doc>
        <source-position filename="src/settings/audio-settings.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/settings/audio-settings.c"
                 line="437">The audio settings widget</doc>
            <type name="AudioSettings" c:type="PhoshAudioSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="is-headphone"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/settings/audio-settings.c"
             line="326">Whether the current output is a headphone</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="AudioSettingsClass"
            c:type="PhoshAudioSettingsClass"
            glib:is-gtype-struct-for="AudioSettings">
      <source-position filename="src/settings/audio-settings.h" line="15"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="Auth"
           c:symbol-prefix="auth"
           c:type="PhoshAuth"
           parent="GObject.Object"
           glib:type-name="PhoshAuth"
           glib:get-type="phosh_auth_get_type"
           glib:type-struct="AuthClass">
      <doc xml:space="preserve"
           filename="src/auth.c"
           line="16">PAM authentication handling</doc>
      <source-position filename="src/auth.h" line="15"/>
      <constructor name="new" c:identifier="phosh_auth_new">
        <source-position filename="src/auth.h" line="17"/>
        <return-value transfer-ownership="full">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </constructor>
      <method name="authenticate_async"
              c:identifier="phosh_auth_authenticate_async"
              glib:finish-func="authenticate_finish">
        <source-position filename="src/auth.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Auth" c:type="PhoshAuth*"/>
          </instance-parameter>
          <parameter name="number" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="authenticate_finish"
              c:identifier="phosh_auth_authenticate_finish"
              throws="1">
        <source-position filename="src/auth.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Auth" c:type="PhoshAuth*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="AuthClass"
            c:type="PhoshAuthClass"
            glib:is-gtype-struct-for="Auth">
      <source-position filename="src/auth.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="AuthPromptOption"
           c:symbol-prefix="auth_prompt_option"
           c:type="PhoshAuthPromptOption"
           parent="GObject.Object"
           glib:type-name="PhoshAuthPromptOption"
           glib:get-type="phosh_auth_prompt_option_get_type"
           glib:type-struct="AuthPromptOptionClass">
      <source-position filename="src/auth-prompt-option.h" line="17"/>
      <method name="get_id"
              c:identifier="phosh_auth_prompt_option_get_id"
              glib:get-property="id">
        <source-position filename="src/auth-prompt-option.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AuthPromptOption" c:type="PhoshAuthPromptOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="phosh_auth_prompt_option_get_label"
              glib:get-property="label">
        <source-position filename="src/auth-prompt-option.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="AuthPromptOption" c:type="PhoshAuthPromptOption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/auth-prompt-option.c"
             line="92">The internal identifier of this PhoshAuthPromptOption.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_label"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/auth-prompt-option.c"
             line="99">The visible label of this PhoshAuthPromptOption.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AuthPromptOptionClass"
            c:type="PhoshAuthPromptOptionClass"
            glib:is-gtype-struct-for="AuthPromptOption">
      <source-position filename="src/auth-prompt-option.h" line="17"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Background"
           c:symbol-prefix="background"
           c:type="PhoshBackground"
           parent="LayerSurface"
           glib:type-name="PhoshBackground"
           glib:get-type="phosh_background_get_type"
           glib:type-struct="BackgroundClass">
      <doc xml:space="preserve"
           filename="src/background.c"
           line="38">A [type@LayerSurface] representing the background drawn on a
[type@Monitor].

The background is updated by [type@BackgroundManager] when needed.</doc>
      <source-position filename="src/background.h" line="21"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_background_new">
        <source-position filename="src/background.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="layer_shell"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
          <parameter name="primary" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_scale" c:identifier="phosh_background_get_scale">
        <source-position filename="src/background.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Background" c:type="PhoshBackground*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="needs_update" c:identifier="phosh_background_needs_update">
        <doc xml:space="preserve"
             filename="src/background.c"
             line="446">Marks the background's data as dirty, needing an update. This will make the
`PhoshBackground` update it's background image.</doc>
        <source-position filename="src/background.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/background.c"
                 line="448">The background</doc>
            <type name="Background" c:type="PhoshBackground*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_primary"
              c:identifier="phosh_background_set_primary"
              glib:set-property="primary">
        <source-position filename="src/background.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Background" c:type="PhoshBackground*"/>
          </instance-parameter>
          <parameter name="primary" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scale" c:identifier="phosh_background_set_scale">
        <source-position filename="src/background.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Background" c:type="PhoshBackground*"/>
          </instance-parameter>
          <parameter name="scale" transfer-ownership="none">
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <property name="primary"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_primary"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/background.c"
             line="382">Whether this is the background for the primary monitor.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <class name="BackgroundCache"
           c:symbol-prefix="background_cache"
           c:type="PhoshBackgroundCache"
           parent="GObject.Object"
           glib:type-name="PhoshBackgroundCache"
           glib:get-type="phosh_background_cache_get_type"
           glib:type-struct="BackgroundCacheClass">
      <doc xml:space="preserve"
           filename="src/background-cache.c"
           line="19">A cache of background images</doc>
      <source-position filename="src/background-cache.h" line="18"/>
      <function name="get_default"
                c:identifier="phosh_background_cache_get_default">
        <doc xml:space="preserve"
             filename="src/background-cache.c"
             line="106">Gets the background cache singleton.</doc>
        <source-position filename="src/background-cache.h" line="20"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/background-cache.c"
               line="111">The background cache singleton.</doc>
          <type name="BackgroundCache" c:type="PhoshBackgroundCache*"/>
        </return-value>
      </function>
      <method name="clear_all" c:identifier="phosh_background_cache_clear_all">
        <source-position filename="src/background-cache.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackgroundCache" c:type="PhoshBackgroundCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fetch_background"
              c:identifier="phosh_background_cache_fetch_background">
        <doc xml:space="preserve"
             filename="src/background-cache.c"
             line="126">Loads an image into the cache and if not yet present. It always
reports success via the `image-loaded` signal.</doc>
        <source-position filename="src/background-cache.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/background-cache.c"
                 line="128">The background cache</doc>
            <type name="BackgroundCache" c:type="PhoshBackgroundCache*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/background-cache.c"
                 line="129">The file to lookup or load</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/background-cache.c"
                 line="130">A cancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_background"
              c:identifier="phosh_background_cache_lookup_background">
        <doc xml:space="preserve"
             filename="src/background-cache.c"
             line="156">Looks up an image in the cache. If missing returns %NULL.</doc>
        <source-position filename="src/background-cache.h" line="24"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/background-cache.c"
               line="163">The looked up background</doc>
          <type name="BackgroundImage" c:type="PhoshBackgroundImage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/background-cache.c"
                 line="158">The background cache</doc>
            <type name="BackgroundCache" c:type="PhoshBackgroundCache*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/background-cache.c"
                 line="159">The file to lookup</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="image-present" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="BackgroundImage"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BackgroundCacheClass"
            c:type="PhoshBackgroundCacheClass"
            glib:is-gtype-struct-for="BackgroundCache">
      <source-position filename="src/background-cache.h" line="18"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="BackgroundClass"
            c:type="PhoshBackgroundClass"
            glib:is-gtype-struct-for="Background">
      <source-position filename="src/background.h" line="21"/>
      <field name="parent_class">
        <type name="LayerSurfaceClass" c:type="PhoshLayerSurfaceClass"/>
      </field>
    </record>
    <record name="BackgroundData" c:type="PhoshBackgroundData">
      <source-position filename="src/background.h" line="27"/>
      <field name="uri" writable="1">
        <type name="Gio.File" c:type="GFile*"/>
      </field>
      <field name="color" writable="1">
        <type name="Gdk.RGBA" c:type="GdkRGBA"/>
      </field>
      <field name="style" writable="1">
        <type name="GDesktopEnums.BackgroundStyle"
              c:type="GDesktopBackgroundStyle"/>
      </field>
      <method name="free" c:identifier="phosh_background_data_free">
        <source-position filename="src/background.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg_data" transfer-ownership="none">
            <type name="BackgroundData" c:type="PhoshBackgroundData*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="BackgroundImage"
           c:symbol-prefix="background_image"
           c:type="PhoshBackgroundImage"
           parent="GObject.Object"
           glib:type-name="PhoshBackgroundImage"
           glib:get-type="phosh_background_image_get_type"
           glib:type-struct="BackgroundImageClass">
      <doc xml:space="preserve"
           filename="src/background-image.c"
           line="18">An image for a [type@Background] that can be loaded async via [type@BackgroundCache].</doc>
      <source-position filename="src/background-image.h" line="17"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="phosh_background_image_new_finish"
                   throws="1">
        <source-position filename="src/background-image.h" line="26"/>
        <return-value transfer-ownership="full">
          <type name="BackgroundImage" c:type="PhoshBackgroundImage*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_background_image_new_sync"
                   throws="1">
        <source-position filename="src/background-image.h" line="19"/>
        <return-value transfer-ownership="full">
          <type name="BackgroundImage" c:type="PhoshBackgroundImage*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_background_image_new"
                glib:finish-func="new_finish">
        <source-position filename="src/background-image.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_file"
              c:identifier="phosh_background_image_get_file"
              glib:get-property="file">
        <doc xml:space="preserve"
             filename="src/background-image.c"
             line="229">Gets the file the image was loaded from</doc>
        <source-position filename="src/background-image.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/background-image.c"
               line="235">The file</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/background-image.c"
                 line="231">The background image</doc>
            <type name="BackgroundImage" c:type="PhoshBackgroundImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf"
              c:identifier="phosh_background_image_get_pixbuf">
        <doc xml:space="preserve"
             filename="src/background-image.c"
             line="213">Gets the background image's pixbuf.</doc>
        <source-position filename="src/background-image.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/background-image.c"
               line="219">The pixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/background-image.c"
                 line="215">The background image</doc>
            <type name="BackgroundImage" c:type="PhoshBackgroundImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="file"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_file">
        <type name="Gio.File"/>
      </property>
    </class>
    <record name="BackgroundImageClass"
            c:type="PhoshBackgroundImageClass"
            glib:is-gtype-struct-for="BackgroundImage">
      <source-position filename="src/background-image.h" line="17"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="BackgroundManager"
           c:symbol-prefix="background_manager"
           c:type="PhoshBackgroundManager"
           parent="Manager"
           glib:type-name="PhoshBackgroundManager"
           glib:get-type="phosh_background_manager_get_type"
           glib:type-struct="BackgroundManagerClass">
      <doc xml:space="preserve"
           filename="src/background-manager.c"
           line="38">`PhoshBackgroundManager` keeps tracks of [type@PhoshMonitor]s to
create [type@PhoshBackground]s that are responsible for rendering
the background (or wallpaper). Whenever either the monitors'
configuration or the configured wallpaper properties change the
backgrounds are notified to update their contents.</doc>
      <source-position filename="src/background-manager.h" line="18"/>
      <constructor name="new" c:identifier="phosh_background_manager_new">
        <source-position filename="src/background-manager.h" line="24"/>
        <return-value transfer-ownership="full">
          <type name="BackgroundManager" c:type="PhoshBackgroundManager*"/>
        </return-value>
      </constructor>
      <method name="get_backgrounds"
              c:identifier="phosh_background_manager_get_backgrounds">
        <source-position filename="src/background-manager.h" line="25"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/background-manager.c"
               line="406">The current backgrounds</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Background"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/background-manager.c"
                 line="404">The #PhoshBackgroundManager</doc>
            <type name="BackgroundManager" c:type="PhoshBackgroundManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data"
              c:identifier="phosh_background_manager_get_data"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/background-manager.c"
             line="416">Get the data that allows a [type@Background] to build it's
image. This is the single place that determines this so other parts
don't need to care whether we handle a slide or a single image.</doc>
        <source-position filename="src/background-manager.h" line="26"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/background-manager.c"
               line="425">The data allowing to build a background image</doc>
          <type name="BackgroundData" c:type="PhoshBackgroundData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/background-manager.c"
                 line="418">The background manager</doc>
            <type name="BackgroundManager" c:type="PhoshBackgroundManager*"/>
          </instance-parameter>
          <parameter name="background" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/background-manager.c"
                 line="419">The background to fetch information fore</doc>
            <type name="Background" c:type="PhoshBackground*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="config-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BackgroundManagerClass"
            c:type="PhoshBackgroundManagerClass"
            glib:is-gtype-struct-for="BackgroundManager">
      <source-position filename="src/background-manager.h" line="18"/>
      <field name="parent_class">
        <type name="ManagerClass" c:type="PhoshManagerClass"/>
      </field>
    </record>
    <class name="BatteryInfo"
           c:symbol-prefix="battery_info"
           c:type="PhoshBatteryInfo"
           parent="StatusIcon"
           glib:type-name="PhoshBatteryInfo"
           glib:get-type="phosh_battery_info_get_type"
           glib:type-struct="BatteryInfoClass">
      <doc xml:space="preserve"
           filename="src/batteryinfo.c"
           line="21">A widget to display the battery status</doc>
      <source-position filename="src/batteryinfo.h" line="17"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_battery_info_new">
        <source-position filename="src/batteryinfo.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_show_detail"
              c:identifier="phosh_battery_info_get_show_detail"
              glib:get-property="show-detail">
        <source-position filename="src/batteryinfo.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BatteryInfo" c:type="PhoshBatteryInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_show_detail"
              c:identifier="phosh_battery_info_set_show_detail"
              glib:set-property="show-detail">
        <source-position filename="src/batteryinfo.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BatteryInfo" c:type="PhoshBatteryInfo*"/>
          </instance-parameter>
          <parameter name="show" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="present" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/batteryinfo.c"
             line="210">Whether battery information is present</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-detail"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_show_detail"
                getter="get_show_detail"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/batteryinfo.c"
             line="198">Whether to show battery percentage detail</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="BatteryInfoClass"
            c:type="PhoshBatteryInfoClass"
            glib:is-gtype-struct-for="BatteryInfo">
      <source-position filename="src/batteryinfo.h" line="17"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <class name="BtDeviceRow"
           c:symbol-prefix="bt_device_row"
           c:type="PhoshBtDeviceRow"
           parent="Handy.ActionRow"
           glib:type-name="PhoshBtDeviceRow"
           glib:get-type="phosh_bt_device_row_get_type"
           glib:type-struct="BtDeviceRowClass">
      <doc xml:space="preserve"
           filename="src/bt-device-row.c"
           line="14">A widget to display a Bluetooth device</doc>
      <source-position filename="src/bt-device-row.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_bt_device_row_new">
        <source-position filename="src/bt-device-row.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <type name="GnomeBluetooth.Device" c:type="BluetoothDevice*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="device"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/bt-device-row.c"
             line="198">The bluetooth device represented by the row</doc>
        <type name="GnomeBluetooth.Device"/>
      </property>
    </class>
    <record name="BtDeviceRowClass"
            c:type="PhoshBtDeviceRowClass"
            glib:is-gtype-struct-for="BtDeviceRow">
      <source-position filename="src/bt-device-row.h" line="16"/>
      <field name="parent_class">
        <type name="Handy.ActionRowClass" c:type="HdyActionRowClass"/>
      </field>
    </record>
    <class name="BtInfo"
           c:symbol-prefix="bt_info"
           c:type="PhoshBtInfo"
           parent="StatusIcon"
           glib:type-name="PhoshBtInfo"
           glib:get-type="phosh_bt_info_get_type"
           glib:type-struct="BtInfoClass">
      <doc xml:space="preserve"
           filename="src/bt-info.c"
           line="19">A widget to display the bluetooth status

#PhoshBtInfo displays the current bluetooth status based on information
from #PhoshBtManager. To figure out if the widget should be shown
the #PhoshBtInfo:enabled property can be useful.</doc>
      <source-position filename="src/bt-info.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_bt_info_new">
        <source-position filename="src/bt-info.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="enabled" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="present" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="BtInfoClass"
            c:type="PhoshBtInfoClass"
            glib:is-gtype-struct-for="BtInfo">
      <source-position filename="src/bt-info.h" line="16"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <class name="BtManager"
           c:symbol-prefix="bt_manager"
           c:type="PhoshBtManager"
           parent="Manager"
           glib:type-name="PhoshBtManager"
           glib:get-type="phosh_bt_manager_get_type"
           glib:type-struct="BtManagerClass">
      <doc xml:space="preserve"
           filename="src/bt-manager.c"
           line="27">Tracks the Bluetooth status

#PhoshBtManager tracks the Bluetooth status that
is whether the adapter is present and enabled.</doc>
      <source-position filename="src/bt-manager.h" line="21"/>
      <constructor name="new" c:identifier="phosh_bt_manager_new">
        <source-position filename="src/bt-manager.h" line="23"/>
        <return-value transfer-ownership="full">
          <type name="BtManager" c:type="PhoshBtManager*"/>
        </return-value>
      </constructor>
      <method name="connect_device_async"
              c:identifier="phosh_bt_manager_connect_device_async"
              glib:finish-func="connect_device_finish">
        <source-position filename="src/bt-manager.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BtManager" c:type="PhoshBtManager*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="GnomeBluetooth.Device" c:type="BluetoothDevice*"/>
          </parameter>
          <parameter name="connect" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_device_finish"
              c:identifier="phosh_bt_manager_connect_device_finish"
              throws="1">
        <source-position filename="src/bt-manager.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BtManager" c:type="PhoshBtManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connectable_devices"
              c:identifier="phosh_bt_manager_get_connectable_devices">
        <doc xml:space="preserve"
             filename="src/bt-manager.c"
             line="507">Gets the currently connectable devices.</doc>
        <source-position filename="src/bt-manager.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/bt-manager.c"
               line="513">The connectable devices</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/bt-manager.c"
                 line="509">The Bluetooth manager</doc>
            <type name="BtManager" c:type="PhoshBtManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="phosh_bt_manager_get_enabled"
              glib:get-property="enabled">
        <source-position filename="src/bt-manager.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BtManager" c:type="PhoshBtManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="phosh_bt_manager_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/bt-manager.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BtManager" c:type="PhoshBtManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="phosh_bt_manager_get_info"
              glib:get-property="info">
        <source-position filename="src/bt-manager.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BtManager" c:type="PhoshBtManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_connected"
              c:identifier="phosh_bt_manager_get_n_connected"
              glib:get-property="n-connected">
        <source-position filename="src/bt-manager.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BtManager" c:type="PhoshBtManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_present"
              c:identifier="phosh_bt_manager_get_present"
              glib:get-property="present">
        <source-position filename="src/bt-manager.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BtManager" c:type="PhoshBtManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled" c:identifier="phosh_bt_manager_set_enabled">
        <source-position filename="src/bt-manager.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BtManager" c:type="PhoshBtManager*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled"
                transfer-ownership="none"
                getter="get_enabled"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="bluetooth-disabled-symbolic">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="info"
                transfer-ownership="none"
                getter="get_info"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/bt-manager.c"
             line="308">If only a single device is connected this gives details about it.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="n-connected"
                transfer-ownership="none"
                getter="get_n_connected"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/bt-manager.c"
             line="299">The number of currently connected Bluetooth devices</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="n-devices" transfer-ownership="none" default-value="0">
        <doc xml:space="preserve"
             filename="src/bt-manager.c"
             line="290">The number of connectable Bluetooth devices</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="present"
                transfer-ownership="none"
                getter="get_present"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="BtManagerClass"
            c:type="PhoshBtManagerClass"
            glib:is-gtype-struct-for="BtManager">
      <source-position filename="src/bt-manager.h" line="21"/>
      <field name="parent_class">
        <type name="ManagerClass" c:type="PhoshManagerClass"/>
      </field>
    </record>
    <class name="BtStatusPage"
           c:symbol-prefix="bt_status_page"
           c:type="PhoshBtStatusPage"
           parent="StatusPage"
           glib:type-name="PhoshBtStatusPage"
           glib:get-type="phosh_bt_status_page_get_type"
           glib:type-struct="BtStatusPageClass">
      <doc xml:space="preserve"
           filename="src/bt-status-page.c"
           line="19">A Quick setting status page widget to show Bluetooth devices</doc>
      <source-position filename="src/bt-status-page.h" line="19"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_bt_status_page_new">
        <source-position filename="src/bt-status-page.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="BtStatusPageClass"
            c:type="PhoshBtStatusPageClass"
            glib:is-gtype-struct-for="BtStatusPage">
      <source-position filename="src/bt-status-page.h" line="19"/>
      <field name="parent_class">
        <type name="StatusPageClass" c:type="PhoshStatusPageClass"/>
      </field>
    </record>
    <function-macro name="CALLS_DBUS_CALLS_CALL"
                    c:identifier="PHOSH_CALLS_DBUS_CALLS_CALL"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_CALLS_CALL_GET_IFACE"
                    c:identifier="PHOSH_CALLS_DBUS_CALLS_CALL_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_CALLS_CALL_PROXY"
                    c:identifier="PHOSH_CALLS_DBUS_CALLS_CALL_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="176"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_CALLS_CALL_PROXY_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_CALLS_CALL_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="177"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_CALLS_CALL_PROXY_GET_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_CALLS_CALL_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="178"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_CALLS_CALL_SKELETON"
                    c:identifier="PHOSH_CALLS_DBUS_CALLS_CALL_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="246"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_CALLS_CALL_SKELETON_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_CALLS_CALL_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="247"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_CALLS_CALL_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_CALLS_CALL_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="248"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_CALLS_CALL"
                    c:identifier="PHOSH_CALLS_DBUS_IS_CALLS_CALL"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_CALLS_CALL_PROXY"
                    c:identifier="PHOSH_CALLS_DBUS_IS_CALLS_CALL_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="179"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_CALLS_CALL_PROXY_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_IS_CALLS_CALL_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="180"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_CALLS_CALL_SKELETON"
                    c:identifier="PHOSH_CALLS_DBUS_IS_CALLS_CALL_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="249"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_CALLS_CALL_SKELETON_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_IS_CALLS_CALL_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="250"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_OBJECT"
                    c:identifier="PHOSH_CALLS_DBUS_IS_OBJECT"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="281"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_OBJECT_MANAGER_CLIENT"
                    c:identifier="PHOSH_CALLS_DBUS_IS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="371"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_IS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="372"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_OBJECT_PROXY"
                    c:identifier="PHOSH_CALLS_DBUS_IS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="306"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_OBJECT_PROXY_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_IS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="307"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_OBJECT_SKELETON"
                    c:identifier="PHOSH_CALLS_DBUS_IS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="337"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_IS_OBJECT_SKELETON_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_IS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="338"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="280"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT_GET_IFACE"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="282"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT_MANAGER_CLIENT"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="368"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="369"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT_MANAGER_CLIENT_GET_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT_MANAGER_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="370"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT_PROXY"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="303"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT_PROXY_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="304"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT_PROXY_GET_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="305"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT_SKELETON"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="334"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT_SKELETON_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="335"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALLS_DBUS_OBJECT_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_CALLS_DBUS_OBJECT_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-dbus.h" line="336"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Call"
           c:symbol-prefix="call"
           c:type="PhoshCall"
           parent="GObject.Object"
           glib:type-name="PhoshCall"
           glib:get-type="phosh_call_get_type"
           glib:type-struct="CallClass">
      <doc xml:space="preserve"
           filename="src/call.c"
           line="17">A phone call

Interfaces with a single call object on DBus. GNOME Calls exports
information of phone calls on DBus. This class interfaces with one
of them to provide the necessary information to e.g. handle calls
on the lock screen.</doc>
      <source-position filename="src/call.h" line="16"/>
      <constructor name="new" c:identifier="phosh_call_new">
        <source-position filename="src/call.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="Call" c:type="PhoshCall*"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="dbus-proxy"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/call.c"
             line="325">The DBus proxy object to a call on gnome-calls DBus interface</doc>
        <type name="CallsDBusCallsCall"/>
      </property>
    </class>
    <record name="CallClass"
            c:type="PhoshCallClass"
            glib:is-gtype-struct-for="Call">
      <source-position filename="src/call.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="CallNotification"
           c:symbol-prefix="call_notification"
           c:type="PhoshCallNotification"
           parent="Gtk.ListBoxRow"
           glib:type-name="PhoshCallNotification"
           glib:get-type="phosh_call_notification_get_type"
           glib:type-struct="CallNotificationClass">
      <doc xml:space="preserve"
           filename="src/call-notification.c"
           line="23">The notifictaion shown when a call is ongoing.  The call is set at
construction time and can't be changed.</doc>
      <source-position filename="src/call-notification.h" line="17"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_call_notification_new">
        <source-position filename="src/call-notification.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="CallNotification" c:type="PhoshCallNotification*"/>
        </return-value>
        <parameters>
          <parameter name="call" transfer-ownership="none">
            <type name="Call" c:type="PhoshCall*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="active" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/call-notification.c"
             line="258">%TRUE when the notification has an associated call and it is active.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="call"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/call-notification.c"
             line="248">The call tracked by this notifiation</doc>
        <type name="Call"/>
      </property>
    </class>
    <record name="CallNotificationClass"
            c:type="PhoshCallNotificationClass"
            glib:is-gtype-struct-for="CallNotification">
      <source-position filename="src/call-notification.h" line="17"/>
      <field name="parent_class">
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
    </record>
    <enumeration name="CallState" c:type="PhoshCallState">
      <doc xml:space="preserve"
           filename="src/calls-manager.h"
           line="16">The call state. Must match call's CallsCallState.</doc>
      <source-position filename="src/calls-manager.h" line="31"/>
    </enumeration>
    <interface name="CallsDBusCallsCall"
               c:symbol-prefix="calls_dbus_calls_call"
               c:type="PhoshCallsDBusCallsCall"
               glib:type-name="PhoshCallsDBusCallsCall"
               glib:get-type="phosh_calls_dbus_calls_call_get_type"
               glib:type-struct="CallsDBusCallsCallIface">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="584">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="63"/>
      <function name="interface_info"
                c:identifier="phosh_calls_dbus_calls_call_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="506">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="511">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_calls_dbus_calls_call_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="519">Overrides all #GObject properties in the #PhoshCallsDBusCallsCall interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="527">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="521">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="522">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_can_dtmf"
                      invoker="get_can_dtmf"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1068">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.CanDtmf"&gt;"CanDtmf"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1076">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1070">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_display_name"
                      invoker="get_display_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="876">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.DisplayName"&gt;"DisplayName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_calls_dbus_calls_call_dup_display_name() if on another thread.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="49"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="886">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="878">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_encrypted"
                      invoker="get_encrypted"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1035">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Encrypted"&gt;"Encrypted"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1043">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1037">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id" invoker="get_id" introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="823">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_calls_dbus_calls_call_dup_id() if on another thread.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="833">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="825">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_image_path"
                      invoker="get_image_path"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="929">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.ImagePath"&gt;"ImagePath"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_calls_dbus_calls_call_dup_image_path() if on another thread.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="939">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="931">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_inbound"
                      invoker="get_inbound"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="757">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Inbound"&gt;"Inbound"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="765">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="759">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_protocol"
                      invoker="get_protocol"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="982">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Protocol"&gt;"Protocol"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_calls_dbus_calls_call_dup_protocol() if on another thread.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="992">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="984">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_state" invoker="get_state" introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="790">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="798">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="792">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_accept">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="593">Handler for the #PhoshCallsDBusCallsCall::handle-accept signal.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_hangup">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="594">Handler for the #PhoshCallsDBusCallsCall::handle-hangup signal.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_send_dtmf">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="595">Handler for the #PhoshCallsDBusCallsCall::handle-send-dtmf signal.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_Tone" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_accept"
              c:identifier="phosh_calls_dbus_calls_call_call_accept"
              glib:finish-func="call_accept_finish"
              glib:sync-func="call_accept_sync">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1101">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.Accept"&gt;Accept()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_calls_dbus_calls_call_call_accept_finish() to get the result of the operation.

See phosh_calls_dbus_calls_call_call_accept_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1103">A #PhoshCallsDBusCallsCallProxy.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1104">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1105">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1106">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_accept_finish"
              c:identifier="phosh_calls_dbus_calls_call_call_accept_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1131">Finishes an operation started with phosh_calls_dbus_calls_call_call_accept().</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="97"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1139">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1133">A #PhoshCallsDBusCallsCallProxy.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1134">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_calls_dbus_calls_call_call_accept().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_accept_sync"
              c:identifier="phosh_calls_dbus_calls_call_call_accept_sync"
              throws="1"
              glib:async-func="call_accept">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1158">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.Accept"&gt;Accept()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_calls_dbus_calls_call_call_accept() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="102"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1168">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1160">A #PhoshCallsDBusCallsCallProxy.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1161">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hangup"
              c:identifier="phosh_calls_dbus_calls_call_call_hangup"
              glib:finish-func="call_hangup_finish"
              glib:sync-func="call_hangup_sync">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1193">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.Hangup"&gt;Hangup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_calls_dbus_calls_call_call_hangup_finish() to get the result of the operation.

See phosh_calls_dbus_calls_call_call_hangup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1195">A #PhoshCallsDBusCallsCallProxy.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1196">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1197">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1198">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hangup_finish"
              c:identifier="phosh_calls_dbus_calls_call_call_hangup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1223">Finishes an operation started with phosh_calls_dbus_calls_call_call_hangup().</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="113"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1231">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1225">A #PhoshCallsDBusCallsCallProxy.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1226">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_calls_dbus_calls_call_call_hangup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hangup_sync"
              c:identifier="phosh_calls_dbus_calls_call_call_hangup_sync"
              throws="1"
              glib:async-func="call_hangup">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1250">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.Hangup"&gt;Hangup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_calls_dbus_calls_call_call_hangup() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="118"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1260">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1252">A #PhoshCallsDBusCallsCallProxy.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1253">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_dtmf"
              c:identifier="phosh_calls_dbus_calls_call_call_send_dtmf"
              glib:finish-func="call_send_dtmf_finish"
              glib:sync-func="call_send_dtmf_sync">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1285">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.SendDtmf"&gt;SendDtmf()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_calls_dbus_calls_call_call_send_dtmf_finish() to get the result of the operation.

See phosh_calls_dbus_calls_call_call_send_dtmf_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1287">A #PhoshCallsDBusCallsCallProxy.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="arg_Tone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1288">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1289">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1290">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1291">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_dtmf_finish"
              c:identifier="phosh_calls_dbus_calls_call_call_send_dtmf_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1318">Finishes an operation started with phosh_calls_dbus_calls_call_call_send_dtmf().</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="130"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1326">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1320">A #PhoshCallsDBusCallsCallProxy.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1321">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_calls_dbus_calls_call_call_send_dtmf().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_dtmf_sync"
              c:identifier="phosh_calls_dbus_calls_call_call_send_dtmf_sync"
              throws="1"
              glib:async-func="call_send_dtmf">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1345">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.SendDtmf"&gt;SendDtmf()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_calls_dbus_calls_call_call_send_dtmf() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="135"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1356">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1347">A #PhoshCallsDBusCallsCallProxy.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="arg_Tone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1348">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1349">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_accept"
              c:identifier="phosh_calls_dbus_calls_call_complete_accept">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1383">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.Accept"&gt;Accept()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1385">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1386">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_hangup"
              c:identifier="phosh_calls_dbus_calls_call_complete_hangup">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1401">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.Hangup"&gt;Hangup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1403">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1404">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_send_dtmf"
              c:identifier="phosh_calls_dbus_calls_call_complete_send_dtmf">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1419">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.SendDtmf"&gt;SendDtmf()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1421">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1422">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_display_name"
              c:identifier="phosh_calls_dbus_calls_call_dup_display_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="896">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.DisplayName"&gt;"DisplayName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="155"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="904">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="898">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id"
              c:identifier="phosh_calls_dbus_calls_call_dup_id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="843">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="151"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="851">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="845">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_image_path"
              c:identifier="phosh_calls_dbus_calls_call_dup_image_path"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="949">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.ImagePath"&gt;"ImagePath"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="159"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="957">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="951">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_protocol"
              c:identifier="phosh_calls_dbus_calls_call_dup_protocol"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1002">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Protocol"&gt;"Protocol"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="163"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1010">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1004">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_dtmf"
              c:identifier="phosh_calls_dbus_calls_call_get_can_dtmf"
              glib:get-property="can-dtmf"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1068">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.CanDtmf"&gt;"CanDtmf"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1076">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1070">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="phosh_calls_dbus_calls_call_get_display_name"
              glib:get-property="display-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="876">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.DisplayName"&gt;"DisplayName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_calls_dbus_calls_call_dup_display_name() if on another thread.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="154"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="886">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="878">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encrypted"
              c:identifier="phosh_calls_dbus_calls_call_get_encrypted"
              glib:get-property="encrypted"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1035">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Encrypted"&gt;"Encrypted"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1043">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1037">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="phosh_calls_dbus_calls_call_get_id"
              glib:get-property="id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="823">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_calls_dbus_calls_call_dup_id() if on another thread.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="150"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="833">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="825">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image_path"
              c:identifier="phosh_calls_dbus_calls_call_get_image_path"
              glib:get-property="image-path"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="929">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.ImagePath"&gt;"ImagePath"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_calls_dbus_calls_call_dup_image_path() if on another thread.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="158"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="939">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="931">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_inbound"
              c:identifier="phosh_calls_dbus_calls_call_get_inbound"
              glib:get-property="inbound"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="757">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Inbound"&gt;"Inbound"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="765">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="759">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol"
              c:identifier="phosh_calls_dbus_calls_call_get_protocol"
              glib:get-property="protocol"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="982">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Protocol"&gt;"Protocol"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_calls_dbus_calls_call_dup_protocol() if on another thread.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="162"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="992">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="984">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="phosh_calls_dbus_calls_call_get_state"
              glib:get-property="state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="790">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="798">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="792">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_can_dtmf"
              c:identifier="phosh_calls_dbus_calls_call_set_can_dtmf"
              glib:set-property="can-dtmf"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1086">Sets the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.CanDtmf"&gt;"CanDtmf"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1088">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1089">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="phosh_calls_dbus_calls_call_set_display_name"
              glib:set-property="display-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="914">Sets the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.DisplayName"&gt;"DisplayName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="916">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="917">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encrypted"
              c:identifier="phosh_calls_dbus_calls_call_set_encrypted"
              glib:set-property="encrypted"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1053">Sets the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Encrypted"&gt;"Encrypted"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1055">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1056">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="phosh_calls_dbus_calls_call_set_id"
              glib:set-property="id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="861">Sets the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Id"&gt;"Id"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="863">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="864">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_image_path"
              c:identifier="phosh_calls_dbus_calls_call_set_image_path"
              glib:set-property="image-path"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="967">Sets the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.ImagePath"&gt;"ImagePath"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="969">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="970">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inbound"
              c:identifier="phosh_calls_dbus_calls_call_set_inbound"
              glib:set-property="inbound"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="775">Sets the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Inbound"&gt;"Inbound"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="777">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="778">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocol"
              c:identifier="phosh_calls_dbus_calls_call_set_protocol"
              glib:set-property="protocol"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1020">Sets the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Protocol"&gt;"Protocol"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1022">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1023">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="phosh_calls_dbus_calls_call_set_state"
              glib:set-property="state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="808">Sets the &lt;link linkend="gdbus-property-org-gnome-Calls-Call.State"&gt;"State"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="810">A #PhoshCallsDBusCallsCall.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="811">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-dtmf"
                writable="1"
                transfer-ownership="none"
                setter="set_can_dtmf"
                getter="get_can_dtmf"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="746">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Calls-Call.CanDtmf"&gt;"CanDtmf"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="display-name"
                writable="1"
                transfer-ownership="none"
                setter="set_display_name"
                getter="get_display_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="710">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Calls-Call.DisplayName"&gt;"DisplayName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="encrypted"
                writable="1"
                transfer-ownership="none"
                setter="set_encrypted"
                getter="get_encrypted"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="737">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Encrypted"&gt;"Encrypted"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="701">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Id"&gt;"Id"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="image-path"
                writable="1"
                transfer-ownership="none"
                setter="set_image_path"
                getter="get_image_path"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="719">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Calls-Call.ImagePath"&gt;"ImagePath"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="inbound"
                writable="1"
                transfer-ownership="none"
                setter="set_inbound"
                getter="get_inbound"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="683">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Inbound"&gt;"Inbound"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="protocol"
                writable="1"
                transfer-ownership="none"
                setter="set_protocol"
                getter="get_protocol"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="728">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Calls-Call.Protocol"&gt;"Protocol"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state"
                writable="1"
                transfer-ownership="none"
                setter="set_state"
                getter="get_state"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="692">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Calls-Call.State"&gt;"State"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-accept" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="615">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.Accept"&gt;Accept()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_calls_dbus_calls_call_complete_accept() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="624">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="618">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-hangup" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="637">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.Hangup"&gt;Hangup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_calls_dbus_calls_call_complete_hangup() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="646">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="640">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-send-dtmf" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="659">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Calls-Call.SendDtmf"&gt;SendDtmf()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_calls_dbus_calls_call_complete_send_dtmf() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="669">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="662">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_Tone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="663">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="CallsDBusCallsCallIface"
            c:type="PhoshCallsDBusCallsCallIface"
            glib:is-gtype-struct-for="CallsDBusCallsCall">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="590">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="63"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="592">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_accept">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="593">Handler for the #PhoshCallsDBusCallsCall::handle-accept signal.</doc>
        <callback name="handle_accept">
          <source-position filename="src/dbus/calls-dbus.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_hangup">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="594">Handler for the #PhoshCallsDBusCallsCall::handle-hangup signal.</doc>
        <callback name="handle_hangup">
          <source-position filename="src/dbus/calls-dbus.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_send_dtmf">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="595">Handler for the #PhoshCallsDBusCallsCall::handle-send-dtmf signal.</doc>
        <callback name="handle_send_dtmf">
          <source-position filename="src/dbus/calls-dbus.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_Tone" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_dtmf">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="596">Getter for the #PhoshCallsDBusCallsCall:can-dtmf property.</doc>
        <callback name="get_can_dtmf">
          <source-position filename="src/dbus/calls-dbus.h" line="47"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1076">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/calls-dbus.c"
                   line="1070">A #PhoshCallsDBusCallsCall.</doc>
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_display_name">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="597">Getter for the #PhoshCallsDBusCallsCall:display-name property.</doc>
        <callback name="get_display_name">
          <source-position filename="src/dbus/calls-dbus.h" line="49"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="886">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/calls-dbus.c"
                   line="878">A #PhoshCallsDBusCallsCall.</doc>
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_encrypted">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="598">Getter for the #PhoshCallsDBusCallsCall:encrypted property.</doc>
        <callback name="get_encrypted">
          <source-position filename="src/dbus/calls-dbus.h" line="51"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1043">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/calls-dbus.c"
                   line="1037">A #PhoshCallsDBusCallsCall.</doc>
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="599">Getter for the #PhoshCallsDBusCallsCall:id property.</doc>
        <callback name="get_id">
          <source-position filename="src/dbus/calls-dbus.h" line="53"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="833">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/calls-dbus.c"
                   line="825">A #PhoshCallsDBusCallsCall.</doc>
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_image_path">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="600">Getter for the #PhoshCallsDBusCallsCall:image-path property.</doc>
        <callback name="get_image_path">
          <source-position filename="src/dbus/calls-dbus.h" line="55"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="939">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/calls-dbus.c"
                   line="931">A #PhoshCallsDBusCallsCall.</doc>
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_inbound">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="601">Getter for the #PhoshCallsDBusCallsCall:inbound property.</doc>
        <callback name="get_inbound">
          <source-position filename="src/dbus/calls-dbus.h" line="57"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="765">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/calls-dbus.c"
                   line="759">A #PhoshCallsDBusCallsCall.</doc>
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_protocol">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="602">Getter for the #PhoshCallsDBusCallsCall:protocol property.</doc>
        <callback name="get_protocol">
          <source-position filename="src/dbus/calls-dbus.h" line="59"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="992">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/calls-dbus.c"
                   line="984">A #PhoshCallsDBusCallsCall.</doc>
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_state">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="603">Getter for the #PhoshCallsDBusCallsCall:state property.</doc>
        <callback name="get_state">
          <source-position filename="src/dbus/calls-dbus.h" line="61"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="798">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/calls-dbus.c"
                   line="792">A #PhoshCallsDBusCallsCall.</doc>
              <type name="CallsDBusCallsCall"
                    c:type="PhoshCallsDBusCallsCall*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="CallsDBusCallsCallProxy"
           c:symbol-prefix="calls_dbus_calls_call_proxy"
           c:type="PhoshCallsDBusCallsCallProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshCallsDBusCallsCallProxy"
           glib:get-type="phosh_calls_dbus_calls_call_proxy_get_type"
           glib:type-struct="CallsDBusCallsCallProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="1439">The #PhoshCallsDBusCallsCallProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="196"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="CallsDBusCallsCall"/>
      <constructor name="new_finish"
                   c:identifier="phosh_calls_dbus_calls_call_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1811">Finishes an operation started with phosh_calls_dbus_calls_call_proxy_new().</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="212"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1818">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="CallsDBusCallsCallProxy"
                c:type="PhoshCallsDBusCallsCall*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1813">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_calls_dbus_calls_call_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_calls_dbus_calls_call_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1901">Finishes an operation started with phosh_calls_dbus_calls_call_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="231"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1908">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="CallsDBusCallsCallProxy"
                c:type="PhoshCallsDBusCallsCall*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1903">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_calls_dbus_calls_call_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_calls_dbus_calls_call_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1926">Like phosh_calls_dbus_calls_call_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_calls_dbus_calls_call_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="234"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1941">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="CallsDBusCallsCallProxy"
                c:type="PhoshCallsDBusCallsCall*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1928">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1929">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1930">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1931">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1932">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_calls_dbus_calls_call_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1836">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_calls_dbus_calls_call_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="215"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="1851">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="CallsDBusCallsCallProxy"
                c:type="PhoshCallsDBusCallsCall*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1838">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1839">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1840">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1841">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1842">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_calls_dbus_calls_call_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1781">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_calls_dbus_calls_call_proxy_new_finish() to get the result of the operation.

See phosh_calls_dbus_calls_call_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1783">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1784">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1785">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1786">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1787">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1788">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1789">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_calls_dbus_calls_call_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1871">Like phosh_calls_dbus_calls_call_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_calls_dbus_calls_call_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_calls_dbus_calls_call_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1873">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1874">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1875">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1876">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1877">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1878">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="1879">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallsDBusCallsCallProxyPrivate"
              c:type="PhoshCallsDBusCallsCallProxyPrivate*"/>
      </field>
    </class>
    <record name="CallsDBusCallsCallProxyClass"
            c:type="PhoshCallsDBusCallsCallProxyClass"
            glib:is-gtype-struct-for="CallsDBusCallsCallProxy">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="1445">Class structure for #PhoshCallsDBusCallsCallProxy.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="196"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1447">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="CallsDBusCallsCallProxyPrivate"
            c:type="PhoshCallsDBusCallsCallProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/calls-dbus.h" line="184"/>
    </record>
    <class name="CallsDBusCallsCallSkeleton"
           c:symbol-prefix="calls_dbus_calls_call_skeleton"
           c:type="PhoshCallsDBusCallsCallSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshCallsDBusCallsCallSkeleton"
           glib:get-type="phosh_calls_dbus_calls_call_skeleton_get_type"
           glib:type-struct="CallsDBusCallsCallSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="1963">The #PhoshCallsDBusCallsCallSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="266"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="CallsDBusCallsCall"/>
      <constructor name="new"
                   c:identifier="phosh_calls_dbus_calls_call_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2507">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="274"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="2512">The skeleton object.</doc>
          <type name="CallsDBusCallsCallSkeleton"
                c:type="PhoshCallsDBusCallsCall*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallsDBusCallsCallSkeletonPrivate"
              c:type="PhoshCallsDBusCallsCallSkeletonPrivate*"/>
      </field>
    </class>
    <record name="CallsDBusCallsCallSkeletonClass"
            c:type="PhoshCallsDBusCallsCallSkeletonClass"
            glib:is-gtype-struct-for="CallsDBusCallsCallSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="1969">Class structure for #PhoshCallsDBusCallsCallSkeleton.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="266"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="1971">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="CallsDBusCallsCallSkeletonPrivate"
            c:type="PhoshCallsDBusCallsCallSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/calls-dbus.h" line="254"/>
    </record>
    <interface name="CallsDBusObject"
               c:symbol-prefix="calls_dbus_object"
               c:type="PhoshCallsDBusObject"
               glib:type-name="PhoshCallsDBusObject"
               glib:get-type="phosh_calls_dbus_object_get_type"
               glib:type-struct="CallsDBusObjectIface">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="2533">The #PhoshCallsDBusObject type is a specialized container of interfaces.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="291"/>
      <prerequisite name="Gio.DBusObject"/>
      <method name="get_calls_call"
              c:identifier="phosh_calls_dbus_object_get_calls_call"
              glib:get-property="calls-call">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2563">Gets the #PhoshCallsDBusCallsCall instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="299"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="2569">A #PhoshCallsDBusCallsCall that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2565">A #PhoshCallsDBusObject.</doc>
            <type name="CallsDBusObject" c:type="PhoshCallsDBusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_calls_call"
              c:identifier="phosh_calls_dbus_object_peek_calls_call"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2581">Like phosh_calls_dbus_object_get_calls_call() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="300"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="2589">A #PhoshCallsDBusCallsCall or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2583">A #PhoshCallsDBusObject.</doc>
            <type name="CallsDBusObject" c:type="PhoshCallsDBusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="calls-call"
                writable="1"
                transfer-ownership="none"
                getter="get_calls_call">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2552">The #PhoshCallsDBusCallsCall instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="CallsDBusCallsCall"/>
      </property>
    </interface>
    <record name="CallsDBusObjectIface"
            c:type="PhoshCallsDBusObjectIface"
            glib:is-gtype-struct-for="CallsDBusObject">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="2539">Virtual table for the #PhoshCallsDBusObject interface.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="291"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2541">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="CallsDBusObjectManagerClient"
           c:symbol-prefix="calls_dbus_object_manager_client"
           c:type="PhoshCallsDBusObjectManagerClient"
           parent="Gio.DBusObjectManagerClient"
           glib:type-name="PhoshCallsDBusObjectManagerClient"
           glib:get-type="phosh_calls_dbus_object_manager_client_get_type"
           glib:type-struct="CallsDBusObjectManagerClientClass">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="2847">The #PhoshCallsDBusObjectManagerClient structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="388"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusObjectManager"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="phosh_calls_dbus_object_manager_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2934">Finishes an operation started with phosh_calls_dbus_object_manager_client_new().</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="406"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="2941">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="CallsDBusObjectManagerClient"
                c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2936">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_calls_dbus_object_manager_client_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_calls_dbus_object_manager_client_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="3024">Finishes an operation started with phosh_calls_dbus_object_manager_client_new_for_bus().</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="425"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="3031">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="CallsDBusObjectManagerClient"
                c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="3026">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_calls_dbus_object_manager_client_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_calls_dbus_object_manager_client_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="3049">Like phosh_calls_dbus_object_manager_client_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_calls_dbus_object_manager_client_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="428"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="3064">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="CallsDBusObjectManagerClient"
                c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="3051">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="3052">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="3053">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="3054">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="3055">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_calls_dbus_object_manager_client_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2959">Synchronously creates #GDBusObjectManagerClient using phosh_calls_dbus_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_calls_dbus_object_manager_client_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="409"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="2974">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="CallsDBusObjectManagerClient"
                c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2961">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2962">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2963">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2964">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2965">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_proxy_type"
                c:identifier="phosh_calls_dbus_object_manager_client_get_proxy_type">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2872">A #GDBusProxyTypeFunc that maps @interface_name to the generated #GDBusObjectProxy derived and #GDBusProxy derived types.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="396"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="2881">A #GDBusProxy derived #GType if @interface_name is not %NULL, otherwise the #GType for #PhoshCallsDBusObjectProxy.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2874">A #GDBusObjectManagerClient.</doc>
            <type name="Gio.DBusObjectManagerClient"
                  c:type="GDBusObjectManagerClient*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2875">The object path of the remote object (unused).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interface_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2876">Interface name of the remote object or %NULL to get the object proxy #GType.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2877">User data (unused).</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new"
                c:identifier="phosh_calls_dbus_object_manager_client_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2904">Asynchronously creates #GDBusObjectManagerClient using phosh_calls_dbus_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_calls_dbus_object_manager_client_new_finish() to get the result of the operation.

See phosh_calls_dbus_object_manager_client_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="398"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2906">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2907">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2908">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2909">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2910">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2911">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2912">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_calls_dbus_object_manager_client_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2994">Like phosh_calls_dbus_object_manager_client_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_calls_dbus_object_manager_client_new_for_bus_finish() to get the result of the operation.

See phosh_calls_dbus_object_manager_client_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="417"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2996">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2997">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2998">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2999">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="3000">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="3001">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="3002">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectManagerClient"
              c:type="GDBusObjectManagerClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallsDBusObjectManagerClientPrivate"
              c:type="PhoshCallsDBusObjectManagerClientPrivate*"/>
      </field>
    </class>
    <record name="CallsDBusObjectManagerClientClass"
            c:type="PhoshCallsDBusObjectManagerClientClass"
            glib:is-gtype-struct-for="CallsDBusObjectManagerClient">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="2853">Class structure for #PhoshCallsDBusObjectManagerClient.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="388"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2855">The parent class.</doc>
        <type name="Gio.DBusObjectManagerClientClass"
              c:type="GDBusObjectManagerClientClass"/>
      </field>
    </record>
    <record name="CallsDBusObjectManagerClientPrivate"
            c:type="PhoshCallsDBusObjectManagerClientPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/calls-dbus.h" line="376"/>
    </record>
    <class name="CallsDBusObjectProxy"
           c:symbol-prefix="calls_dbus_object_proxy"
           c:type="PhoshCallsDBusObjectProxy"
           parent="Gio.DBusObjectProxy"
           glib:type-name="PhoshCallsDBusObjectProxy"
           glib:get-type="phosh_calls_dbus_object_proxy_get_type"
           glib:type-struct="CallsDBusObjectProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="2613">The #PhoshCallsDBusObjectProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="323"/>
      <implements name="Gio.DBusObject"/>
      <implements name="CallsDBusObject"/>
      <constructor name="new" c:identifier="phosh_calls_dbus_object_proxy_new">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2690">Creates a new proxy object.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="331"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="2697">The proxy object.</doc>
          <type name="CallsDBusObjectProxy"
                c:type="PhoshCallsDBusObjectProxy*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2692">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2693">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectProxy" c:type="GDBusObjectProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallsDBusObjectProxyPrivate"
              c:type="PhoshCallsDBusObjectProxyPrivate*"/>
      </field>
    </class>
    <record name="CallsDBusObjectProxyClass"
            c:type="PhoshCallsDBusObjectProxyClass"
            glib:is-gtype-struct-for="CallsDBusObjectProxy">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="2619">Class structure for #PhoshCallsDBusObjectProxy.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="323"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2621">The parent class.</doc>
        <type name="Gio.DBusObjectProxyClass" c:type="GDBusObjectProxyClass"/>
      </field>
    </record>
    <record name="CallsDBusObjectProxyPrivate"
            c:type="PhoshCallsDBusObjectProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/calls-dbus.h" line="311"/>
    </record>
    <class name="CallsDBusObjectSkeleton"
           c:symbol-prefix="calls_dbus_object_skeleton"
           c:type="PhoshCallsDBusObjectSkeleton"
           parent="Gio.DBusObjectSkeleton"
           glib:type-name="PhoshCallsDBusObjectSkeleton"
           glib:get-type="phosh_calls_dbus_object_skeleton_get_type"
           glib:type-struct="CallsDBusObjectSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="2708">The #PhoshCallsDBusObjectSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="354"/>
      <implements name="Gio.DBusObject"/>
      <implements name="CallsDBusObject"/>
      <constructor name="new"
                   c:identifier="phosh_calls_dbus_object_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2806">Creates a new skeleton object.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="362"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="2812">The skeleton object.</doc>
          <type name="CallsDBusObjectSkeleton"
                c:type="PhoshCallsDBusObjectSkeleton*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2808">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_calls_call"
              c:identifier="phosh_calls_dbus_object_skeleton_set_calls_call">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2821">Sets the #PhoshCallsDBusCallsCall instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt; on @object.</doc>
        <source-position filename="src/dbus/calls-dbus.h" line="363"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2823">A #PhoshCallsDBusObjectSkeleton.</doc>
            <type name="CallsDBusObjectSkeleton"
                  c:type="PhoshCallsDBusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-dbus.c"
                 line="2824">A #PhoshCallsDBusCallsCall or %NULL to clear the interface.</doc>
            <type name="CallsDBusCallsCall" c:type="PhoshCallsDBusCallsCall*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectSkeleton" c:type="GDBusObjectSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallsDBusObjectSkeletonPrivate"
              c:type="PhoshCallsDBusObjectSkeletonPrivate*"/>
      </field>
    </class>
    <record name="CallsDBusObjectSkeletonClass"
            c:type="PhoshCallsDBusObjectSkeletonClass"
            glib:is-gtype-struct-for="CallsDBusObjectSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="2714">Class structure for #PhoshCallsDBusObjectSkeleton.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="354"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="2716">The parent class.</doc>
        <type name="Gio.DBusObjectSkeletonClass"
              c:type="GDBusObjectSkeletonClass"/>
      </field>
    </record>
    <record name="CallsDBusObjectSkeletonPrivate"
            c:type="PhoshCallsDBusObjectSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/calls-dbus.h" line="342"/>
    </record>
    <class name="CallsManager"
           c:symbol-prefix="calls_manager"
           c:type="PhoshCallsManager"
           parent="Manager"
           glib:type-name="PhoshCallsManager"
           glib:get-type="phosh_calls_manager_get_type"
           glib:type-struct="CallsManagerClass">
      <doc xml:space="preserve"
           filename="src/calls-manager.c"
           line="23">Track ongoing phone calls

#PhoshCallsManager tracks on going calls on the org.gnome.Calls DBus
interface and allows interaction with them by wrapping the
#PhoshCallsDBusCallsCall proxies in #PhoshCall so all DBus and
ObjectManager related logic stays local within #PhoshCallsManager.</doc>
      <source-position filename="src/calls-manager.h" line="36"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="phosh_calls_manager_new">
        <source-position filename="src/calls-manager.h" line="38"/>
        <return-value transfer-ownership="full">
          <type name="CallsManager" c:type="PhoshCallsManager*"/>
        </return-value>
      </constructor>
      <method name="get_active_call_handle"
              c:identifier="phosh_calls_manager_get_active_call_handle">
        <source-position filename="src/calls-manager.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CallsManager" c:type="PhoshCallsManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_call" c:identifier="phosh_calls_manager_get_call">
        <doc xml:space="preserve"
             filename="src/calls-manager.c"
             line="529">Get the call associated with the given handle</doc>
        <source-position filename="src/calls-manager.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/calls-manager.c"
               line="536">The call</doc>
          <type name="Call" c:type="PhoshCall*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/calls-manager.c"
                 line="531">The calls manager</doc>
            <type name="CallsManager" c:type="PhoshCallsManager*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/calls-manager.c"
                 line="532">The handle identifying the call</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_present"
              c:identifier="phosh_calls_manager_get_present"
              glib:get-property="present">
        <source-position filename="src/calls-manager.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CallsManager" c:type="PhoshCallsManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_incoming_call"
              c:identifier="phosh_calls_manager_has_incoming_call">
        <doc xml:space="preserve"
             filename="src/calls-manager.c"
             line="504">Whether there's currently an incoming call</doc>
        <source-position filename="src/calls-manager.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/calls-manager.c"
               line="510">`TRUE` if there's an incoming call</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/calls-manager.c"
                 line="506">The calls manager</doc>
            <type name="CallsManager" c:type="PhoshCallsManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="active-call"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/calls-manager.c"
             line="440">The currently active call</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="present"
                transfer-ownership="none"
                getter="get_present"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/calls-manager.c"
             line="427">Whether the call interface is present on the bus</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="call-added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="call-removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CallsManagerClass"
            c:type="PhoshCallsManagerClass"
            glib:is-gtype-struct-for="CallsManager">
      <source-position filename="src/calls-manager.h" line="36"/>
      <field name="parent_class">
        <type name="ManagerClass" c:type="PhoshManagerClass"/>
      </field>
    </record>
    <class name="Clamp"
           c:symbol-prefix="clamp"
           c:type="PhoshClamp"
           parent="Gtk.Bin"
           glib:type-name="PhoshClamp"
           glib:get-type="phosh_clamp_get_type"
           glib:type-struct="ClampClass">
      <doc xml:space="preserve"
           filename="src/clamp.c"
           line="9">A container limiting its natural size request

This should not be confused with `HdyClamp`, which limits the size allocated
to its child and adds a dynamic margin around it. `PhoshClamp` instead
constraints the requested natural size, the child will still be allocated all
that the clamp gets.</doc>
      <source-position filename="src/clamp.h" line="15"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="phosh_clamp_new">
        <doc xml:space="preserve"
             filename="src/clamp.c"
             line="268">Creates a new #PhoshClamp.</doc>
        <source-position filename="src/clamp.h" line="17"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/clamp.c"
               line="273">a new #PhoshClamp</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_natural_size"
              c:identifier="phosh_clamp_get_natural_size"
              glib:get-property="natural-size">
        <doc xml:space="preserve"
             filename="src/clamp.c"
             line="281">Gets the maximum natural size request.</doc>
        <source-position filename="src/clamp.h" line="18"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/clamp.c"
               line="287">the maximum natural size request.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/clamp.c"
                 line="283">a #PhoshClamp</doc>
            <type name="Clamp" c:type="PhoshClamp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_natural_size"
              c:identifier="phosh_clamp_set_natural_size"
              glib:set-property="natural-size">
        <doc xml:space="preserve"
             filename="src/clamp.c"
             line="297">Sets the maximum natural size request.</doc>
        <source-position filename="src/clamp.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/clamp.c"
                 line="299">a #PhoshClamp</doc>
            <type name="Clamp" c:type="PhoshClamp*"/>
          </instance-parameter>
          <parameter name="natural_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/clamp.c"
                 line="300">the maximum natural size</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="natural-size"
                writable="1"
                transfer-ownership="none"
                setter="set_natural_size"
                getter="get_natural_size"
                default-value="-1">
        <doc xml:space="preserve"
             filename="src/clamp.c"
             line="247">The maximum natural size request.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="ClampClass"
            c:type="PhoshClampClass"
            glib:is-gtype-struct-for="Clamp">
      <source-position filename="src/clamp.h" line="15"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="ConnectivityInfo"
           c:symbol-prefix="connectivity_info"
           c:type="PhoshConnectivityInfo"
           parent="StatusIcon"
           glib:type-name="PhoshConnectivityInfo"
           glib:get-type="phosh_connectivity_info_get_type"
           glib:type-struct="ConnectivityInfoClass">
      <doc xml:space="preserve"
           filename="src/connectivity-info.c"
           line="18">A widget to display the connectivity status

#PhoshConnectivityInfo monitors the connectivity to the internet
via NetworkManager and alerts the user about connectivity problems.
Usually there's no point in showing the widget when
#PhoshConnectivityInfo:connectivity it %TRUE but it's up to the container to
decide.</doc>
      <source-position filename="src/connectivity-info.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_connectivity_info_new">
        <source-position filename="src/connectivity-info.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="connectivity"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="ConnectivityInfoClass"
            c:type="PhoshConnectivityInfoClass"
            glib:is-gtype-struct-for="ConnectivityInfo">
      <source-position filename="src/connectivity-info.h" line="16"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <function-macro name="DBUS_COLOR"
                    c:identifier="PHOSH_DBUS_COLOR"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_COLOR_GET_IFACE"
                    c:identifier="PHOSH_DBUS_COLOR_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_COLOR_PROXY"
                    c:identifier="PHOSH_DBUS_COLOR_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="60"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_COLOR_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_COLOR_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="61"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_COLOR_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_COLOR_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="62"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_COLOR_SKELETON"
                    c:identifier="PHOSH_DBUS_COLOR_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="130"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_COLOR_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_COLOR_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="131"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_COLOR_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_COLOR_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="132"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_DISPLAY_CONFIG"
                    c:identifier="PHOSH_DBUS_DISPLAY_CONFIG"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_DISPLAY_CONFIG_GET_IFACE"
                    c:identifier="PHOSH_DBUS_DISPLAY_CONFIG_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_DISPLAY_CONFIG_PROXY"
                    c:identifier="PHOSH_DBUS_DISPLAY_CONFIG_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="390"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_DISPLAY_CONFIG_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_DISPLAY_CONFIG_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="391"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_DISPLAY_CONFIG_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_DISPLAY_CONFIG_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="392"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_DISPLAY_CONFIG_SKELETON"
                    c:identifier="PHOSH_DBUS_DISPLAY_CONFIG_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="460"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_DISPLAY_CONFIG_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_DISPLAY_CONFIG_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="461"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_DISPLAY_CONFIG_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_DISPLAY_CONFIG_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="462"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_END_SESSION_DIALOG"
                    c:identifier="PHOSH_DBUS_END_SESSION_DIALOG"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_END_SESSION_DIALOG_GET_IFACE"
                    c:identifier="PHOSH_DBUS_END_SESSION_DIALOG_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_END_SESSION_DIALOG_PROXY"
                    c:identifier="PHOSH_DBUS_END_SESSION_DIALOG_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="142"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_END_SESSION_DIALOG_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_END_SESSION_DIALOG_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="143"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_END_SESSION_DIALOG_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_END_SESSION_DIALOG_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="144"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_END_SESSION_DIALOG_SKELETON"
                    c:identifier="PHOSH_DBUS_END_SESSION_DIALOG_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="212"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_END_SESSION_DIALOG_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_END_SESSION_DIALOG_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="213"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_END_SESSION_DIALOG_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_END_SESSION_DIALOG_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="214"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_GNOME_SHELL"
                    c:identifier="PHOSH_DBUS_GNOME_SHELL"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_GNOME_SHELL_GET_IFACE"
                    c:identifier="PHOSH_DBUS_GNOME_SHELL_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_GNOME_SHELL_PROXY"
                    c:identifier="PHOSH_DBUS_GNOME_SHELL_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="286"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_GNOME_SHELL_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_GNOME_SHELL_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="287"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_GNOME_SHELL_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_GNOME_SHELL_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="288"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_GNOME_SHELL_SKELETON"
                    c:identifier="PHOSH_DBUS_GNOME_SHELL_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="356"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_GNOME_SHELL_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_GNOME_SHELL_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="357"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_GNOME_SHELL_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_GNOME_SHELL_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="358"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_HOSTNAME1"
                    c:identifier="PHOSH_DBUS_HOSTNAME1"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_HOSTNAME1_GET_IFACE"
                    c:identifier="PHOSH_DBUS_HOSTNAME1_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_HOSTNAME1_PROXY"
                    c:identifier="PHOSH_DBUS_HOSTNAME1_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="56"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_HOSTNAME1_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_HOSTNAME1_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="57"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_HOSTNAME1_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_HOSTNAME1_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="58"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_HOSTNAME1_SKELETON"
                    c:identifier="PHOSH_DBUS_HOSTNAME1_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="126"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_HOSTNAME1_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_HOSTNAME1_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="127"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_HOSTNAME1_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_HOSTNAME1_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="128"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_ACCESS"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_ACCESS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="183"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_ACCESS_GET_IFACE"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_ACCESS_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="185"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_ACCESS_PROXY"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_ACCESS_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="267"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_ACCESS_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_ACCESS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="268"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_ACCESS_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_ACCESS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="269"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_ACCESS_SKELETON"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_ACCESS_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="337"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_ACCESS_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_ACCESS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="338"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_ACCESS_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_ACCESS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="339"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_REQUEST"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_REQUEST"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_REQUEST_GET_IFACE"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_REQUEST_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_REQUEST_PROXY"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_REQUEST_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="78"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_REQUEST_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_REQUEST_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="79"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_REQUEST_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_REQUEST_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="80"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_REQUEST_SKELETON"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_REQUEST_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="148"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_REQUEST_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_REQUEST_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="149"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IMPL_PORTAL_REQUEST_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_IMPL_PORTAL_REQUEST_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="150"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_COLOR"
                    c:identifier="PHOSH_DBUS_IS_COLOR"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_COLOR_PROXY"
                    c:identifier="PHOSH_DBUS_IS_COLOR_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="63"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_COLOR_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_COLOR_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="64"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_COLOR_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_COLOR_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="133"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_COLOR_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_COLOR_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="134"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_DISPLAY_CONFIG"
                    c:identifier="PHOSH_DBUS_IS_DISPLAY_CONFIG"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_DISPLAY_CONFIG_PROXY"
                    c:identifier="PHOSH_DBUS_IS_DISPLAY_CONFIG_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="393"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_DISPLAY_CONFIG_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_DISPLAY_CONFIG_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="394"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_DISPLAY_CONFIG_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_DISPLAY_CONFIG_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="463"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_DISPLAY_CONFIG_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_DISPLAY_CONFIG_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="464"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_END_SESSION_DIALOG"
                    c:identifier="PHOSH_DBUS_IS_END_SESSION_DIALOG"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_END_SESSION_DIALOG_PROXY"
                    c:identifier="PHOSH_DBUS_IS_END_SESSION_DIALOG_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="145"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_END_SESSION_DIALOG_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_END_SESSION_DIALOG_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="146"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_END_SESSION_DIALOG_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_END_SESSION_DIALOG_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="215"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_END_SESSION_DIALOG_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_END_SESSION_DIALOG_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="216"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_GNOME_SHELL"
                    c:identifier="PHOSH_DBUS_IS_GNOME_SHELL"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_GNOME_SHELL_PROXY"
                    c:identifier="PHOSH_DBUS_IS_GNOME_SHELL_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="289"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_GNOME_SHELL_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_GNOME_SHELL_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="290"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_GNOME_SHELL_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_GNOME_SHELL_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="359"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_GNOME_SHELL_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_GNOME_SHELL_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="360"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_HOSTNAME1"
                    c:identifier="PHOSH_DBUS_IS_HOSTNAME1"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_HOSTNAME1_PROXY"
                    c:identifier="PHOSH_DBUS_IS_HOSTNAME1_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="59"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_HOSTNAME1_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_HOSTNAME1_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="60"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_HOSTNAME1_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_HOSTNAME1_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="129"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_HOSTNAME1_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_HOSTNAME1_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/hostname1-dbus.h" line="130"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_IMPL_PORTAL_ACCESS"
                    c:identifier="PHOSH_DBUS_IS_IMPL_PORTAL_ACCESS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="184"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_IMPL_PORTAL_ACCESS_PROXY"
                    c:identifier="PHOSH_DBUS_IS_IMPL_PORTAL_ACCESS_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="270"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_IMPL_PORTAL_ACCESS_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_IMPL_PORTAL_ACCESS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="271"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_IMPL_PORTAL_ACCESS_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_IMPL_PORTAL_ACCESS_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="340"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_IMPL_PORTAL_ACCESS_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_IMPL_PORTAL_ACCESS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="341"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_IMPL_PORTAL_REQUEST"
                    c:identifier="PHOSH_DBUS_IS_IMPL_PORTAL_REQUEST"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_IMPL_PORTAL_REQUEST_PROXY"
                    c:identifier="PHOSH_DBUS_IS_IMPL_PORTAL_REQUEST_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="81"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_IMPL_PORTAL_REQUEST_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_IMPL_PORTAL_REQUEST_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="82"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_IMPL_PORTAL_REQUEST_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_IMPL_PORTAL_REQUEST_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="151"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_IMPL_PORTAL_REQUEST_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_IMPL_PORTAL_REQUEST_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/portal-dbus.h" line="152"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_LOGIN_MANAGER"
                    c:identifier="PHOSH_DBUS_IS_LOGIN_MANAGER"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_LOGIN_MANAGER_PROXY"
                    c:identifier="PHOSH_DBUS_IS_LOGIN_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="171"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_LOGIN_MANAGER_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_LOGIN_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="172"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_LOGIN_MANAGER_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_LOGIN_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="241"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_LOGIN_MANAGER_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_LOGIN_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="242"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_LOGIN_SESSION"
                    c:identifier="PHOSH_DBUS_IS_LOGIN_SESSION"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_LOGIN_SESSION_PROXY"
                    c:identifier="PHOSH_DBUS_IS_LOGIN_SESSION_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="146"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_LOGIN_SESSION_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_LOGIN_SESSION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="147"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_LOGIN_SESSION_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_LOGIN_SESSION_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="216"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_LOGIN_SESSION_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_LOGIN_SESSION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="217"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_MOUNT_OPERATION_HANDLER"
                    c:identifier="PHOSH_DBUS_IS_MOUNT_OPERATION_HANDLER"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_MOUNT_OPERATION_HANDLER_PROXY"
                    c:identifier="PHOSH_DBUS_IS_MOUNT_OPERATION_HANDLER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="216"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_MOUNT_OPERATION_HANDLER_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_MOUNT_OPERATION_HANDLER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="217"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_MOUNT_OPERATION_HANDLER_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_MOUNT_OPERATION_HANDLER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="286"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_MOUNT_OPERATION_HANDLER_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_MOUNT_OPERATION_HANDLER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="287"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SCREENSHOT"
                    c:identifier="PHOSH_DBUS_IS_SCREENSHOT"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SCREENSHOT_PROXY"
                    c:identifier="PHOSH_DBUS_IS_SCREENSHOT_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="285"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SCREENSHOT_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_SCREENSHOT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="286"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SCREENSHOT_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_SCREENSHOT_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="355"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SCREENSHOT_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_SCREENSHOT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="356"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SCREEN_SAVER"
                    c:identifier="PHOSH_DBUS_IS_SCREEN_SAVER"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SCREEN_SAVER_PROXY"
                    c:identifier="PHOSH_DBUS_IS_SCREEN_SAVER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="180"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SCREEN_SAVER_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_SCREEN_SAVER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="181"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SCREEN_SAVER_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_SCREEN_SAVER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="250"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SCREEN_SAVER_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_SCREEN_SAVER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="251"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SENSOR_PROXY"
                    c:identifier="PHOSH_DBUS_IS_SENSOR_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SENSOR_PROXY_COMPASS"
                    c:identifier="PHOSH_DBUS_IS_SENSOR_PROXY_COMPASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="344"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SENSOR_PROXY_COMPASS_PROXY"
                    c:identifier="PHOSH_DBUS_IS_SENSOR_PROXY_COMPASS_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="440"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SENSOR_PROXY_COMPASS_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_SENSOR_PROXY_COMPASS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="441"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SENSOR_PROXY_COMPASS_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_SENSOR_PROXY_COMPASS_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="510"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SENSOR_PROXY_COMPASS_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_SENSOR_PROXY_COMPASS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="511"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SENSOR_PROXY_PROXY"
                    c:identifier="PHOSH_DBUS_IS_SENSOR_PROXY_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="241"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SENSOR_PROXY_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_SENSOR_PROXY_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="242"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SENSOR_PROXY_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_SENSOR_PROXY_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="311"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SENSOR_PROXY_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_SENSOR_PROXY_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="312"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SESSION_MANAGER"
                    c:identifier="PHOSH_DBUS_IS_SESSION_MANAGER"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SESSION_MANAGER_PROXY"
                    c:identifier="PHOSH_DBUS_IS_SESSION_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="316"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SESSION_MANAGER_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_IS_SESSION_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="317"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SESSION_MANAGER_SKELETON"
                    c:identifier="PHOSH_DBUS_IS_SESSION_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="386"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_IS_SESSION_MANAGER_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_IS_SESSION_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="387"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_MANAGER"
                    c:identifier="PHOSH_DBUS_LOGIN_MANAGER"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_MANAGER_GET_IFACE"
                    c:identifier="PHOSH_DBUS_LOGIN_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_MANAGER_PROXY"
                    c:identifier="PHOSH_DBUS_LOGIN_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="168"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_MANAGER_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_LOGIN_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="169"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_MANAGER_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_LOGIN_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="170"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_MANAGER_SKELETON"
                    c:identifier="PHOSH_DBUS_LOGIN_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="238"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_MANAGER_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_LOGIN_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="239"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_MANAGER_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_LOGIN_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="240"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_SESSION"
                    c:identifier="PHOSH_DBUS_LOGIN_SESSION"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_SESSION_GET_IFACE"
                    c:identifier="PHOSH_DBUS_LOGIN_SESSION_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_SESSION_PROXY"
                    c:identifier="PHOSH_DBUS_LOGIN_SESSION_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="143"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_SESSION_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_LOGIN_SESSION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="144"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_SESSION_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_LOGIN_SESSION_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="145"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_SESSION_SKELETON"
                    c:identifier="PHOSH_DBUS_LOGIN_SESSION_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="213"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_SESSION_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_LOGIN_SESSION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="214"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_LOGIN_SESSION_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_LOGIN_SESSION_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/login1-session-dbus.h" line="215"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_MOUNT_OPERATION_HANDLER"
                    c:identifier="PHOSH_DBUS_MOUNT_OPERATION_HANDLER"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_MOUNT_OPERATION_HANDLER_GET_IFACE"
                    c:identifier="PHOSH_DBUS_MOUNT_OPERATION_HANDLER_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_MOUNT_OPERATION_HANDLER_PROXY"
                    c:identifier="PHOSH_DBUS_MOUNT_OPERATION_HANDLER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="213"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_MOUNT_OPERATION_HANDLER_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_MOUNT_OPERATION_HANDLER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="214"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_MOUNT_OPERATION_HANDLER_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_MOUNT_OPERATION_HANDLER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="215"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_MOUNT_OPERATION_HANDLER_SKELETON"
                    c:identifier="PHOSH_DBUS_MOUNT_OPERATION_HANDLER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="283"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_MOUNT_OPERATION_HANDLER_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_MOUNT_OPERATION_HANDLER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="284"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_MOUNT_OPERATION_HANDLER_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_MOUNT_OPERATION_HANDLER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="285"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREENSHOT"
                    c:identifier="PHOSH_DBUS_SCREENSHOT"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREENSHOT_GET_IFACE"
                    c:identifier="PHOSH_DBUS_SCREENSHOT_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREENSHOT_PROXY"
                    c:identifier="PHOSH_DBUS_SCREENSHOT_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="282"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREENSHOT_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_SCREENSHOT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="283"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREENSHOT_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_SCREENSHOT_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="284"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREENSHOT_SKELETON"
                    c:identifier="PHOSH_DBUS_SCREENSHOT_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="352"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREENSHOT_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_SCREENSHOT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="353"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREENSHOT_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_SCREENSHOT_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="354"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREEN_SAVER"
                    c:identifier="PHOSH_DBUS_SCREEN_SAVER"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREEN_SAVER_GET_IFACE"
                    c:identifier="PHOSH_DBUS_SCREEN_SAVER_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREEN_SAVER_PROXY"
                    c:identifier="PHOSH_DBUS_SCREEN_SAVER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="177"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREEN_SAVER_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_SCREEN_SAVER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="178"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREEN_SAVER_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_SCREEN_SAVER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="179"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREEN_SAVER_SKELETON"
                    c:identifier="PHOSH_DBUS_SCREEN_SAVER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="247"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREEN_SAVER_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_SCREEN_SAVER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="248"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SCREEN_SAVER_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_SCREEN_SAVER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="249"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_COMPASS"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_COMPASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="343"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_COMPASS_GET_IFACE"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_COMPASS_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="345"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_COMPASS_PROXY"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_COMPASS_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="437"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_COMPASS_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_COMPASS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="438"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_COMPASS_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_COMPASS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="439"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_COMPASS_SKELETON"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_COMPASS_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="507"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_COMPASS_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_COMPASS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="508"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_COMPASS_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_COMPASS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="509"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_GET_IFACE"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_PROXY"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="238"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="239"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="240"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_SKELETON"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="308"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="309"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SENSOR_PROXY_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_SENSOR_PROXY_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="310"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SESSION_MANAGER"
                    c:identifier="PHOSH_DBUS_SESSION_MANAGER"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SESSION_MANAGER_GET_IFACE"
                    c:identifier="PHOSH_DBUS_SESSION_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SESSION_MANAGER_PROXY"
                    c:identifier="PHOSH_DBUS_SESSION_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="313"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SESSION_MANAGER_PROXY_CLASS"
                    c:identifier="PHOSH_DBUS_SESSION_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="314"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SESSION_MANAGER_PROXY_GET_CLASS"
                    c:identifier="PHOSH_DBUS_SESSION_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="315"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SESSION_MANAGER_SKELETON"
                    c:identifier="PHOSH_DBUS_SESSION_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="383"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SESSION_MANAGER_SKELETON_CLASS"
                    c:identifier="PHOSH_DBUS_SESSION_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="384"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_SESSION_MANAGER_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_DBUS_SESSION_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="385"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="DBusColor"
               c:symbol-prefix="dbus_color"
               c:type="PhoshDBusColor"
               glib:type-name="PhoshDBusColor"
               glib:get-type="phosh_dbus_color_get_type"
               glib:type-struct="DBusColorIface">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-color-dbus.c"
           line="297">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Color.top_of_page"&gt;org.gnome.SettingsDaemon.Color&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/gsd-color-dbus.h" line="37"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_color_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="264">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Color.top_of_page"&gt;org.gnome.SettingsDaemon.Color&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="269">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_color_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="277">Overrides all #GObject properties in the #PhoshDBusColor interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="285">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="279">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="280">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_night_light_active"
                      invoker="get_night_light_active"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="339">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Color.NightLightActive"&gt;"NightLightActive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="347">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="341">A #PhoshDBusColor.</doc>
            <type name="DBusColor" c:type="PhoshDBusColor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_temperature"
                      invoker="get_temperature"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="372">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Color.Temperature"&gt;"Temperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="380">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="374">A #PhoshDBusColor.</doc>
            <type name="DBusColor" c:type="PhoshDBusColor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_night_light_active"
              c:identifier="phosh_dbus_color_get_night_light_active"
              glib:get-property="night-light-active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="339">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Color.NightLightActive"&gt;"NightLightActive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="347">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="341">A #PhoshDBusColor.</doc>
            <type name="DBusColor" c:type="PhoshDBusColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temperature"
              c:identifier="phosh_dbus_color_get_temperature"
              glib:get-property="temperature"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="372">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Color.Temperature"&gt;"Temperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="380">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="374">A #PhoshDBusColor.</doc>
            <type name="DBusColor" c:type="PhoshDBusColor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_night_light_active"
              c:identifier="phosh_dbus_color_set_night_light_active"
              glib:set-property="night-light-active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="357">Sets the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Color.NightLightActive"&gt;"NightLightActive"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="359">A #PhoshDBusColor.</doc>
            <type name="DBusColor" c:type="PhoshDBusColor*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="360">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_temperature"
              c:identifier="phosh_dbus_color_set_temperature"
              glib:set-property="temperature"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="390">Sets the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Color.Temperature"&gt;"Temperature"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="392">A #PhoshDBusColor.</doc>
            <type name="DBusColor" c:type="PhoshDBusColor*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="393">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="night-light-active"
                writable="1"
                transfer-ownership="none"
                setter="set_night_light_active"
                getter="get_night_light_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="319">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Color.NightLightActive"&gt;"NightLightActive"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="temperature"
                writable="1"
                transfer-ownership="none"
                setter="set_temperature"
                getter="get_temperature"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="328">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Color.Temperature"&gt;"Temperature"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
    </interface>
    <record name="DBusColorIface"
            c:type="PhoshDBusColorIface"
            glib:is-gtype-struct-for="DBusColor">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-color-dbus.c"
           line="303">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Color.top_of_page"&gt;org.gnome.SettingsDaemon.Color&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/gsd-color-dbus.h" line="37"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="305">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_night_light_active">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="306">Getter for the #PhoshDBusColor:night-light-active property.</doc>
        <callback name="get_night_light_active">
          <source-position filename="src/dbus/gsd-color-dbus.h" line="33"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="347">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/gsd-color-dbus.c"
                   line="341">A #PhoshDBusColor.</doc>
              <type name="DBusColor" c:type="PhoshDBusColor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_temperature">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="307">Getter for the #PhoshDBusColor:temperature property.</doc>
        <callback name="get_temperature">
          <source-position filename="src/dbus/gsd-color-dbus.h" line="35"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="380">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/gsd-color-dbus.c"
                   line="374">A #PhoshDBusColor.</doc>
              <type name="DBusColor" c:type="PhoshDBusColor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusColorProxy"
           c:symbol-prefix="dbus_color_proxy"
           c:type="PhoshDBusColorProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusColorProxy"
           glib:get-type="phosh_dbus_color_proxy_get_type"
           glib:type-struct="DBusColorProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-color-dbus.c"
           line="407">The #PhoshDBusColorProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/gsd-color-dbus.h" line="80"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusColor"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_color_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="683">Finishes an operation started with phosh_dbus_color_proxy_new().</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="690">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusColorProxy" c:type="PhoshDBusColor*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="685">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_color_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_color_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="773">Finishes an operation started with phosh_dbus_color_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="780">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusColorProxy" c:type="PhoshDBusColor*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="775">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_color_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_color_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="798">Like phosh_dbus_color_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_color_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="118"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="813">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusColorProxy" c:type="PhoshDBusColor*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="800">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="801">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="802">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="803">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="804">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_color_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="708">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Color.top_of_page"&gt;org.gnome.SettingsDaemon.Color&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_color_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="99"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="723">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusColorProxy" c:type="PhoshDBusColor*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="710">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="711">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="712">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="713">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="714">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_color_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="653">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Color.top_of_page"&gt;org.gnome.SettingsDaemon.Color&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_color_proxy_new_finish() to get the result of the operation.

See phosh_dbus_color_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="655">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="656">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="657">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="658">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="659">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="660">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="661">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_color_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="743">Like phosh_dbus_color_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_color_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_color_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="745">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="746">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="747">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="748">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="749">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="750">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-color-dbus.c"
                 line="751">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusColorProxyPrivate"
              c:type="PhoshDBusColorProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusColorProxyClass"
            c:type="PhoshDBusColorProxyClass"
            glib:is-gtype-struct-for="DBusColorProxy">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-color-dbus.c"
           line="413">Class structure for #PhoshDBusColorProxy.</doc>
      <source-position filename="src/dbus/gsd-color-dbus.h" line="80"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="415">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusColorProxyPrivate"
            c:type="PhoshDBusColorProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="68"/>
    </record>
    <class name="DBusColorSkeleton"
           c:symbol-prefix="dbus_color_skeleton"
           c:type="PhoshDBusColorSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusColorSkeleton"
           glib:get-type="phosh_dbus_color_skeleton_get_type"
           glib:type-struct="DBusColorSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-color-dbus.c"
           line="835">The #PhoshDBusColorSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/gsd-color-dbus.h" line="150"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusColor"/>
      <constructor name="new" c:identifier="phosh_dbus_color_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="1301">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Color.top_of_page"&gt;org.gnome.SettingsDaemon.Color&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/gsd-color-dbus.h" line="158"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="1306">The skeleton object.</doc>
          <type name="DBusColorSkeleton" c:type="PhoshDBusColor*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusColorSkeletonPrivate"
              c:type="PhoshDBusColorSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusColorSkeletonClass"
            c:type="PhoshDBusColorSkeletonClass"
            glib:is-gtype-struct-for="DBusColorSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-color-dbus.c"
           line="841">Class structure for #PhoshDBusColorSkeleton.</doc>
      <source-position filename="src/dbus/gsd-color-dbus.h" line="150"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="843">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusColorSkeletonPrivate"
            c:type="PhoshDBusColorSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/gsd-color-dbus.h" line="138"/>
    </record>
    <interface name="DBusDisplayConfig"
               c:symbol-prefix="dbus_display_config"
               c:type="PhoshDBusDisplayConfig"
               glib:type-name="PhoshDBusDisplayConfig"
               glib:get-type="phosh_dbus_display_config_get_type"
               glib:type-struct="DBusDisplayConfigIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-display-dbus.c"
           line="1416">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-DisplayConfig.top_of_page"&gt;org.gnome.Mutter.DisplayConfig&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-display-dbus.h" line="101"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_display_config_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1263">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Mutter-DisplayConfig.top_of_page"&gt;org.gnome.Mutter.DisplayConfig&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1268">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_display_config_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1276">Overrides all #GObject properties in the #PhoshDBusDisplayConfig interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1284">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1278">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1279">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_apply_monitors_config_allowed"
                      invoker="get_apply_monitors_config_allowed"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1834">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.ApplyMonitorsConfigAllowed"&gt;"ApplyMonitorsConfigAllowed"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1842">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1836">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_backlight"
                      invoker="get_backlight"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1715">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.Backlight"&gt;"Backlight"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_dbus_display_config_dup_backlight() if on another thread.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="90"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1725">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1717">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_night_light_supported"
                      invoker="get_night_light_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1867">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.NightLightSupported"&gt;"NightLightSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1875">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1869">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_panel_orientation_managed"
                      invoker="get_panel_orientation_managed"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1801">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.PanelOrientationManaged"&gt;"PanelOrientationManaged"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1809">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1803">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_power_save_mode"
                      invoker="get_power_save_mode"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1768">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.PowerSaveMode"&gt;"PowerSaveMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1776">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1770">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_apply_configuration">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1425">Handler for the #PhoshDBusDisplayConfig::handle-apply-configuration signal.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_persistent" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_crtcs" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_outputs" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_apply_monitors_config">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1426">Handler for the #PhoshDBusDisplayConfig::handle-apply-monitors-config signal.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_method" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_logical_monitors" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_change_backlight">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1427">Handler for the #PhoshDBusDisplayConfig::handle-change-backlight signal.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_output" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_crtc_gamma">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1428">Handler for the #PhoshDBusDisplayConfig::handle-get-crtc-gamma signal.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_crtc" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_current_state">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1429">Handler for the #PhoshDBusDisplayConfig::handle-get-current-state signal.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_resources">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1430">Handler for the #PhoshDBusDisplayConfig::handle-get-resources signal.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_crtc_gamma">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1431">Handler for the #PhoshDBusDisplayConfig::handle-set-crtc-gamma signal.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_crtc" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_red" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_green" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_blue" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_output_ctm">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1432">Handler for the #PhoshDBusDisplayConfig::handle-set-output-ctm signal.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_output" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_ctm" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="monitors_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1438">Handler for the #PhoshDBusDisplayConfig::monitors-changed signal.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="call_apply_configuration"
              c:identifier="phosh_dbus_display_config_call_apply_configuration"
              glib:finish-func="call_apply_configuration_finish"
              glib:sync-func="call_apply_configuration_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2041">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ApplyConfiguration"&gt;ApplyConfiguration()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_display_config_call_apply_configuration_finish() to get the result of the operation.

See phosh_dbus_display_config_call_apply_configuration_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2043">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2044">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_persistent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2045">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_crtcs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2046">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_outputs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2047">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2048">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2049">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2050">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_apply_configuration_finish"
              c:identifier="phosh_dbus_display_config_call_apply_configuration_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2083">Finishes an operation started with phosh_dbus_display_config_call_apply_configuration().</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="207"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2091">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2085">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2086">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_display_config_call_apply_configuration().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_apply_configuration_sync"
              c:identifier="phosh_dbus_display_config_call_apply_configuration_sync"
              throws="1"
              glib:async-func="call_apply_configuration">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2110">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ApplyConfiguration"&gt;ApplyConfiguration()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_display_config_call_apply_configuration() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="212"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2124">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2112">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2113">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_persistent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2114">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_crtcs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2115">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_outputs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2116">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2117">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_apply_monitors_config"
              c:identifier="phosh_dbus_display_config_call_apply_monitors_config"
              glib:finish-func="call_apply_monitors_config_finish"
              glib:sync-func="call_apply_monitors_config_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2633">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ApplyMonitorsConfig"&gt;ApplyMonitorsConfig()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_display_config_call_apply_monitors_config_finish() to get the result of the operation.

See phosh_dbus_display_config_call_apply_monitors_config_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="321"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2635">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2636">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2637">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_logical_monitors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2638">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2639">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2640">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2641">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2642">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_apply_monitors_config_finish"
              c:identifier="phosh_dbus_display_config_call_apply_monitors_config_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2675">Finishes an operation started with phosh_dbus_display_config_call_apply_monitors_config().</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="331"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2683">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2677">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2678">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_display_config_call_apply_monitors_config().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_apply_monitors_config_sync"
              c:identifier="phosh_dbus_display_config_call_apply_monitors_config_sync"
              throws="1"
              glib:async-func="call_apply_monitors_config">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2702">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ApplyMonitorsConfig"&gt;ApplyMonitorsConfig()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_display_config_call_apply_monitors_config() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="336"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2716">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2704">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2705">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2706">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_logical_monitors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2707">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2708">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2709">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_backlight"
              c:identifier="phosh_dbus_display_config_call_change_backlight"
              glib:finish-func="call_change_backlight_finish"
              glib:sync-func="call_change_backlight_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2157">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ChangeBacklight"&gt;ChangeBacklight()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_display_config_call_change_backlight_finish() to get the result of the operation.

See phosh_dbus_display_config_call_change_backlight_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="221"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2159">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2160">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2161">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2162">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2163">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2164">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2165">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_backlight_finish"
              c:identifier="phosh_dbus_display_config_call_change_backlight_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2196">Finishes an operation started with phosh_dbus_display_config_call_change_backlight().</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="230"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2205">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2198">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="out_new_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2199">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2200">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_display_config_call_change_backlight().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_backlight_sync"
              c:identifier="phosh_dbus_display_config_call_change_backlight_sync"
              throws="1"
              glib:async-func="call_change_backlight">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2226">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ChangeBacklight"&gt;ChangeBacklight()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_display_config_call_change_backlight() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="236"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2240">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2228">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2229">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2230">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2231">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="out_new_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2232">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2233">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_crtc_gamma"
              c:identifier="phosh_dbus_display_config_call_get_crtc_gamma"
              glib:finish-func="call_get_crtc_gamma_finish"
              glib:sync-func="call_get_crtc_gamma_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2273">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetCrtcGamma"&gt;GetCrtcGamma()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_display_config_call_get_crtc_gamma_finish() to get the result of the operation.

See phosh_dbus_display_config_call_get_crtc_gamma_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2275">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2276">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_crtc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2277">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2278">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2279">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2280">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_crtc_gamma_finish"
              c:identifier="phosh_dbus_display_config_call_get_crtc_gamma_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2309">Finishes an operation started with phosh_dbus_display_config_call_get_crtc_gamma().</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="253"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2320">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2311">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="out_red"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2312">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_green"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2313">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_blue"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2314">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2315">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_display_config_call_get_crtc_gamma().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_crtc_gamma_sync"
              c:identifier="phosh_dbus_display_config_call_get_crtc_gamma_sync"
              throws="1"
              glib:async-func="call_get_crtc_gamma">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2345">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetCrtcGamma"&gt;GetCrtcGamma()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_display_config_call_get_crtc_gamma() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="261"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2360">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2347">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2348">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_crtc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2349">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_red"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2350">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_green"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2351">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_blue"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2352">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2353">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_current_state"
              c:identifier="phosh_dbus_display_config_call_get_current_state"
              glib:finish-func="call_get_current_state_finish"
              glib:sync-func="call_get_current_state_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2517">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetCurrentState"&gt;GetCurrentState()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_display_config_call_get_current_state_finish() to get the result of the operation.

See phosh_dbus_display_config_call_get_current_state_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="297"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2519">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2520">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2521">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2522">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_current_state_finish"
              c:identifier="phosh_dbus_display_config_call_get_current_state_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2547">Finishes an operation started with phosh_dbus_display_config_call_get_current_state().</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="303"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2559">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2549">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="out_serial"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2550">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_monitors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2551">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_logical_monitors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2552">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_properties"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2553">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2554">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_display_config_call_get_current_state().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_current_state_sync"
              c:identifier="phosh_dbus_display_config_call_get_current_state_sync"
              throws="1"
              glib:async-func="call_get_current_state">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2586">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetCurrentState"&gt;GetCurrentState()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_display_config_call_get_current_state() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="312"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2600">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2588">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="out_serial"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2589">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_monitors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2590">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_logical_monitors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2591">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_properties"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2592">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2593">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_resources"
              c:identifier="phosh_dbus_display_config_call_get_resources"
              glib:finish-func="call_get_resources_finish"
              glib:sync-func="call_get_resources_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1913">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetResources"&gt;GetResources()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_display_config_call_get_resources_finish() to get the result of the operation.

See phosh_dbus_display_config_call_get_resources_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="169"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1915">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1916">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1917">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1918">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_resources_finish"
              c:identifier="phosh_dbus_display_config_call_get_resources_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1943">Finishes an operation started with phosh_dbus_display_config_call_get_resources().</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="175"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1957">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1945">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="out_serial"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1946">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_crtcs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1947">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_outputs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1948">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_modes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1949">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_max_screen_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1950">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="out_max_screen_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1951">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1952">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_display_config_call_get_resources().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_resources_sync"
              c:identifier="phosh_dbus_display_config_call_get_resources_sync"
              throws="1"
              glib:async-func="call_get_resources">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1988">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetResources"&gt;GetResources()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_display_config_call_get_resources() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="186"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2004">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1990">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="out_serial"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1991">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_crtcs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1992">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_outputs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1993">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_modes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1994">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_max_screen_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1995">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="out_max_screen_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1996">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1997">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_crtc_gamma"
              c:identifier="phosh_dbus_display_config_call_set_crtc_gamma"
              glib:finish-func="call_set_crtc_gamma_finish"
              glib:sync-func="call_set_crtc_gamma_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2395">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.SetCrtcGamma"&gt;SetCrtcGamma()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_display_config_call_set_crtc_gamma_finish() to get the result of the operation.

See phosh_dbus_display_config_call_set_crtc_gamma_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2397">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2398">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_crtc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2399">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_red" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2400">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_green" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2401">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_blue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2402">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2403">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2404">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2405">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_crtc_gamma_finish"
              c:identifier="phosh_dbus_display_config_call_set_crtc_gamma_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2440">Finishes an operation started with phosh_dbus_display_config_call_set_crtc_gamma().</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="282"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2448">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2442">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2443">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_display_config_call_set_crtc_gamma().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_crtc_gamma_sync"
              c:identifier="phosh_dbus_display_config_call_set_crtc_gamma_sync"
              throws="1"
              glib:async-func="call_set_crtc_gamma">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2467">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.SetCrtcGamma"&gt;SetCrtcGamma()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_display_config_call_set_crtc_gamma() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="287"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2482">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2469">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2470">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_crtc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2471">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_red" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2472">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_green" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2473">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_blue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2474">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2475">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_output_ctm"
              c:identifier="phosh_dbus_display_config_call_set_output_ctm"
              glib:finish-func="call_set_output_ctm_finish"
              glib:sync-func="call_set_output_ctm_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2749">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.SetOutputCTM"&gt;SetOutputCTM()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_display_config_call_set_output_ctm_finish() to get the result of the operation.

See phosh_dbus_display_config_call_set_output_ctm_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="345"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2751">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2752">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2753">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_ctm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2754">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2755">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2756">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2757">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_output_ctm_finish"
              c:identifier="phosh_dbus_display_config_call_set_output_ctm_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2788">Finishes an operation started with phosh_dbus_display_config_call_set_output_ctm().</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="354"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2796">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2790">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2791">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_display_config_call_set_output_ctm().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_output_ctm_sync"
              c:identifier="phosh_dbus_display_config_call_set_output_ctm_sync"
              throws="1"
              glib:async-func="call_set_output_ctm">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2815">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.SetOutputCTM"&gt;SetOutputCTM()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_display_config_call_set_output_ctm() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="359"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="2828">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2817">A #PhoshDBusDisplayConfigProxy.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2818">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2819">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_ctm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2820">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2821">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_apply_configuration"
              c:identifier="phosh_dbus_display_config_complete_apply_configuration">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2895">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ApplyConfiguration"&gt;ApplyConfiguration()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2897">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2898">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_apply_monitors_config"
              c:identifier="phosh_dbus_display_config_complete_apply_monitors_config">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="3009">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ApplyMonitorsConfig"&gt;ApplyMonitorsConfig()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3011">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3012">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_change_backlight"
              c:identifier="phosh_dbus_display_config_complete_change_backlight">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2913">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ChangeBacklight"&gt;ChangeBacklight()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2915">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2916">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="new_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2917">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_crtc_gamma"
              c:identifier="phosh_dbus_display_config_complete_get_crtc_gamma">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2934">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetCrtcGamma"&gt;GetCrtcGamma()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2936">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2937">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="red" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2938">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="green" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2939">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="blue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2940">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_current_state"
              c:identifier="phosh_dbus_display_config_complete_get_current_state">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2979">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetCurrentState"&gt;GetCurrentState()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2981">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2982">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2983">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="monitors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2984">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="logical_monitors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2985">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2986">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_resources"
              c:identifier="phosh_dbus_display_config_complete_get_resources">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2859">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetResources"&gt;GetResources()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2861">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2862">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2863">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="crtcs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2864">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="outputs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2865">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="modes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2866">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="max_screen_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2867">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="max_screen_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2868">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_crtc_gamma"
              c:identifier="phosh_dbus_display_config_complete_set_crtc_gamma">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="2961">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.SetCrtcGamma"&gt;SetCrtcGamma()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2963">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="2964">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_output_ctm"
              c:identifier="phosh_dbus_display_config_complete_set_output_ctm">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="3027">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.SetOutputCTM"&gt;SetOutputCTM()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3029">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3030">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_backlight"
              c:identifier="phosh_dbus_display_config_dup_backlight"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1735">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.Backlight"&gt;"Backlight"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="371"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1743">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1737">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_monitors_changed"
              c:identifier="phosh_dbus_display_config_emit_monitors_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1900">Emits the &lt;link linkend="gdbus-signal-org-gnome-Mutter-DisplayConfig.MonitorsChanged"&gt;"MonitorsChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1902">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apply_monitors_config_allowed"
              c:identifier="phosh_dbus_display_config_get_apply_monitors_config_allowed"
              glib:get-property="apply-monitors-config-allowed"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1834">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.ApplyMonitorsConfigAllowed"&gt;"ApplyMonitorsConfigAllowed"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="380"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1842">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1836">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_backlight"
              c:identifier="phosh_dbus_display_config_get_backlight"
              glib:get-property="backlight"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1715">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.Backlight"&gt;"Backlight"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_dbus_display_config_dup_backlight() if on another thread.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="370"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1725">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1717">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_night_light_supported"
              c:identifier="phosh_dbus_display_config_get_night_light_supported"
              glib:get-property="night-light-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1867">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.NightLightSupported"&gt;"NightLightSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="383"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1875">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1869">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_panel_orientation_managed"
              c:identifier="phosh_dbus_display_config_get_panel_orientation_managed"
              glib:get-property="panel-orientation-managed"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1801">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.PanelOrientationManaged"&gt;"PanelOrientationManaged"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="377"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1809">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1803">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_power_save_mode"
              c:identifier="phosh_dbus_display_config_get_power_save_mode"
              glib:get-property="power-save-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1768">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.PowerSaveMode"&gt;"PowerSaveMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="374"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1776">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1770">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_apply_monitors_config_allowed"
              c:identifier="phosh_dbus_display_config_set_apply_monitors_config_allowed"
              glib:set-property="apply-monitors-config-allowed"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1852">Sets the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.ApplyMonitorsConfigAllowed"&gt;"ApplyMonitorsConfigAllowed"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="381"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1854">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1855">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backlight"
              c:identifier="phosh_dbus_display_config_set_backlight"
              glib:set-property="backlight"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1753">Sets the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.Backlight"&gt;"Backlight"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="372"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1755">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1756">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_night_light_supported"
              c:identifier="phosh_dbus_display_config_set_night_light_supported"
              glib:set-property="night-light-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1885">Sets the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.NightLightSupported"&gt;"NightLightSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="384"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1887">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1888">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_panel_orientation_managed"
              c:identifier="phosh_dbus_display_config_set_panel_orientation_managed"
              glib:set-property="panel-orientation-managed"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1819">Sets the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.PanelOrientationManaged"&gt;"PanelOrientationManaged"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="378"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1821">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1822">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_power_save_mode"
              c:identifier="phosh_dbus_display_config_set_power_save_mode"
              glib:set-property="power-save-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1786">Sets the &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.PowerSaveMode"&gt;"PowerSaveMode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="375"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1788">A #PhoshDBusDisplayConfig.</doc>
            <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1789">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="apply-monitors-config-allowed"
                writable="1"
                transfer-ownership="none"
                setter="set_apply_monitors_config_allowed"
                getter="get_apply_monitors_config_allowed"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1695">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.ApplyMonitorsConfigAllowed"&gt;"ApplyMonitorsConfigAllowed"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="backlight"
                writable="1"
                transfer-ownership="none"
                setter="set_backlight"
                getter="get_backlight">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1668">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.Backlight"&gt;"Backlight"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="night-light-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_night_light_supported"
                getter="get_night_light_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1704">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.NightLightSupported"&gt;"NightLightSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="panel-orientation-managed"
                writable="1"
                transfer-ownership="none"
                setter="set_panel_orientation_managed"
                getter="get_panel_orientation_managed"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1686">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.PanelOrientationManaged"&gt;"PanelOrientationManaged"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="power-save-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_power_save_mode"
                getter="get_power_save_mode"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1677">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Mutter-DisplayConfig.PowerSaveMode"&gt;"PowerSaveMode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <glib:signal name="handle-apply-configuration" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1472">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ApplyConfiguration"&gt;ApplyConfiguration()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_display_config_complete_apply_configuration() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1485">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1475">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1476">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_persistent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1477">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_crtcs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1478">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_outputs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1479">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-apply-monitors-config" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1596">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ApplyMonitorsConfig"&gt;ApplyMonitorsConfig()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_display_config_complete_apply_monitors_config() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1609">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1599">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1600">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1601">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_logical_monitors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1602">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1603">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-change-backlight" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1498">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.ChangeBacklight"&gt;ChangeBacklight()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_display_config_complete_change_backlight() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1510">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1501">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1502">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1503">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1504">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-crtc-gamma" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1523">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetCrtcGamma"&gt;GetCrtcGamma()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_display_config_complete_get_crtc_gamma() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1534">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1526">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1527">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_crtc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1528">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-current-state" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1574">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetCurrentState"&gt;GetCurrentState()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_display_config_complete_get_current_state() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1583">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1577">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-resources" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1450">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.GetResources"&gt;GetResources()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_display_config_complete_get_resources() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1459">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1453">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-crtc-gamma" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1547">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.SetCrtcGamma"&gt;SetCrtcGamma()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_display_config_complete_set_crtc_gamma() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1561">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1550">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1551">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_crtc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1552">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_red" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1553">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_green" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1554">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_blue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1555">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-output-ctm" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1622">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-DisplayConfig.SetOutputCTM"&gt;SetOutputCTM()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_display_config_complete_set_output_ctm() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1634">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1625">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_serial" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1626">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1627">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_ctm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1628">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="monitors-changed" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1648">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-Mutter-DisplayConfig.MonitorsChanged"&gt;"MonitorsChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="DBusDisplayConfigIface"
            c:type="PhoshDBusDisplayConfigIface"
            glib:is-gtype-struct-for="DBusDisplayConfig">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-display-dbus.c"
           line="1422">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-DisplayConfig.top_of_page"&gt;org.gnome.Mutter.DisplayConfig&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-display-dbus.h" line="101"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1424">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_apply_configuration">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1425">Handler for the #PhoshDBusDisplayConfig::handle-apply-configuration signal.</doc>
        <callback name="handle_apply_configuration">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="35"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_serial" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_persistent" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_crtcs" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_outputs" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_apply_monitors_config">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1426">Handler for the #PhoshDBusDisplayConfig::handle-apply-monitors-config signal.</doc>
        <callback name="handle_apply_monitors_config">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_serial" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_method" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_logical_monitors" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_properties" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_change_backlight">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1427">Handler for the #PhoshDBusDisplayConfig::handle-change-backlight signal.</doc>
        <callback name="handle_change_backlight">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_serial" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_output" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_crtc_gamma">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1428">Handler for the #PhoshDBusDisplayConfig::handle-get-crtc-gamma signal.</doc>
        <callback name="handle_get_crtc_gamma">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_serial" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_crtc" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_current_state">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1429">Handler for the #PhoshDBusDisplayConfig::handle-get-current-state signal.</doc>
        <callback name="handle_get_current_state">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_resources">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1430">Handler for the #PhoshDBusDisplayConfig::handle-get-resources signal.</doc>
        <callback name="handle_get_resources">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_crtc_gamma">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1431">Handler for the #PhoshDBusDisplayConfig::handle-set-crtc-gamma signal.</doc>
        <callback name="handle_set_crtc_gamma">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="72"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_serial" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_crtc" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_red" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_green" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_blue" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_output_ctm">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1432">Handler for the #PhoshDBusDisplayConfig::handle-set-output-ctm signal.</doc>
        <callback name="handle_set_output_ctm">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="81"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_serial" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_output" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_ctm" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_apply_monitors_config_allowed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1433">Getter for the #PhoshDBusDisplayConfig:apply-monitors-config-allowed property.</doc>
        <callback name="get_apply_monitors_config_allowed">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="88"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1842">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/phosh-display-dbus.c"
                   line="1836">A #PhoshDBusDisplayConfig.</doc>
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_backlight">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1434">Getter for the #PhoshDBusDisplayConfig:backlight property.</doc>
        <callback name="get_backlight">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="90"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1725">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/phosh-display-dbus.c"
                   line="1717">A #PhoshDBusDisplayConfig.</doc>
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_night_light_supported">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1435">Getter for the #PhoshDBusDisplayConfig:night-light-supported property.</doc>
        <callback name="get_night_light_supported">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="92"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1875">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/phosh-display-dbus.c"
                   line="1869">A #PhoshDBusDisplayConfig.</doc>
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_panel_orientation_managed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1436">Getter for the #PhoshDBusDisplayConfig:panel-orientation-managed property.</doc>
        <callback name="get_panel_orientation_managed">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="94"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1809">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/phosh-display-dbus.c"
                   line="1803">A #PhoshDBusDisplayConfig.</doc>
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_power_save_mode">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1437">Getter for the #PhoshDBusDisplayConfig:power-save-mode property.</doc>
        <callback name="get_power_save_mode">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="96"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="1776">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/phosh-display-dbus.c"
                   line="1770">A #PhoshDBusDisplayConfig.</doc>
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="monitors_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1438">Handler for the #PhoshDBusDisplayConfig::monitors-changed signal.</doc>
        <callback name="monitors_changed">
          <source-position filename="src/dbus/phosh-display-dbus.h" line="98"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusDisplayConfig" c:type="PhoshDBusDisplayConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusDisplayConfigProxy"
           c:symbol-prefix="dbus_display_config_proxy"
           c:type="PhoshDBusDisplayConfigProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusDisplayConfigProxy"
           glib:get-type="phosh_dbus_display_config_proxy_get_type"
           glib:type-struct="DBusDisplayConfigProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-display-dbus.c"
           line="3047">The #PhoshDBusDisplayConfigProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-display-dbus.h" line="410"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusDisplayConfig"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_display_config_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="3369">Finishes an operation started with phosh_dbus_display_config_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="426"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="3376">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusDisplayConfigProxy"
                c:type="PhoshDBusDisplayConfig*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3371">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_display_config_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_display_config_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="3459">Finishes an operation started with phosh_dbus_display_config_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="445"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="3466">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusDisplayConfigProxy"
                c:type="PhoshDBusDisplayConfig*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3461">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_display_config_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_display_config_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="3484">Like phosh_dbus_display_config_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_display_config_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="448"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="3499">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusDisplayConfigProxy"
                c:type="PhoshDBusDisplayConfig*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3486">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3487">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3488">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3489">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3490">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_display_config_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="3394">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-DisplayConfig.top_of_page"&gt;org.gnome.Mutter.DisplayConfig&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_display_config_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="429"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="3409">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusDisplayConfigProxy"
                c:type="PhoshDBusDisplayConfig*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3396">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3397">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3398">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3399">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3400">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_display_config_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="3339">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-DisplayConfig.top_of_page"&gt;org.gnome.Mutter.DisplayConfig&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_display_config_proxy_new_finish() to get the result of the operation.

See phosh_dbus_display_config_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="418"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3341">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3342">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3343">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3344">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3345">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3346">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3347">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_display_config_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="3429">Like phosh_dbus_display_config_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_display_config_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_display_config_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="437"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3431">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3432">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3433">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3434">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3435">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3436">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-display-dbus.c"
                 line="3437">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusDisplayConfigProxyPrivate"
              c:type="PhoshDBusDisplayConfigProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusDisplayConfigProxyClass"
            c:type="PhoshDBusDisplayConfigProxyClass"
            glib:is-gtype-struct-for="DBusDisplayConfigProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-display-dbus.c"
           line="3053">Class structure for #PhoshDBusDisplayConfigProxy.</doc>
      <source-position filename="src/dbus/phosh-display-dbus.h" line="410"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="3055">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusDisplayConfigProxyPrivate"
            c:type="PhoshDBusDisplayConfigProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="398"/>
    </record>
    <class name="DBusDisplayConfigSkeleton"
           c:symbol-prefix="dbus_display_config_skeleton"
           c:type="PhoshDBusDisplayConfigSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusDisplayConfigSkeleton"
           glib:get-type="phosh_dbus_display_config_skeleton_get_type"
           glib:type-struct="DBusDisplayConfigSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-display-dbus.c"
           line="3521">The #PhoshDBusDisplayConfigSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-display-dbus.h" line="480"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusDisplayConfig"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_display_config_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="4049">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-DisplayConfig.top_of_page"&gt;org.gnome.Mutter.DisplayConfig&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-display-dbus.h" line="488"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="4054">The skeleton object.</doc>
          <type name="DBusDisplayConfigSkeleton"
                c:type="PhoshDBusDisplayConfig*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusDisplayConfigSkeletonPrivate"
              c:type="PhoshDBusDisplayConfigSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusDisplayConfigSkeletonClass"
            c:type="PhoshDBusDisplayConfigSkeletonClass"
            glib:is-gtype-struct-for="DBusDisplayConfigSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-display-dbus.c"
           line="3527">Class structure for #PhoshDBusDisplayConfigSkeleton.</doc>
      <source-position filename="src/dbus/phosh-display-dbus.h" line="480"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="3529">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusDisplayConfigSkeletonPrivate"
            c:type="PhoshDBusDisplayConfigSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-display-dbus.h" line="468"/>
    </record>
    <interface name="DBusEndSessionDialog"
               c:symbol-prefix="dbus_end_session_dialog"
               c:type="PhoshDBusEndSessionDialog"
               glib:type-name="PhoshDBusEndSessionDialog"
               glib:get-type="phosh_dbus_end_session_dialog_get_type"
               glib:type-struct="DBusEndSessionDialogIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-end-session-dialog-dbus.c"
           line="615">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-EndSessionDialog.top_of_page"&gt;org.gnome.SessionManager.EndSessionDialog&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="66"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_end_session_dialog_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="467">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SessionManager-EndSessionDialog.top_of_page"&gt;org.gnome.SessionManager.EndSessionDialog&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="472">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_end_session_dialog_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="480">Overrides all #GObject properties in the #PhoshDBusEndSessionDialog interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="488">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="482">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="483">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="canceled">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="625">Handler for the #PhoshDBusEndSessionDialog::canceled signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="closed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="626">Handler for the #PhoshDBusEndSessionDialog::closed signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="confirmed_hibernate">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="627">Handler for the #PhoshDBusEndSessionDialog::confirmed-hibernate signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="confirmed_hybrid_sleep">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="628">Handler for the #PhoshDBusEndSessionDialog::confirmed-hybrid-sleep signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="confirmed_logout">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="629">Handler for the #PhoshDBusEndSessionDialog::confirmed-logout signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="confirmed_reboot">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="630">Handler for the #PhoshDBusEndSessionDialog::confirmed-reboot signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="confirmed_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="631">Handler for the #PhoshDBusEndSessionDialog::confirmed-shutdown signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="confirmed_suspend">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="632">Handler for the #PhoshDBusEndSessionDialog::confirmed-suspend signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="624">Handler for the #PhoshDBusEndSessionDialog::handle-open signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_timestamp" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_seconds_to_stay_open" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_inhibitor_object_paths"
                     transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_open"
              c:identifier="phosh_dbus_end_session_dialog_call_open"
              glib:finish-func="call_open_finish"
              glib:sync-func="call_open_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="929">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager-EndSessionDialog.Open"&gt;Open()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_end_session_dialog_call_open_finish() to get the result of the operation.

See phosh_dbus_end_session_dialog_call_open_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="931">A #PhoshDBusEndSessionDialogProxy.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="932">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="933">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_seconds_to_stay_open" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="934">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_inhibitor_object_paths"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="935">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="936">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="937">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="938">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_finish"
              c:identifier="phosh_dbus_end_session_dialog_call_open_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="971">Finishes an operation started with phosh_dbus_end_session_dialog_call_open().</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="123"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="979">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="973">A #PhoshDBusEndSessionDialogProxy.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="974">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_end_session_dialog_call_open().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_sync"
              c:identifier="phosh_dbus_end_session_dialog_call_open_sync"
              throws="1"
              glib:async-func="call_open">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="998">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager-EndSessionDialog.Open"&gt;Open()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_end_session_dialog_call_open() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="128"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="1012">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1000">A #PhoshDBusEndSessionDialogProxy.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1001">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1002">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_seconds_to_stay_open" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1003">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_inhibitor_object_paths"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1004">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1005">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open"
              c:identifier="phosh_dbus_end_session_dialog_complete_open">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="1045">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-SessionManager-EndSessionDialog.Open"&gt;Open()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1047">A #PhoshDBusEndSessionDialog.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1048">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_canceled"
              c:identifier="phosh_dbus_end_session_dialog_emit_canceled">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="903">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.Canceled"&gt;"Canceled"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="905">A #PhoshDBusEndSessionDialog.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_closed"
              c:identifier="phosh_dbus_end_session_dialog_emit_closed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="916">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.Closed"&gt;"Closed"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="918">A #PhoshDBusEndSessionDialog.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_confirmed_hibernate"
              c:identifier="phosh_dbus_end_session_dialog_emit_confirmed_hibernate">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="864">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedHibernate"&gt;"ConfirmedHibernate"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="866">A #PhoshDBusEndSessionDialog.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_confirmed_hybrid_sleep"
              c:identifier="phosh_dbus_end_session_dialog_emit_confirmed_hybrid_sleep">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="890">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedHybridSleep"&gt;"ConfirmedHybridSleep"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="892">A #PhoshDBusEndSessionDialog.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_confirmed_logout"
              c:identifier="phosh_dbus_end_session_dialog_emit_confirmed_logout">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="825">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedLogout"&gt;"ConfirmedLogout"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="827">A #PhoshDBusEndSessionDialog.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_confirmed_reboot"
              c:identifier="phosh_dbus_end_session_dialog_emit_confirmed_reboot">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="838">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedReboot"&gt;"ConfirmedReboot"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="840">A #PhoshDBusEndSessionDialog.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_confirmed_shutdown"
              c:identifier="phosh_dbus_end_session_dialog_emit_confirmed_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="851">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedShutdown"&gt;"ConfirmedShutdown"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="853">A #PhoshDBusEndSessionDialog.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_confirmed_suspend"
              c:identifier="phosh_dbus_end_session_dialog_emit_confirmed_suspend">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="877">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedSuspend"&gt;"ConfirmedSuspend"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="879">A #PhoshDBusEndSessionDialog.</doc>
            <type name="DBusEndSessionDialog"
                  c:type="PhoshDBusEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="canceled" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="785">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.Canceled"&gt;"Canceled"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="closed" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="804">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.Closed"&gt;"Closed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="confirmed-hibernate" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="728">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedHibernate"&gt;"ConfirmedHibernate"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="confirmed-hybrid-sleep" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="766">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedHybridSleep"&gt;"ConfirmedHybridSleep"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="confirmed-logout" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="671">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedLogout"&gt;"ConfirmedLogout"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="confirmed-reboot" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="690">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedReboot"&gt;"ConfirmedReboot"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="confirmed-shutdown" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="709">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedShutdown"&gt;"ConfirmedShutdown"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="confirmed-suspend" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="747">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-EndSessionDialog.ConfirmedSuspend"&gt;"ConfirmedSuspend"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="handle-open" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="644">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-SessionManager-EndSessionDialog.Open"&gt;Open()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_end_session_dialog_complete_open() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="657">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="647">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="648">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="649">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_seconds_to_stay_open" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="650">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_inhibitor_object_paths"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="651">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DBusEndSessionDialogIface"
            c:type="PhoshDBusEndSessionDialogIface"
            glib:is-gtype-struct-for="DBusEndSessionDialog">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-end-session-dialog-dbus.c"
           line="621">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-EndSessionDialog.top_of_page"&gt;org.gnome.SessionManager.EndSessionDialog&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="66"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="623">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_open">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="624">Handler for the #PhoshDBusEndSessionDialog::handle-open signal.</doc>
        <callback name="handle_open">
          <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusEndSessionDialog"
                    c:type="PhoshDBusEndSessionDialog*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_timestamp" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_seconds_to_stay_open"
                       transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_inhibitor_object_paths"
                       transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="canceled">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="625">Handler for the #PhoshDBusEndSessionDialog::canceled signal.</doc>
        <callback name="canceled">
          <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusEndSessionDialog"
                    c:type="PhoshDBusEndSessionDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="closed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="626">Handler for the #PhoshDBusEndSessionDialog::closed signal.</doc>
        <callback name="closed">
          <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusEndSessionDialog"
                    c:type="PhoshDBusEndSessionDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="confirmed_hibernate">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="627">Handler for the #PhoshDBusEndSessionDialog::confirmed-hibernate signal.</doc>
        <callback name="confirmed_hibernate">
          <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusEndSessionDialog"
                    c:type="PhoshDBusEndSessionDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="confirmed_hybrid_sleep">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="628">Handler for the #PhoshDBusEndSessionDialog::confirmed-hybrid-sleep signal.</doc>
        <callback name="confirmed_hybrid_sleep">
          <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusEndSessionDialog"
                    c:type="PhoshDBusEndSessionDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="confirmed_logout">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="629">Handler for the #PhoshDBusEndSessionDialog::confirmed-logout signal.</doc>
        <callback name="confirmed_logout">
          <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                           line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusEndSessionDialog"
                    c:type="PhoshDBusEndSessionDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="confirmed_reboot">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="630">Handler for the #PhoshDBusEndSessionDialog::confirmed-reboot signal.</doc>
        <callback name="confirmed_reboot">
          <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                           line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusEndSessionDialog"
                    c:type="PhoshDBusEndSessionDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="confirmed_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="631">Handler for the #PhoshDBusEndSessionDialog::confirmed-shutdown signal.</doc>
        <callback name="confirmed_shutdown">
          <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusEndSessionDialog"
                    c:type="PhoshDBusEndSessionDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="confirmed_suspend">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="632">Handler for the #PhoshDBusEndSessionDialog::confirmed-suspend signal.</doc>
        <callback name="confirmed_suspend">
          <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusEndSessionDialog"
                    c:type="PhoshDBusEndSessionDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusEndSessionDialogProxy"
           c:symbol-prefix="dbus_end_session_dialog_proxy"
           c:type="PhoshDBusEndSessionDialogProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusEndSessionDialogProxy"
           glib:get-type="phosh_dbus_end_session_dialog_proxy_get_type"
           glib:type-struct="DBusEndSessionDialogProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-end-session-dialog-dbus.c"
           line="1065">The #PhoshDBusEndSessionDialogProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="162"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusEndSessionDialog"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_end_session_dialog_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="1256">Finishes an operation started with phosh_dbus_end_session_dialog_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="178"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="1263">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusEndSessionDialogProxy"
                c:type="PhoshDBusEndSessionDialog*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1258">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_end_session_dialog_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_end_session_dialog_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="1346">Finishes an operation started with phosh_dbus_end_session_dialog_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="197"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="1353">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusEndSessionDialogProxy"
                c:type="PhoshDBusEndSessionDialog*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1348">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_end_session_dialog_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_end_session_dialog_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="1371">Like phosh_dbus_end_session_dialog_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_end_session_dialog_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="200"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="1386">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusEndSessionDialogProxy"
                c:type="PhoshDBusEndSessionDialog*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1373">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1374">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1375">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1376">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1377">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_end_session_dialog_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="1281">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-EndSessionDialog.top_of_page"&gt;org.gnome.SessionManager.EndSessionDialog&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_end_session_dialog_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="1296">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusEndSessionDialogProxy"
                c:type="PhoshDBusEndSessionDialog*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1283">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1284">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1285">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1286">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1287">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_end_session_dialog_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="1226">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-EndSessionDialog.top_of_page"&gt;org.gnome.SessionManager.EndSessionDialog&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_end_session_dialog_proxy_new_finish() to get the result of the operation.

See phosh_dbus_end_session_dialog_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1228">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1229">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1230">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1231">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1232">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1233">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1234">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_end_session_dialog_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="1316">Like phosh_dbus_end_session_dialog_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_end_session_dialog_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_end_session_dialog_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1318">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1319">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1320">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1321">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1322">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1323">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-end-session-dialog-dbus.c"
                 line="1324">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusEndSessionDialogProxyPrivate"
              c:type="PhoshDBusEndSessionDialogProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusEndSessionDialogProxyClass"
            c:type="PhoshDBusEndSessionDialogProxyClass"
            glib:is-gtype-struct-for="DBusEndSessionDialogProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-end-session-dialog-dbus.c"
           line="1071">Class structure for #PhoshDBusEndSessionDialogProxy.</doc>
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="162"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="1073">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusEndSessionDialogProxyPrivate"
            c:type="PhoshDBusEndSessionDialogProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="150"/>
    </record>
    <class name="DBusEndSessionDialogSkeleton"
           c:symbol-prefix="dbus_end_session_dialog_skeleton"
           c:type="PhoshDBusEndSessionDialogSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusEndSessionDialogSkeleton"
           glib:get-type="phosh_dbus_end_session_dialog_skeleton_get_type"
           glib:type-struct="DBusEndSessionDialogSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-end-session-dialog-dbus.c"
           line="1408">The #PhoshDBusEndSessionDialogSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="232"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusEndSessionDialog"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_end_session_dialog_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="1863">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-EndSessionDialog.top_of_page"&gt;org.gnome.SessionManager.EndSessionDialog&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                         line="240"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="1868">The skeleton object.</doc>
          <type name="DBusEndSessionDialogSkeleton"
                c:type="PhoshDBusEndSessionDialog*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusEndSessionDialogSkeletonPrivate"
              c:type="PhoshDBusEndSessionDialogSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusEndSessionDialogSkeletonClass"
            c:type="PhoshDBusEndSessionDialogSkeletonClass"
            glib:is-gtype-struct-for="DBusEndSessionDialogSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-end-session-dialog-dbus.c"
           line="1414">Class structure for #PhoshDBusEndSessionDialogSkeleton.</doc>
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="232"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="1416">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusEndSessionDialogSkeletonPrivate"
            c:type="PhoshDBusEndSessionDialogSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="220"/>
    </record>
    <interface name="DBusGnomeShell"
               c:symbol-prefix="dbus_gnome_shell"
               c:type="PhoshDBusGnomeShell"
               glib:type-name="PhoshDBusGnomeShell"
               glib:get-type="phosh_dbus_gnome_shell_get_type"
               glib:type-struct="DBusGnomeShellIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gnome-shell-dbus.c"
           line="973">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Shell.top_of_page"&gt;org.gnome.Shell&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h" line="80"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_gnome_shell_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="836">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Shell.top_of_page"&gt;org.gnome.Shell&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="841">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_gnome_shell_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="849">Overrides all #GObject properties in the #PhoshDBusGnomeShell interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="857">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="851">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="852">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="accelerator_activated">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="991">Handler for the #PhoshDBusGnomeShell::accelerator-activated signal.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_parameters" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_overview_active"
                      invoker="get_overview_active"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1208">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Shell.OverviewActive"&gt;"OverviewActive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1216">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1210">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_shell_version"
                      invoker="get_shell_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1241">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Shell.ShellVersion"&gt;"ShellVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_dbus_gnome_shell_dup_shell_version() if on another thread.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="73"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1251">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1243">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_grab_accelerator">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="982">Handler for the #PhoshDBusGnomeShell::handle-grab-accelerator signal.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_accelerator" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_modeFlags" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_grabFlags" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_grab_accelerators">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="983">Handler for the #PhoshDBusGnomeShell::handle-grab-accelerators signal.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_accelerators" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_hide_monitor_labels">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="984">Handler for the #PhoshDBusGnomeShell::handle-hide-monitor-labels signal.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_show_monitor_labels">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="985">Handler for the #PhoshDBusGnomeShell::handle-show-monitor-labels signal.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_params" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_show_osd">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="986">Handler for the #PhoshDBusGnomeShell::handle-show-osd signal.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_params" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_ungrab_accelerator">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="987">Handler for the #PhoshDBusGnomeShell::handle-ungrab-accelerator signal.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_ungrab_accelerators">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="988">Handler for the #PhoshDBusGnomeShell::handle-ungrab-accelerators signal.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_grab_accelerator"
              c:identifier="phosh_dbus_gnome_shell_call_grab_accelerator"
              glib:finish-func="call_grab_accelerator_finish"
              glib:sync-func="call_grab_accelerator_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1599">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.GrabAccelerator"&gt;GrabAccelerator()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_gnome_shell_call_grab_accelerator_finish() to get the result of the operation.

See phosh_dbus_gnome_shell_call_grab_accelerator_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1601">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_accelerator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1602">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_modeFlags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1603">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_grabFlags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1604">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1605">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1606">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1607">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_grab_accelerator_finish"
              c:identifier="phosh_dbus_gnome_shell_call_grab_accelerator_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1638">Finishes an operation started with phosh_dbus_gnome_shell_call_grab_accelerator().</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="197"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1647">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1640">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="out_action"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1641">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1642">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_gnome_shell_call_grab_accelerator().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_grab_accelerator_sync"
              c:identifier="phosh_dbus_gnome_shell_call_grab_accelerator_sync"
              throws="1"
              glib:async-func="call_grab_accelerator">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1668">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.GrabAccelerator"&gt;GrabAccelerator()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_gnome_shell_call_grab_accelerator() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="203"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1682">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1670">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_accelerator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1671">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_modeFlags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1672">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_grabFlags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1673">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_action"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1674">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1675">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_grab_accelerators"
              c:identifier="phosh_dbus_gnome_shell_call_grab_accelerators"
              glib:finish-func="call_grab_accelerators_finish"
              glib:sync-func="call_grab_accelerators_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1715">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.GrabAccelerators"&gt;GrabAccelerators()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_gnome_shell_call_grab_accelerators_finish() to get the result of the operation.

See phosh_dbus_gnome_shell_call_grab_accelerators_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="212"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1717">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_accelerators" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1718">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1719">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1720">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1721">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_grab_accelerators_finish"
              c:identifier="phosh_dbus_gnome_shell_call_grab_accelerators_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1748">Finishes an operation started with phosh_dbus_gnome_shell_call_grab_accelerators().</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="219"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1757">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1750">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="out_actions"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1751">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1752">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_gnome_shell_call_grab_accelerators().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_grab_accelerators_sync"
              c:identifier="phosh_dbus_gnome_shell_call_grab_accelerators_sync"
              throws="1"
              glib:async-func="call_grab_accelerators">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1778">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.GrabAccelerators"&gt;GrabAccelerators()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_gnome_shell_call_grab_accelerators() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="225"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1790">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1780">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_accelerators" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1781">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_actions"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1782">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1783">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hide_monitor_labels"
              c:identifier="phosh_dbus_gnome_shell_call_hide_monitor_labels"
              glib:finish-func="call_hide_monitor_labels_finish"
              glib:sync-func="call_hide_monitor_labels_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1409">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.HideMonitorLabels"&gt;HideMonitorLabels()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_gnome_shell_call_hide_monitor_labels_finish() to get the result of the operation.

See phosh_dbus_gnome_shell_call_hide_monitor_labels_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1411">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1412">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1413">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1414">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hide_monitor_labels_finish"
              c:identifier="phosh_dbus_gnome_shell_call_hide_monitor_labels_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1439">Finishes an operation started with phosh_dbus_gnome_shell_call_hide_monitor_labels().</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="160"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1447">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1441">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1442">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_gnome_shell_call_hide_monitor_labels().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hide_monitor_labels_sync"
              c:identifier="phosh_dbus_gnome_shell_call_hide_monitor_labels_sync"
              throws="1"
              glib:async-func="call_hide_monitor_labels">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1466">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.HideMonitorLabels"&gt;HideMonitorLabels()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_gnome_shell_call_hide_monitor_labels() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="165"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1476">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1468">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1469">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_show_monitor_labels"
              c:identifier="phosh_dbus_gnome_shell_call_show_monitor_labels"
              glib:finish-func="call_show_monitor_labels_finish"
              glib:sync-func="call_show_monitor_labels_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1311">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.ShowMonitorLabels"&gt;ShowMonitorLabels()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_gnome_shell_call_show_monitor_labels_finish() to get the result of the operation.

See phosh_dbus_gnome_shell_call_show_monitor_labels_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1313">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1314">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1315">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1316">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1317">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_show_monitor_labels_finish"
              c:identifier="phosh_dbus_gnome_shell_call_show_monitor_labels_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1344">Finishes an operation started with phosh_dbus_gnome_shell_call_show_monitor_labels().</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="143"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1352">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1346">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1347">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_gnome_shell_call_show_monitor_labels().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_show_monitor_labels_sync"
              c:identifier="phosh_dbus_gnome_shell_call_show_monitor_labels_sync"
              throws="1"
              glib:async-func="call_show_monitor_labels">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1371">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.ShowMonitorLabels"&gt;ShowMonitorLabels()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_gnome_shell_call_show_monitor_labels() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="148"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1382">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1373">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1374">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1375">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_show_osd"
              c:identifier="phosh_dbus_gnome_shell_call_show_osd"
              glib:finish-func="call_show_osd_finish"
              glib:sync-func="call_show_osd_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1501">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.ShowOSD"&gt;ShowOSD()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_gnome_shell_call_show_osd_finish() to get the result of the operation.

See phosh_dbus_gnome_shell_call_show_osd_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1503">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1504">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1505">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1506">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1507">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_show_osd_finish"
              c:identifier="phosh_dbus_gnome_shell_call_show_osd_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1534">Finishes an operation started with phosh_dbus_gnome_shell_call_show_osd().</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="177"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1542">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1536">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1537">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_gnome_shell_call_show_osd().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_show_osd_sync"
              c:identifier="phosh_dbus_gnome_shell_call_show_osd_sync"
              throws="1"
              glib:async-func="call_show_osd">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1561">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.ShowOSD"&gt;ShowOSD()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_gnome_shell_call_show_osd() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="182"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1572">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1563">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1564">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1565">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ungrab_accelerator"
              c:identifier="phosh_dbus_gnome_shell_call_ungrab_accelerator"
              glib:finish-func="call_ungrab_accelerator_finish"
              glib:sync-func="call_ungrab_accelerator_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1819">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.UngrabAccelerator"&gt;UngrabAccelerator()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_gnome_shell_call_ungrab_accelerator_finish() to get the result of the operation.

See phosh_dbus_gnome_shell_call_ungrab_accelerator_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="232"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1821">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1822">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1823">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1824">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1825">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ungrab_accelerator_finish"
              c:identifier="phosh_dbus_gnome_shell_call_ungrab_accelerator_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1852">Finishes an operation started with phosh_dbus_gnome_shell_call_ungrab_accelerator().</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="239"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1861">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1854">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="out_success"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1855">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1856">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_gnome_shell_call_ungrab_accelerator().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ungrab_accelerator_sync"
              c:identifier="phosh_dbus_gnome_shell_call_ungrab_accelerator_sync"
              throws="1"
              glib:async-func="call_ungrab_accelerator">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1882">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.UngrabAccelerator"&gt;UngrabAccelerator()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_gnome_shell_call_ungrab_accelerator() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="245"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1894">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1884">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1885">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_success"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1886">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1887">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ungrab_accelerators"
              c:identifier="phosh_dbus_gnome_shell_call_ungrab_accelerators"
              glib:finish-func="call_ungrab_accelerators_finish"
              glib:sync-func="call_ungrab_accelerators_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1923">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.UngrabAccelerators"&gt;UngrabAccelerators()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_gnome_shell_call_ungrab_accelerators_finish() to get the result of the operation.

See phosh_dbus_gnome_shell_call_ungrab_accelerators_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1925">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1926">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1927">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1928">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1929">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ungrab_accelerators_finish"
              c:identifier="phosh_dbus_gnome_shell_call_ungrab_accelerators_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1956">Finishes an operation started with phosh_dbus_gnome_shell_call_ungrab_accelerators().</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="259"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1965">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1958">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="out_success"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1959">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1960">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_gnome_shell_call_ungrab_accelerators().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ungrab_accelerators_sync"
              c:identifier="phosh_dbus_gnome_shell_call_ungrab_accelerators_sync"
              throws="1"
              glib:async-func="call_ungrab_accelerators">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1986">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell.UngrabAccelerators"&gt;UngrabAccelerators()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_gnome_shell_call_ungrab_accelerators() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="265"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1998">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1988">A #PhoshDBusGnomeShellProxy.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1989">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_success"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1990">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1991">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_grab_accelerator"
              c:identifier="phosh_dbus_gnome_shell_complete_grab_accelerator">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2081">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell.GrabAccelerator"&gt;GrabAccelerator()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2083">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2084">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2085">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_grab_accelerators"
              c:identifier="phosh_dbus_gnome_shell_complete_grab_accelerators">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2102">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell.GrabAccelerators"&gt;GrabAccelerators()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2104">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2105">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2106">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_hide_monitor_labels"
              c:identifier="phosh_dbus_gnome_shell_complete_hide_monitor_labels">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2045">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell.HideMonitorLabels"&gt;HideMonitorLabels()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2047">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2048">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_show_monitor_labels"
              c:identifier="phosh_dbus_gnome_shell_complete_show_monitor_labels">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2027">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell.ShowMonitorLabels"&gt;ShowMonitorLabels()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2029">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2030">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_show_osd"
              c:identifier="phosh_dbus_gnome_shell_complete_show_osd">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2063">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell.ShowOSD"&gt;ShowOSD()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2065">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2066">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_ungrab_accelerator"
              c:identifier="phosh_dbus_gnome_shell_complete_ungrab_accelerator">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2123">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell.UngrabAccelerator"&gt;UngrabAccelerator()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2125">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2126">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2127">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_ungrab_accelerators"
              c:identifier="phosh_dbus_gnome_shell_complete_ungrab_accelerators">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2144">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell.UngrabAccelerators"&gt;UngrabAccelerators()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2146">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2147">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2148">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_shell_version"
              c:identifier="phosh_dbus_gnome_shell_dup_shell_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1261">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-Shell.ShellVersion"&gt;"ShellVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="279"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1269">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1263">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_accelerator_activated"
              c:identifier="phosh_dbus_gnome_shell_emit_accelerator_activated">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1294">Emits the &lt;link linkend="gdbus-signal-org-gnome-Shell.AcceleratorActivated"&gt;"AcceleratorActivated"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1296">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1297">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1298">Argument to pass with the signal.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_overview_active"
              c:identifier="phosh_dbus_gnome_shell_get_overview_active"
              glib:get-property="overview-active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1208">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Shell.OverviewActive"&gt;"OverviewActive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="275"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1216">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1210">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shell_version"
              c:identifier="phosh_dbus_gnome_shell_get_shell_version"
              glib:get-property="shell-version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1241">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-Shell.ShellVersion"&gt;"ShellVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_dbus_gnome_shell_dup_shell_version() if on another thread.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="278"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1251">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1243">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_overview_active"
              c:identifier="phosh_dbus_gnome_shell_set_overview_active"
              glib:set-property="overview-active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1226">Sets the &lt;link linkend="gdbus-property-org-gnome-Shell.OverviewActive"&gt;"OverviewActive"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="276"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1228">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1229">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shell_version"
              c:identifier="phosh_dbus_gnome_shell_set_shell_version"
              glib:set-property="shell-version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1279">Sets the &lt;link linkend="gdbus-property-org-gnome-Shell.ShellVersion"&gt;"ShellVersion"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="280"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1281">A #PhoshDBusGnomeShell.</doc>
            <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1282">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="overview-active"
                writable="1"
                transfer-ownership="none"
                setter="set_overview_active"
                getter="get_overview_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1188">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Shell.OverviewActive"&gt;"OverviewActive"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="shell-version"
                writable="1"
                transfer-ownership="none"
                setter="set_shell_version"
                getter="get_shell_version"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1197">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-Shell.ShellVersion"&gt;"ShellVersion"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="accelerator-activated" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1166">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-Shell.AcceleratorActivated"&gt;"AcceleratorActivated"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1169">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1170">Argument.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-grab-accelerator" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1071">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell.GrabAccelerator"&gt;GrabAccelerator()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_gnome_shell_complete_grab_accelerator() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1083">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1074">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_accelerator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1075">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_modeFlags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1076">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_grabFlags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1077">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-grab-accelerators" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1096">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell.GrabAccelerators"&gt;GrabAccelerators()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_gnome_shell_complete_grab_accelerators() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1106">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1099">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_accelerators" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1100">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-hide-monitor-labels" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1026">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell.HideMonitorLabels"&gt;HideMonitorLabels()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_gnome_shell_complete_hide_monitor_labels() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1035">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1029">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-show-monitor-labels" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1003">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell.ShowMonitorLabels"&gt;ShowMonitorLabels()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_gnome_shell_complete_show_monitor_labels() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1013">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1006">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1007">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-show-osd" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1048">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell.ShowOSD"&gt;ShowOSD()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_gnome_shell_complete_show_osd() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1058">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1051">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1052">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-ungrab-accelerator" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1119">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell.UngrabAccelerator"&gt;UngrabAccelerator()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_gnome_shell_complete_ungrab_accelerator() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1129">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1122">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1123">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-ungrab-accelerators" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="1142">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell.UngrabAccelerators"&gt;UngrabAccelerators()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_gnome_shell_complete_ungrab_accelerators() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="1152">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1145">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1146">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DBusGnomeShellIface"
            c:type="PhoshDBusGnomeShellIface"
            glib:is-gtype-struct-for="DBusGnomeShell">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gnome-shell-dbus.c"
           line="979">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Shell.top_of_page"&gt;org.gnome.Shell&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h" line="80"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="981">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_grab_accelerator">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="982">Handler for the #PhoshDBusGnomeShell::handle-grab-accelerator signal.</doc>
        <callback name="handle_grab_accelerator">
          <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                           line="35"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_accelerator" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_modeFlags" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_grabFlags" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_grab_accelerators">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="983">Handler for the #PhoshDBusGnomeShell::handle-grab-accelerators signal.</doc>
        <callback name="handle_grab_accelerators">
          <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_accelerators" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_hide_monitor_labels">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="984">Handler for the #PhoshDBusGnomeShell::handle-hide-monitor-labels signal.</doc>
        <callback name="handle_hide_monitor_labels">
          <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_show_monitor_labels">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="985">Handler for the #PhoshDBusGnomeShell::handle-show-monitor-labels signal.</doc>
        <callback name="handle_show_monitor_labels">
          <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_params" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_show_osd">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="986">Handler for the #PhoshDBusGnomeShell::handle-show-osd signal.</doc>
        <callback name="handle_show_osd">
          <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_params" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_ungrab_accelerator">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="987">Handler for the #PhoshDBusGnomeShell::handle-ungrab-accelerator signal.</doc>
        <callback name="handle_ungrab_accelerator">
          <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_action" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_ungrab_accelerators">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="988">Handler for the #PhoshDBusGnomeShell::handle-ungrab-accelerators signal.</doc>
        <callback name="handle_ungrab_accelerators">
          <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_action" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_overview_active">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="989">Getter for the #PhoshDBusGnomeShell:overview-active property.</doc>
        <callback name="get_overview_active">
          <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                           line="71"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1216">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/phosh-gnome-shell-dbus.c"
                   line="1210">A #PhoshDBusGnomeShell.</doc>
              <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_shell_version">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="990">Getter for the #PhoshDBusGnomeShell:shell-version property.</doc>
        <callback name="get_shell_version">
          <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                           line="73"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="1251">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/phosh-gnome-shell-dbus.c"
                   line="1243">A #PhoshDBusGnomeShell.</doc>
              <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="accelerator_activated">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="991">Handler for the #PhoshDBusGnomeShell::accelerator-activated signal.</doc>
        <callback name="accelerator_activated">
          <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusGnomeShell" c:type="PhoshDBusGnomeShell*"/>
            </parameter>
            <parameter name="arg_action" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_parameters" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusGnomeShellProxy"
           c:symbol-prefix="dbus_gnome_shell_proxy"
           c:type="PhoshDBusGnomeShellProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusGnomeShellProxy"
           glib:get-type="phosh_dbus_gnome_shell_proxy_get_type"
           glib:type-struct="DBusGnomeShellProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gnome-shell-dbus.c"
           line="2167">The #PhoshDBusGnomeShellProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="306"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusGnomeShell"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_gnome_shell_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2443">Finishes an operation started with phosh_dbus_gnome_shell_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="322"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="2450">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusGnomeShellProxy" c:type="PhoshDBusGnomeShell*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2445">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_gnome_shell_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_gnome_shell_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2533">Finishes an operation started with phosh_dbus_gnome_shell_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="341"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="2540">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusGnomeShellProxy" c:type="PhoshDBusGnomeShell*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2535">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_gnome_shell_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_gnome_shell_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2558">Like phosh_dbus_gnome_shell_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_gnome_shell_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="344"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="2573">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusGnomeShellProxy" c:type="PhoshDBusGnomeShell*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2560">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2561">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2562">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2563">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2564">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_gnome_shell_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2468">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Shell.top_of_page"&gt;org.gnome.Shell&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_gnome_shell_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="325"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="2483">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusGnomeShellProxy" c:type="PhoshDBusGnomeShell*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2470">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2471">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2472">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2473">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2474">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_gnome_shell_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2413">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Shell.top_of_page"&gt;org.gnome.Shell&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_gnome_shell_proxy_new_finish() to get the result of the operation.

See phosh_dbus_gnome_shell_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="314"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2415">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2416">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2417">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2418">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2419">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2420">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2421">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_gnome_shell_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2503">Like phosh_dbus_gnome_shell_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_gnome_shell_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_gnome_shell_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="333"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2505">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2506">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2507">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2508">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2509">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2510">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gnome-shell-dbus.c"
                 line="2511">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusGnomeShellProxyPrivate"
              c:type="PhoshDBusGnomeShellProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusGnomeShellProxyClass"
            c:type="PhoshDBusGnomeShellProxyClass"
            glib:is-gtype-struct-for="DBusGnomeShellProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gnome-shell-dbus.c"
           line="2173">Class structure for #PhoshDBusGnomeShellProxy.</doc>
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="306"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2175">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusGnomeShellProxyPrivate"
            c:type="PhoshDBusGnomeShellProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="294"/>
    </record>
    <class name="DBusGnomeShellSkeleton"
           c:symbol-prefix="dbus_gnome_shell_skeleton"
           c:type="PhoshDBusGnomeShellSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusGnomeShellSkeleton"
           glib:get-type="phosh_dbus_gnome_shell_skeleton_get_type"
           glib:type-struct="DBusGnomeShellSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gnome-shell-dbus.c"
           line="2595">The #PhoshDBusGnomeShellSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="376"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusGnomeShell"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_gnome_shell_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="3088">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Shell.top_of_page"&gt;org.gnome.Shell&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                         line="384"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="3093">The skeleton object.</doc>
          <type name="DBusGnomeShellSkeleton" c:type="PhoshDBusGnomeShell*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusGnomeShellSkeletonPrivate"
              c:type="PhoshDBusGnomeShellSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusGnomeShellSkeletonClass"
            c:type="PhoshDBusGnomeShellSkeletonClass"
            glib:is-gtype-struct-for="DBusGnomeShellSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gnome-shell-dbus.c"
           line="2601">Class structure for #PhoshDBusGnomeShellSkeleton.</doc>
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="376"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="2603">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusGnomeShellSkeletonPrivate"
            c:type="PhoshDBusGnomeShellSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h"
                       line="364"/>
    </record>
    <interface name="DBusHostname1"
               c:symbol-prefix="dbus_hostname1"
               c:type="PhoshDBusHostname1"
               glib:type-name="PhoshDBusHostname1"
               glib:get-type="phosh_dbus_hostname1_get_type"
               glib:type-struct="DBusHostname1Iface">
      <doc xml:space="preserve"
           filename="src/dbus/hostname1-dbus.c"
           line="281">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-hostname1.top_of_page"&gt;org.freedesktop.hostname1&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/hostname1-dbus.h" line="35"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_hostname1_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="249">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-hostname1.top_of_page"&gt;org.freedesktop.hostname1&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="254">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_hostname1_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="262">Overrides all #GObject properties in the #PhoshDBusHostname1 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="270">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="264">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="265">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_chassis"
                      invoker="get_chassis"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="313">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-hostname1.Chassis"&gt;"Chassis"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_dbus_hostname1_dup_chassis() if on another thread.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="33"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="323">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="315">A #PhoshDBusHostname1.</doc>
            <type name="DBusHostname1" c:type="PhoshDBusHostname1*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_chassis"
              c:identifier="phosh_dbus_hostname1_dup_chassis"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="333">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-hostname1.Chassis"&gt;"Chassis"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="49"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="341">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="335">A #PhoshDBusHostname1.</doc>
            <type name="DBusHostname1" c:type="PhoshDBusHostname1*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chassis"
              c:identifier="phosh_dbus_hostname1_get_chassis"
              glib:get-property="chassis"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="313">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-hostname1.Chassis"&gt;"Chassis"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_dbus_hostname1_dup_chassis() if on another thread.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="323">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="315">A #PhoshDBusHostname1.</doc>
            <type name="DBusHostname1" c:type="PhoshDBusHostname1*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_chassis"
              c:identifier="phosh_dbus_hostname1_set_chassis"
              glib:set-property="chassis"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="351">Sets the &lt;link linkend="gdbus-property-org-freedesktop-hostname1.Chassis"&gt;"Chassis"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="353">A #PhoshDBusHostname1.</doc>
            <type name="DBusHostname1" c:type="PhoshDBusHostname1*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="354">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="chassis"
                writable="1"
                transfer-ownership="none"
                setter="set_chassis"
                getter="get_chassis"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="302">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-hostname1.Chassis"&gt;"Chassis"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="DBusHostname1Iface"
            c:type="PhoshDBusHostname1Iface"
            glib:is-gtype-struct-for="DBusHostname1">
      <doc xml:space="preserve"
           filename="src/dbus/hostname1-dbus.c"
           line="287">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-hostname1.top_of_page"&gt;org.freedesktop.hostname1&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/hostname1-dbus.h" line="35"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="289">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_chassis">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="290">Getter for the #PhoshDBusHostname1:chassis property.</doc>
        <callback name="get_chassis">
          <source-position filename="src/dbus/hostname1-dbus.h" line="33"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="323">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/hostname1-dbus.c"
                   line="315">A #PhoshDBusHostname1.</doc>
              <type name="DBusHostname1" c:type="PhoshDBusHostname1*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusHostname1Proxy"
           c:symbol-prefix="dbus_hostname1_proxy"
           c:type="PhoshDBusHostname1Proxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusHostname1Proxy"
           glib:get-type="phosh_dbus_hostname1_proxy_get_type"
           glib:type-struct="DBusHostname1ProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/hostname1-dbus.c"
           line="368">The #PhoshDBusHostname1Proxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/hostname1-dbus.h" line="76"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusHostname1"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_hostname1_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="628">Finishes an operation started with phosh_dbus_hostname1_proxy_new().</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="635">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusHostname1Proxy" c:type="PhoshDBusHostname1*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="630">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_hostname1_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_hostname1_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="718">Finishes an operation started with phosh_dbus_hostname1_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="111"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="725">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusHostname1Proxy" c:type="PhoshDBusHostname1*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="720">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_hostname1_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_hostname1_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="743">Like phosh_dbus_hostname1_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_hostname1_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="758">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusHostname1Proxy" c:type="PhoshDBusHostname1*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="745">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="746">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="747">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="748">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="749">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_hostname1_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="653">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-hostname1.top_of_page"&gt;org.freedesktop.hostname1&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_hostname1_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="95"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="668">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusHostname1Proxy" c:type="PhoshDBusHostname1*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="655">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="656">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="657">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="658">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="659">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_hostname1_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="598">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-hostname1.top_of_page"&gt;org.freedesktop.hostname1&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_hostname1_proxy_new_finish() to get the result of the operation.

See phosh_dbus_hostname1_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="600">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="601">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="602">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="603">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="604">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="605">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="606">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_hostname1_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="688">Like phosh_dbus_hostname1_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_hostname1_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_hostname1_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="690">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="691">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="692">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="693">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="694">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="695">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/hostname1-dbus.c"
                 line="696">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusHostname1ProxyPrivate"
              c:type="PhoshDBusHostname1ProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusHostname1ProxyClass"
            c:type="PhoshDBusHostname1ProxyClass"
            glib:is-gtype-struct-for="DBusHostname1Proxy">
      <doc xml:space="preserve"
           filename="src/dbus/hostname1-dbus.c"
           line="374">Class structure for #PhoshDBusHostname1Proxy.</doc>
      <source-position filename="src/dbus/hostname1-dbus.h" line="76"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="376">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusHostname1ProxyPrivate"
            c:type="PhoshDBusHostname1ProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/hostname1-dbus.h" line="64"/>
    </record>
    <class name="DBusHostname1Skeleton"
           c:symbol-prefix="dbus_hostname1_skeleton"
           c:type="PhoshDBusHostname1Skeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusHostname1Skeleton"
           glib:get-type="phosh_dbus_hostname1_skeleton_get_type"
           glib:type-struct="DBusHostname1SkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/hostname1-dbus.c"
           line="780">The #PhoshDBusHostname1Skeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/hostname1-dbus.h" line="146"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusHostname1"/>
      <constructor name="new" c:identifier="phosh_dbus_hostname1_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="1233">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-hostname1.top_of_page"&gt;org.freedesktop.hostname1&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/hostname1-dbus.h" line="154"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="1238">The skeleton object.</doc>
          <type name="DBusHostname1Skeleton" c:type="PhoshDBusHostname1*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusHostname1SkeletonPrivate"
              c:type="PhoshDBusHostname1SkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusHostname1SkeletonClass"
            c:type="PhoshDBusHostname1SkeletonClass"
            glib:is-gtype-struct-for="DBusHostname1Skeleton">
      <doc xml:space="preserve"
           filename="src/dbus/hostname1-dbus.c"
           line="786">Class structure for #PhoshDBusHostname1Skeleton.</doc>
      <source-position filename="src/dbus/hostname1-dbus.h" line="146"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="788">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusHostname1SkeletonPrivate"
            c:type="PhoshDBusHostname1SkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/hostname1-dbus.h" line="134"/>
    </record>
    <interface name="DBusImplPortalAccess"
               c:symbol-prefix="dbus_impl_portal_access"
               c:type="PhoshDBusImplPortalAccess"
               glib:type-name="PhoshDBusImplPortalAccess"
               glib:get-type="phosh_dbus_impl_portal_access_get_type"
               glib:type-struct="DBusImplPortalAccessIface">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="1386">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Access.top_of_page"&gt;org.freedesktop.impl.portal.Access&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="206"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_impl_portal_access_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1342">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Access.top_of_page"&gt;org.freedesktop.impl.portal.Access&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1347">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_impl_portal_access_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1355">Overrides all #GObject properties in the #PhoshDBusImplPortalAccess interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1363">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1357">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1358">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_access_dialog">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1395">Handler for the #PhoshDBusImplPortalAccess::handle-access-dialog signal.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="195"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusImplPortalAccess"
                  c:type="PhoshDBusImplPortalAccess*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_handle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_parent_window" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_body" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_access_dialog"
              c:identifier="phosh_dbus_impl_portal_access_call_access_dialog"
              glib:finish-func="call_access_dialog_finish"
              glib:sync-func="call_access_dialog_sync">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1438">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-impl-portal-Access.AccessDialog"&gt;AccessDialog()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_impl_portal_access_call_access_dialog_finish() to get the result of the operation.

See phosh_dbus_impl_portal_access_call_access_dialog_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="228"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1440">A #PhoshDBusImplPortalAccessProxy.</doc>
            <type name="DBusImplPortalAccess"
                  c:type="PhoshDBusImplPortalAccess*"/>
          </instance-parameter>
          <parameter name="arg_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1441">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1442">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_parent_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1443">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1444">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1445">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1446">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1447">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1448">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="9">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1449">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1450">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_access_dialog_finish"
              c:identifier="phosh_dbus_impl_portal_access_call_access_dialog_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1489">Finishes an operation started with phosh_dbus_impl_portal_access_call_access_dialog().</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="241"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1499">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1491">A #PhoshDBusImplPortalAccessProxy.</doc>
            <type name="DBusImplPortalAccess"
                  c:type="PhoshDBusImplPortalAccess*"/>
          </instance-parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1492">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_results"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1493">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1494">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_impl_portal_access_call_access_dialog().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_access_dialog_sync"
              c:identifier="phosh_dbus_impl_portal_access_call_access_dialog_sync"
              throws="1"
              glib:async-func="call_access_dialog">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1522">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-impl-portal-Access.AccessDialog"&gt;AccessDialog()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_impl_portal_access_call_access_dialog() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="248"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1541">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1524">A #PhoshDBusImplPortalAccessProxy.</doc>
            <type name="DBusImplPortalAccess"
                  c:type="PhoshDBusImplPortalAccess*"/>
          </instance-parameter>
          <parameter name="arg_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1525">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1526">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_parent_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1527">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1528">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1529">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1530">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1531">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1532">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_results"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1533">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1534">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_access_dialog"
              c:identifier="phosh_dbus_impl_portal_access_complete_access_dialog">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1584">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-impl-portal-Access.AccessDialog"&gt;AccessDialog()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="219"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1586">A #PhoshDBusImplPortalAccess.</doc>
            <type name="DBusImplPortalAccess"
                  c:type="PhoshDBusImplPortalAccess*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1587">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1588">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1589">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-access-dialog" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1407">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-impl-portal-Access.AccessDialog"&gt;AccessDialog()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_impl_portal_access_complete_access_dialog() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1423">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1410">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1411">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1412">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_parent_window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1413">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1414">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1415">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1416">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1417">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DBusImplPortalAccessIface"
            c:type="PhoshDBusImplPortalAccessIface"
            glib:is-gtype-struct-for="DBusImplPortalAccess">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="1392">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Access.top_of_page"&gt;org.freedesktop.impl.portal.Access&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="206"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1394">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_access_dialog">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1395">Handler for the #PhoshDBusImplPortalAccess::handle-access-dialog signal.</doc>
        <callback name="handle_access_dialog">
          <source-position filename="src/dbus/portal-dbus.h" line="195"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusImplPortalAccess"
                    c:type="PhoshDBusImplPortalAccess*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_handle" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_app_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_parent_window" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_subtitle" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_body" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusImplPortalAccessProxy"
           c:symbol-prefix="dbus_impl_portal_access_proxy"
           c:type="PhoshDBusImplPortalAccessProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusImplPortalAccessProxy"
           glib:get-type="phosh_dbus_impl_portal_access_proxy_get_type"
           glib:type-struct="DBusImplPortalAccessProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="1610">The #PhoshDBusImplPortalAccessProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="287"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusImplPortalAccess"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_impl_portal_access_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1801">Finishes an operation started with phosh_dbus_impl_portal_access_proxy_new().</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="303"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1808">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusImplPortalAccessProxy"
                c:type="PhoshDBusImplPortalAccess*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1803">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_impl_portal_access_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_impl_portal_access_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1891">Finishes an operation started with phosh_dbus_impl_portal_access_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="322"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1898">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusImplPortalAccessProxy"
                c:type="PhoshDBusImplPortalAccess*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1893">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_impl_portal_access_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_impl_portal_access_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1916">Like phosh_dbus_impl_portal_access_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_impl_portal_access_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="325"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1931">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusImplPortalAccessProxy"
                c:type="PhoshDBusImplPortalAccess*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1918">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1919">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1920">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1921">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1922">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_impl_portal_access_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1826">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Access.top_of_page"&gt;org.freedesktop.impl.portal.Access&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_impl_portal_access_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="306"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1841">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusImplPortalAccessProxy"
                c:type="PhoshDBusImplPortalAccess*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1828">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1829">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1830">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1831">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1832">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_impl_portal_access_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1771">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Access.top_of_page"&gt;org.freedesktop.impl.portal.Access&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_impl_portal_access_proxy_new_finish() to get the result of the operation.

See phosh_dbus_impl_portal_access_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1773">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1774">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1775">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1776">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1777">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1778">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1779">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_impl_portal_access_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1861">Like phosh_dbus_impl_portal_access_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_impl_portal_access_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_impl_portal_access_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="314"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1863">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1864">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1865">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1866">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1867">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1868">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="1869">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusImplPortalAccessProxyPrivate"
              c:type="PhoshDBusImplPortalAccessProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusImplPortalAccessProxyClass"
            c:type="PhoshDBusImplPortalAccessProxyClass"
            glib:is-gtype-struct-for="DBusImplPortalAccessProxy">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="1616">Class structure for #PhoshDBusImplPortalAccessProxy.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="287"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1618">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusImplPortalAccessProxyPrivate"
            c:type="PhoshDBusImplPortalAccessProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/portal-dbus.h" line="275"/>
    </record>
    <class name="DBusImplPortalAccessSkeleton"
           c:symbol-prefix="dbus_impl_portal_access_skeleton"
           c:type="PhoshDBusImplPortalAccessSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusImplPortalAccessSkeleton"
           glib:get-type="phosh_dbus_impl_portal_access_skeleton_get_type"
           glib:type-struct="DBusImplPortalAccessSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="1953">The #PhoshDBusImplPortalAccessSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="357"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusImplPortalAccess"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_impl_portal_access_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="2224">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Access.top_of_page"&gt;org.freedesktop.impl.portal.Access&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="365"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="2229">The skeleton object.</doc>
          <type name="DBusImplPortalAccessSkeleton"
                c:type="PhoshDBusImplPortalAccess*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusImplPortalAccessSkeletonPrivate"
              c:type="PhoshDBusImplPortalAccessSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusImplPortalAccessSkeletonClass"
            c:type="PhoshDBusImplPortalAccessSkeletonClass"
            glib:is-gtype-struct-for="DBusImplPortalAccessSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="1959">Class structure for #PhoshDBusImplPortalAccessSkeleton.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="357"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1961">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusImplPortalAccessSkeletonPrivate"
            c:type="PhoshDBusImplPortalAccessSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/portal-dbus.h" line="345"/>
    </record>
    <interface name="DBusImplPortalRequest"
               c:symbol-prefix="dbus_impl_portal_request"
               c:type="PhoshDBusImplPortalRequest"
               glib:type-name="PhoshDBusImplPortalRequest"
               glib:get-type="phosh_dbus_impl_portal_request_get_type"
               glib:type-struct="DBusImplPortalRequestIface">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="392">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Request.top_of_page"&gt;org.freedesktop.impl.portal.Request&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="37"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_impl_portal_request_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="348">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Request.top_of_page"&gt;org.freedesktop.impl.portal.Request&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="353">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_impl_portal_request_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="361">Overrides all #GObject properties in the #PhoshDBusImplPortalRequest interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="369">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="363">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="364">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_close">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="401">Handler for the #PhoshDBusImplPortalRequest::handle-close signal.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusImplPortalRequest"
                  c:type="PhoshDBusImplPortalRequest*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_close"
              c:identifier="phosh_dbus_impl_portal_request_call_close"
              glib:finish-func="call_close_finish"
              glib:sync-func="call_close_sync">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="437">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-impl-portal-Request.Close"&gt;Close()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_impl_portal_request_call_close_finish() to get the result of the operation.

See phosh_dbus_impl_portal_request_call_close_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="439">A #PhoshDBusImplPortalRequestProxy.</doc>
            <type name="DBusImplPortalRequest"
                  c:type="PhoshDBusImplPortalRequest*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="440">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="441">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="442">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_close_finish"
              c:identifier="phosh_dbus_impl_portal_request_call_close_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="467">Finishes an operation started with phosh_dbus_impl_portal_request_call_close().</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="63"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="475">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="469">A #PhoshDBusImplPortalRequestProxy.</doc>
            <type name="DBusImplPortalRequest"
                  c:type="PhoshDBusImplPortalRequest*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="470">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_impl_portal_request_call_close().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_close_sync"
              c:identifier="phosh_dbus_impl_portal_request_call_close_sync"
              throws="1"
              glib:async-func="call_close">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="494">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-impl-portal-Request.Close"&gt;Close()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_impl_portal_request_call_close() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="68"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="504">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="496">A #PhoshDBusImplPortalRequestProxy.</doc>
            <type name="DBusImplPortalRequest"
                  c:type="PhoshDBusImplPortalRequest*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="497">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_close"
              c:identifier="phosh_dbus_impl_portal_request_complete_close">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="529">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-impl-portal-Request.Close"&gt;Close()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="531">A #PhoshDBusImplPortalRequest.</doc>
            <type name="DBusImplPortalRequest"
                  c:type="PhoshDBusImplPortalRequest*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="532">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-close" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="413">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-impl-portal-Request.Close"&gt;Close()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_impl_portal_request_complete_close() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="422">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="416">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DBusImplPortalRequestIface"
            c:type="PhoshDBusImplPortalRequestIface"
            glib:is-gtype-struct-for="DBusImplPortalRequest">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="398">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Request.top_of_page"&gt;org.freedesktop.impl.portal.Request&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="37"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="400">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_close">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="401">Handler for the #PhoshDBusImplPortalRequest::handle-close signal.</doc>
        <callback name="handle_close">
          <source-position filename="src/dbus/portal-dbus.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusImplPortalRequest"
                    c:type="PhoshDBusImplPortalRequest*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusImplPortalRequestProxy"
           c:symbol-prefix="dbus_impl_portal_request_proxy"
           c:type="PhoshDBusImplPortalRequestProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusImplPortalRequestProxy"
           glib:get-type="phosh_dbus_impl_portal_request_proxy_get_type"
           glib:type-struct="DBusImplPortalRequestProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="549">The #PhoshDBusImplPortalRequestProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="98"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusImplPortalRequest"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_impl_portal_request_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="740">Finishes an operation started with phosh_dbus_impl_portal_request_proxy_new().</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="747">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusImplPortalRequestProxy"
                c:type="PhoshDBusImplPortalRequest*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="742">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_impl_portal_request_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_impl_portal_request_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="830">Finishes an operation started with phosh_dbus_impl_portal_request_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="133"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="837">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusImplPortalRequestProxy"
                c:type="PhoshDBusImplPortalRequest*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="832">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_impl_portal_request_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_impl_portal_request_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="855">Like phosh_dbus_impl_portal_request_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_impl_portal_request_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="136"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="870">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusImplPortalRequestProxy"
                c:type="PhoshDBusImplPortalRequest*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="857">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="858">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="859">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="860">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="861">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_impl_portal_request_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="765">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Request.top_of_page"&gt;org.freedesktop.impl.portal.Request&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_impl_portal_request_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="117"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="780">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusImplPortalRequestProxy"
                c:type="PhoshDBusImplPortalRequest*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="767">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="768">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="769">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="770">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="771">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_impl_portal_request_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="710">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Request.top_of_page"&gt;org.freedesktop.impl.portal.Request&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_impl_portal_request_proxy_new_finish() to get the result of the operation.

See phosh_dbus_impl_portal_request_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="712">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="713">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="714">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="715">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="716">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="717">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="718">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_impl_portal_request_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="800">Like phosh_dbus_impl_portal_request_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_impl_portal_request_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_impl_portal_request_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="802">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="803">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="804">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="805">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="806">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="807">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/portal-dbus.c"
                 line="808">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusImplPortalRequestProxyPrivate"
              c:type="PhoshDBusImplPortalRequestProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusImplPortalRequestProxyClass"
            c:type="PhoshDBusImplPortalRequestProxyClass"
            glib:is-gtype-struct-for="DBusImplPortalRequestProxy">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="555">Class structure for #PhoshDBusImplPortalRequestProxy.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="98"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="557">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusImplPortalRequestProxyPrivate"
            c:type="PhoshDBusImplPortalRequestProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/portal-dbus.h" line="86"/>
    </record>
    <class name="DBusImplPortalRequestSkeleton"
           c:symbol-prefix="dbus_impl_portal_request_skeleton"
           c:type="PhoshDBusImplPortalRequestSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusImplPortalRequestSkeleton"
           glib:get-type="phosh_dbus_impl_portal_request_skeleton_get_type"
           glib:type-struct="DBusImplPortalRequestSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="892">The #PhoshDBusImplPortalRequestSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="168"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusImplPortalRequest"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_impl_portal_request_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1163">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Request.top_of_page"&gt;org.freedesktop.impl.portal.Request&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/portal-dbus.h" line="176"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1168">The skeleton object.</doc>
          <type name="DBusImplPortalRequestSkeleton"
                c:type="PhoshDBusImplPortalRequest*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusImplPortalRequestSkeletonPrivate"
              c:type="PhoshDBusImplPortalRequestSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusImplPortalRequestSkeletonClass"
            c:type="PhoshDBusImplPortalRequestSkeletonClass"
            glib:is-gtype-struct-for="DBusImplPortalRequestSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="898">Class structure for #PhoshDBusImplPortalRequestSkeleton.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="168"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="900">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusImplPortalRequestSkeletonPrivate"
            c:type="PhoshDBusImplPortalRequestSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/portal-dbus.h" line="156"/>
    </record>
    <interface name="DBusLoginManager"
               c:symbol-prefix="dbus_login_manager"
               c:type="PhoshDBusLoginManager"
               glib:type-name="PhoshDBusLoginManager"
               glib:get-type="phosh_dbus_login_manager_get_type"
               glib:type-struct="DBusLoginManagerIface">
      <doc xml:space="preserve"
           filename="src/dbus/login1-manager-dbus.c"
           line="664">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-login1-Manager.top_of_page"&gt;org.freedesktop.login1.Manager&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/login1-manager-dbus.h" line="57"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_login_manager_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="581">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-login1-Manager.top_of_page"&gt;org.freedesktop.login1.Manager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="586">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_login_manager_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="594">Overrides all #GObject properties in the #PhoshDBusLoginManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="602">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="596">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="597">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_get_session">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="673">Handler for the #PhoshDBusLoginManager::handle-get-session signal.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_inhibit">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="674">Handler for the #PhoshDBusLoginManager::handle-inhibit signal.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_what" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_who" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_why" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_suspend">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="675">Handler for the #PhoshDBusLoginManager::handle-suspend signal.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_for_sleep">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="676">Handler for the #PhoshDBusLoginManager::prepare-for-sleep signal.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="arg_suspending" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_get_session"
              c:identifier="phosh_dbus_login_manager_call_get_session"
              glib:finish-func="call_get_session_finish"
              glib:sync-func="call_get_session_sync">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="799">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.GetSession"&gt;GetSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_login_manager_call_get_session_finish() to get the result of the operation.

See phosh_dbus_login_manager_call_get_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="801">A #PhoshDBusLoginManagerProxy.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="802">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="803">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="804">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="805">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_session_finish"
              c:identifier="phosh_dbus_login_manager_call_get_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="832">Finishes an operation started with phosh_dbus_login_manager_call_get_session().</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="102"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="841">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="834">A #PhoshDBusLoginManagerProxy.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="out_object_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="835">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="836">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_login_manager_call_get_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_session_sync"
              c:identifier="phosh_dbus_login_manager_call_get_session_sync"
              throws="1"
              glib:async-func="call_get_session">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="862">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.GetSession"&gt;GetSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_login_manager_call_get_session() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="108"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="874">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="864">A #PhoshDBusLoginManagerProxy.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="865">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_object_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="866">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="867">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_inhibit"
              c:identifier="phosh_dbus_login_manager_call_inhibit"
              glib:finish-func="call_inhibit_finish"
              glib:sync-func="call_inhibit_sync">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="903">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.Inhibit"&gt;Inhibit()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_login_manager_call_inhibit_finish() to get the result of the operation.

See phosh_dbus_login_manager_call_inhibit_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="905">A #PhoshDBusLoginManagerProxy.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="arg_what" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="906">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_who" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="907">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_why" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="908">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="909">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="910">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="911">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="912">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="913">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_inhibit_finish"
              c:identifier="phosh_dbus_login_manager_call_inhibit_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="948">Finishes an operation started with phosh_dbus_login_manager_call_inhibit().</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="126"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="958">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="950">A #PhoshDBusLoginManagerProxy.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="out_pipe_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="951">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="952">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="953">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_login_manager_call_inhibit().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_inhibit_sync"
              c:identifier="phosh_dbus_login_manager_call_inhibit_sync"
              throws="1"
              glib:async-func="call_inhibit">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="980">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.Inhibit"&gt;Inhibit()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_login_manager_call_inhibit() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="133"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="997">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="982">A #PhoshDBusLoginManagerProxy.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="arg_what" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="983">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_who" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="984">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_why" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="985">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="986">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="987">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_pipe_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="988">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="989">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="990">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_suspend"
              c:identifier="phosh_dbus_login_manager_call_suspend"
              glib:finish-func="call_suspend_finish"
              glib:sync-func="call_suspend_sync">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1036">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.Suspend"&gt;Suspend()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_login_manager_call_suspend_finish() to get the result of the operation.

See phosh_dbus_login_manager_call_suspend_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1038">A #PhoshDBusLoginManagerProxy.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1039">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1040">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1041">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1042">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_suspend_finish"
              c:identifier="phosh_dbus_login_manager_call_suspend_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1069">Finishes an operation started with phosh_dbus_login_manager_call_suspend().</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="152"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="1077">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1071">A #PhoshDBusLoginManagerProxy.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1072">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_login_manager_call_suspend().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_suspend_sync"
              c:identifier="phosh_dbus_login_manager_call_suspend_sync"
              throws="1"
              glib:async-func="call_suspend">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1096">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.Suspend"&gt;Suspend()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_login_manager_call_suspend() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="157"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="1107">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1098">A #PhoshDBusLoginManagerProxy.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1099">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1100">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_session"
              c:identifier="phosh_dbus_login_manager_complete_get_session">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1134">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.GetSession"&gt;GetSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1136">A #PhoshDBusLoginManager.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1137">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1138">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_inhibit"
              c:identifier="phosh_dbus_login_manager_complete_inhibit">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1155">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.Inhibit"&gt;Inhibit()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1157">A #PhoshDBusLoginManager.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1158">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1159">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="pipe_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1160">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_suspend"
              c:identifier="phosh_dbus_login_manager_complete_suspend">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1179">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.Suspend"&gt;Suspend()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1181">A #PhoshDBusLoginManager.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1182">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_prepare_for_sleep"
              c:identifier="phosh_dbus_login_manager_emit_prepare_for_sleep">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="784">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-login1-Manager.PrepareForSleep"&gt;"PrepareForSleep"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="786">A #PhoshDBusLoginManager.</doc>
            <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
          </instance-parameter>
          <parameter name="arg_suspending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="787">Argument to pass with the signal.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-get-session" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="688">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.GetSession"&gt;GetSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_login_manager_complete_get_session() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="698">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="691">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="692">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-inhibit" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="711">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.Inhibit"&gt;Inhibit()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_login_manager_complete_inhibit() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="725">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="714">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="715">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_what" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="716">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_who" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="717">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_why" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="718">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="719">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-suspend" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="738">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-login1-Manager.Suspend"&gt;Suspend()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_login_manager_complete_suspend() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="748">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="741">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="742">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="prepare-for-sleep" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="762">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-login1-Manager.PrepareForSleep"&gt;"PrepareForSleep"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_suspending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="765">Argument.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DBusLoginManagerIface"
            c:type="PhoshDBusLoginManagerIface"
            glib:is-gtype-struct-for="DBusLoginManager">
      <doc xml:space="preserve"
           filename="src/dbus/login1-manager-dbus.c"
           line="670">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-login1-Manager.top_of_page"&gt;org.freedesktop.login1.Manager&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/login1-manager-dbus.h" line="57"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="672">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_session">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="673">Handler for the #PhoshDBusLoginManager::handle-get-session signal.</doc>
        <callback name="handle_get_session">
          <source-position filename="src/dbus/login1-manager-dbus.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_session_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_inhibit">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="674">Handler for the #PhoshDBusLoginManager::handle-inhibit signal.</doc>
        <callback name="handle_inhibit">
          <source-position filename="src/dbus/login1-manager-dbus.h"
                           line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_what" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_who" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_why" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_mode" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_suspend">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="675">Handler for the #PhoshDBusLoginManager::handle-suspend signal.</doc>
        <callback name="handle_suspend">
          <source-position filename="src/dbus/login1-manager-dbus.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_unnamed_arg0" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_for_sleep">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="676">Handler for the #PhoshDBusLoginManager::prepare-for-sleep signal.</doc>
        <callback name="prepare_for_sleep">
          <source-position filename="src/dbus/login1-manager-dbus.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusLoginManager" c:type="PhoshDBusLoginManager*"/>
            </parameter>
            <parameter name="arg_suspending" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusLoginManagerProxy"
           c:symbol-prefix="dbus_login_manager_proxy"
           c:type="PhoshDBusLoginManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusLoginManagerProxy"
           glib:get-type="phosh_dbus_login_manager_proxy_get_type"
           glib:type-struct="DBusLoginManagerProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/login1-manager-dbus.c"
           line="1199">The #PhoshDBusLoginManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/login1-manager-dbus.h" line="188"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusLoginManager"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_login_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1390">Finishes an operation started with phosh_dbus_login_manager_proxy_new().</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="204"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="1397">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusLoginManagerProxy" c:type="PhoshDBusLoginManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1392">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_login_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_login_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1480">Finishes an operation started with phosh_dbus_login_manager_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="223"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="1487">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusLoginManagerProxy" c:type="PhoshDBusLoginManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1482">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_login_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_login_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1505">Like phosh_dbus_login_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_login_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="226"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="1520">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusLoginManagerProxy" c:type="PhoshDBusLoginManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1507">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1508">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1509">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1510">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1511">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_login_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1415">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-login1-Manager.top_of_page"&gt;org.freedesktop.login1.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_login_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="207"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="1430">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusLoginManagerProxy" c:type="PhoshDBusLoginManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1417">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1418">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1419">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1420">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1421">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_login_manager_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1360">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-login1-Manager.top_of_page"&gt;org.freedesktop.login1.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_login_manager_proxy_new_finish() to get the result of the operation.

See phosh_dbus_login_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="196"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1362">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1363">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1364">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1365">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1366">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1367">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1368">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_login_manager_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1450">Like phosh_dbus_login_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_login_manager_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_login_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="215"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1452">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1453">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1454">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1455">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1456">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1457">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-manager-dbus.c"
                 line="1458">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusLoginManagerProxyPrivate"
              c:type="PhoshDBusLoginManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusLoginManagerProxyClass"
            c:type="PhoshDBusLoginManagerProxyClass"
            glib:is-gtype-struct-for="DBusLoginManagerProxy">
      <doc xml:space="preserve"
           filename="src/dbus/login1-manager-dbus.c"
           line="1205">Class structure for #PhoshDBusLoginManagerProxy.</doc>
      <source-position filename="src/dbus/login1-manager-dbus.h" line="188"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1207">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusLoginManagerProxyPrivate"
            c:type="PhoshDBusLoginManagerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="176"/>
    </record>
    <class name="DBusLoginManagerSkeleton"
           c:symbol-prefix="dbus_login_manager_skeleton"
           c:type="PhoshDBusLoginManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusLoginManagerSkeleton"
           glib:get-type="phosh_dbus_login_manager_skeleton_get_type"
           glib:type-struct="DBusLoginManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/login1-manager-dbus.c"
           line="1542">The #PhoshDBusLoginManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/login1-manager-dbus.h" line="258"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusLoginManager"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_login_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1838">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-login1-Manager.top_of_page"&gt;org.freedesktop.login1.Manager&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/login1-manager-dbus.h" line="266"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="1843">The skeleton object.</doc>
          <type name="DBusLoginManagerSkeleton"
                c:type="PhoshDBusLoginManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusLoginManagerSkeletonPrivate"
              c:type="PhoshDBusLoginManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusLoginManagerSkeletonClass"
            c:type="PhoshDBusLoginManagerSkeletonClass"
            glib:is-gtype-struct-for="DBusLoginManagerSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/login1-manager-dbus.c"
           line="1548">Class structure for #PhoshDBusLoginManagerSkeleton.</doc>
      <source-position filename="src/dbus/login1-manager-dbus.h" line="258"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="1550">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusLoginManagerSkeletonPrivate"
            c:type="PhoshDBusLoginManagerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/login1-manager-dbus.h" line="246"/>
    </record>
    <interface name="DBusLoginSession"
               c:symbol-prefix="dbus_login_session"
               c:type="PhoshDBusLoginSession"
               glib:type-name="PhoshDBusLoginSession"
               glib:get-type="phosh_dbus_login_session_get_type"
               glib:type-struct="DBusLoginSessionIface">
      <doc xml:space="preserve"
           filename="src/dbus/login1-session-dbus.c"
           line="571">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-login1-Session.top_of_page"&gt;org.freedesktop.login1.Session&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/login1-session-dbus.h" line="57"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_login_session_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="486">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-login1-Session.top_of_page"&gt;org.freedesktop.login1.Session&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="491">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_login_session_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="499">Overrides all #GObject properties in the #PhoshDBusLoginSession interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="507">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="501">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="502">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active"
                      invoker="get_active"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="705">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-login1-Session.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="713">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="707">A #PhoshDBusLoginSession.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_locked_hint"
                      invoker="get_locked_hint"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="738">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-login1-Session.LockedHint"&gt;"LockedHint"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="746">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="740">A #PhoshDBusLoginSession.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_brightness">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="580">Handler for the #PhoshDBusLoginSession::handle-set-brightness signal.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_subsystem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_brightness" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_locked_hint">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="581">Handler for the #PhoshDBusLoginSession::handle-set-locked-hint signal.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lock">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="584">Handler for the #PhoshDBusLoginSession::lock signal.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unlock">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="585">Handler for the #PhoshDBusLoginSession::unlock signal.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="call_set_brightness"
              c:identifier="phosh_dbus_login_session_call_set_brightness"
              glib:finish-func="call_set_brightness_finish"
              glib:sync-func="call_set_brightness_sync">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="895">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-login1-Session.SetBrightness"&gt;SetBrightness()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_login_session_call_set_brightness_finish() to get the result of the operation.

See phosh_dbus_login_session_call_set_brightness_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="897">A #PhoshDBusLoginSessionProxy.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="arg_subsystem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="898">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="899">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_brightness" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="900">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="901">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="902">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="903">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_brightness_finish"
              c:identifier="phosh_dbus_login_session_call_set_brightness_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="934">Finishes an operation started with phosh_dbus_login_session_call_set_brightness().</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="117"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="942">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="936">A #PhoshDBusLoginSessionProxy.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="937">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_login_session_call_set_brightness().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_brightness_sync"
              c:identifier="phosh_dbus_login_session_call_set_brightness_sync"
              throws="1"
              glib:async-func="call_set_brightness">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="961">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-login1-Session.SetBrightness"&gt;SetBrightness()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_login_session_call_set_brightness() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="122"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="974">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="963">A #PhoshDBusLoginSessionProxy.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="arg_subsystem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="964">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="965">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_brightness" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="966">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="967">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_locked_hint"
              c:identifier="phosh_dbus_login_session_call_set_locked_hint"
              glib:finish-func="call_set_locked_hint_finish"
              glib:sync-func="call_set_locked_hint_sync">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="797">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-login1-Session.SetLockedHint"&gt;SetLockedHint()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_login_session_call_set_locked_hint_finish() to get the result of the operation.

See phosh_dbus_login_session_call_set_locked_hint_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="799">A #PhoshDBusLoginSessionProxy.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="800">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="801">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="802">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="803">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_locked_hint_finish"
              c:identifier="phosh_dbus_login_session_call_set_locked_hint_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="830">Finishes an operation started with phosh_dbus_login_session_call_set_locked_hint().</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="97"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="838">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="832">A #PhoshDBusLoginSessionProxy.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="833">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_login_session_call_set_locked_hint().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_locked_hint_sync"
              c:identifier="phosh_dbus_login_session_call_set_locked_hint_sync"
              throws="1"
              glib:async-func="call_set_locked_hint">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="857">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-login1-Session.SetLockedHint"&gt;SetLockedHint()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_login_session_call_set_locked_hint() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="102"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="868">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="859">A #PhoshDBusLoginSessionProxy.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="860">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="861">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_brightness"
              c:identifier="phosh_dbus_login_session_complete_set_brightness">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1023">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-login1-Session.SetBrightness"&gt;SetBrightness()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1025">A #PhoshDBusLoginSession.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1026">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_locked_hint"
              c:identifier="phosh_dbus_login_session_complete_set_locked_hint">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1005">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-login1-Session.SetLockedHint"&gt;SetLockedHint()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1007">A #PhoshDBusLoginSession.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1008">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_lock"
              c:identifier="phosh_dbus_login_session_emit_lock">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="771">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-login1-Session.Lock"&gt;"Lock"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="773">A #PhoshDBusLoginSession.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_unlock"
              c:identifier="phosh_dbus_login_session_emit_unlock">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="784">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-login1-Session.Unlock"&gt;"Unlock"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="786">A #PhoshDBusLoginSession.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="phosh_dbus_login_session_get_active"
              glib:get-property="active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="705">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-login1-Session.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="713">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="707">A #PhoshDBusLoginSession.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locked_hint"
              c:identifier="phosh_dbus_login_session_get_locked_hint"
              glib:get-property="locked-hint"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="738">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-login1-Session.LockedHint"&gt;"LockedHint"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="746">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="740">A #PhoshDBusLoginSession.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="phosh_dbus_login_session_set_active"
              glib:set-property="active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="723">Sets the &lt;link linkend="gdbus-property-org-freedesktop-login1-Session.Active"&gt;"Active"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="725">A #PhoshDBusLoginSession.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="726">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_locked_hint"
              c:identifier="phosh_dbus_login_session_set_locked_hint"
              glib:set-property="locked-hint"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="756">Sets the &lt;link linkend="gdbus-property-org-freedesktop-login1-Session.LockedHint"&gt;"LockedHint"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="758">A #PhoshDBusLoginSession.</doc>
            <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="759">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="685">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-login1-Session.Active"&gt;"Active"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="locked-hint"
                writable="1"
                transfer-ownership="none"
                setter="set_locked_hint"
                getter="get_locked_hint"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="694">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-login1-Session.LockedHint"&gt;"LockedHint"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-set-brightness" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="620">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-login1-Session.SetBrightness"&gt;SetBrightness()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_login_session_complete_set_brightness() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="632">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="623">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_subsystem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="624">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="625">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_brightness" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="626">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-locked-hint" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="597">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-login1-Session.SetLockedHint"&gt;SetLockedHint()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_login_session_complete_set_locked_hint() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="607">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="600">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="601">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="lock" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="646">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-login1-Session.Lock"&gt;"Lock"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="unlock" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="665">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-login1-Session.Unlock"&gt;"Unlock"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="DBusLoginSessionIface"
            c:type="PhoshDBusLoginSessionIface"
            glib:is-gtype-struct-for="DBusLoginSession">
      <doc xml:space="preserve"
           filename="src/dbus/login1-session-dbus.c"
           line="577">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-login1-Session.top_of_page"&gt;org.freedesktop.login1.Session&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/login1-session-dbus.h" line="57"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="579">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_set_brightness">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="580">Handler for the #PhoshDBusLoginSession::handle-set-brightness signal.</doc>
        <callback name="handle_set_brightness">
          <source-position filename="src/dbus/login1-session-dbus.h"
                           line="35"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_subsystem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_brightness" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_locked_hint">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="581">Handler for the #PhoshDBusLoginSession::handle-set-locked-hint signal.</doc>
        <callback name="handle_set_locked_hint">
          <source-position filename="src/dbus/login1-session-dbus.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_unnamed_arg0" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="582">Getter for the #PhoshDBusLoginSession:active property.</doc>
        <callback name="get_active">
          <source-position filename="src/dbus/login1-session-dbus.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="713">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/login1-session-dbus.c"
                   line="707">A #PhoshDBusLoginSession.</doc>
              <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_locked_hint">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="583">Getter for the #PhoshDBusLoginSession:locked-hint property.</doc>
        <callback name="get_locked_hint">
          <source-position filename="src/dbus/login1-session-dbus.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="746">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/login1-session-dbus.c"
                   line="740">A #PhoshDBusLoginSession.</doc>
              <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lock">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="584">Handler for the #PhoshDBusLoginSession::lock signal.</doc>
        <callback name="lock">
          <source-position filename="src/dbus/login1-session-dbus.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unlock">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="585">Handler for the #PhoshDBusLoginSession::unlock signal.</doc>
        <callback name="unlock">
          <source-position filename="src/dbus/login1-session-dbus.h"
                           line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusLoginSession" c:type="PhoshDBusLoginSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusLoginSessionProxy"
           c:symbol-prefix="dbus_login_session_proxy"
           c:type="PhoshDBusLoginSessionProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusLoginSessionProxy"
           glib:get-type="phosh_dbus_login_session_proxy_get_type"
           glib:type-struct="DBusLoginSessionProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/login1-session-dbus.c"
           line="1043">The #PhoshDBusLoginSessionProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/login1-session-dbus.h" line="163"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusLoginSession"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_login_session_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1319">Finishes an operation started with phosh_dbus_login_session_proxy_new().</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="179"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="1326">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusLoginSessionProxy" c:type="PhoshDBusLoginSession*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1321">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_login_session_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_login_session_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1409">Finishes an operation started with phosh_dbus_login_session_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="198"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="1416">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusLoginSessionProxy" c:type="PhoshDBusLoginSession*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1411">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_login_session_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_login_session_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1434">Like phosh_dbus_login_session_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_login_session_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="201"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="1449">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusLoginSessionProxy" c:type="PhoshDBusLoginSession*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1436">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1437">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1438">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1439">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1440">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_login_session_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1344">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-login1-Session.top_of_page"&gt;org.freedesktop.login1.Session&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_login_session_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="182"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="1359">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusLoginSessionProxy" c:type="PhoshDBusLoginSession*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1346">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1347">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1348">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1349">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1350">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_login_session_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1289">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-login1-Session.top_of_page"&gt;org.freedesktop.login1.Session&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_login_session_proxy_new_finish() to get the result of the operation.

See phosh_dbus_login_session_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1291">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1292">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1293">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1294">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1295">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1296">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1297">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_login_session_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1379">Like phosh_dbus_login_session_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_login_session_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_login_session_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1381">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1382">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1383">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1384">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1385">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1386">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/login1-session-dbus.c"
                 line="1387">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusLoginSessionProxyPrivate"
              c:type="PhoshDBusLoginSessionProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusLoginSessionProxyClass"
            c:type="PhoshDBusLoginSessionProxyClass"
            glib:is-gtype-struct-for="DBusLoginSessionProxy">
      <doc xml:space="preserve"
           filename="src/dbus/login1-session-dbus.c"
           line="1049">Class structure for #PhoshDBusLoginSessionProxy.</doc>
      <source-position filename="src/dbus/login1-session-dbus.h" line="163"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1051">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusLoginSessionProxyPrivate"
            c:type="PhoshDBusLoginSessionProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/login1-session-dbus.h" line="151"/>
    </record>
    <class name="DBusLoginSessionSkeleton"
           c:symbol-prefix="dbus_login_session_skeleton"
           c:type="PhoshDBusLoginSessionSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusLoginSessionSkeleton"
           glib:get-type="phosh_dbus_login_session_skeleton_get_type"
           glib:type-struct="DBusLoginSessionSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/login1-session-dbus.c"
           line="1471">The #PhoshDBusLoginSessionSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/login1-session-dbus.h" line="233"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusLoginSession"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_login_session_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1983">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-login1-Session.top_of_page"&gt;org.freedesktop.login1.Session&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/login1-session-dbus.h" line="241"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="1988">The skeleton object.</doc>
          <type name="DBusLoginSessionSkeleton"
                c:type="PhoshDBusLoginSession*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusLoginSessionSkeletonPrivate"
              c:type="PhoshDBusLoginSessionSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusLoginSessionSkeletonClass"
            c:type="PhoshDBusLoginSessionSkeletonClass"
            glib:is-gtype-struct-for="DBusLoginSessionSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/login1-session-dbus.c"
           line="1477">Class structure for #PhoshDBusLoginSessionSkeleton.</doc>
      <source-position filename="src/dbus/login1-session-dbus.h" line="233"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="1479">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusLoginSessionSkeletonPrivate"
            c:type="PhoshDBusLoginSessionSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/login1-session-dbus.h" line="221"/>
    </record>
    <interface name="DBusMountOperationHandler"
               c:symbol-prefix="dbus_mount_operation_handler"
               c:type="PhoshDBusMountOperationHandler"
               glib:type-name="PhoshDBusMountOperationHandler"
               glib:get-type="phosh_dbus_mount_operation_handler_get_type"
               glib:type-struct="DBusMountOperationHandlerIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
           line="857">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-Gtk-MountOperationHandler.top_of_page"&gt;org.Gtk.MountOperationHandler&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="64"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_mount_operation_handler_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="774">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-Gtk-MountOperationHandler.top_of_page"&gt;org.Gtk.MountOperationHandler&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="779">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_mount_operation_handler_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="787">Overrides all #GObject properties in the #PhoshDBusMountOperationHandler interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="795">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="789">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="790">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_ask_password">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="866">Handler for the #PhoshDBusMountOperationHandler::handle-ask-password signal.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_default_user" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_default_domain" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_ask_question">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="867">Handler for the #PhoshDBusMountOperationHandler::handle-ask-question signal.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choices" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_close">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="868">Handler for the #PhoshDBusMountOperationHandler::handle-close signal.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_show_processes">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="869">Handler for the #PhoshDBusMountOperationHandler::handle-show-processes signal.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_application_pids" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_choices" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_ask_password"
              c:identifier="phosh_dbus_mount_operation_handler_call_ask_password"
              glib:finish-func="call_ask_password_finish"
              glib:sync-func="call_ask_password_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="986">Asynchronously invokes the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.AskPassword"&gt;AskPassword()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_mount_operation_handler_call_ask_password_finish() to get the result of the operation.

See phosh_dbus_mount_operation_handler_call_ask_password_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="988">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="989">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="990">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="991">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_default_user" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="992">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_default_domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="993">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="994">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="995">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="996">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="997">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ask_password_finish"
              c:identifier="phosh_dbus_mount_operation_handler_call_ask_password_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1034">Finishes an operation started with phosh_dbus_mount_operation_handler_call_ask_password().</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="114"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1044">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1036">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1037">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_response_details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1038">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1039">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_mount_operation_handler_call_ask_password().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ask_password_sync"
              c:identifier="phosh_dbus_mount_operation_handler_call_ask_password_sync"
              throws="1"
              glib:async-func="call_ask_password">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1067">Synchronously invokes the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.AskPassword"&gt;AskPassword()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_mount_operation_handler_call_ask_password() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="121"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1085">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1069">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1070">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1071">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1072">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_default_user" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1073">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_default_domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1074">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1075">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1076">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_response_details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1077">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1078">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ask_question"
              c:identifier="phosh_dbus_mount_operation_handler_call_ask_question"
              glib:finish-func="call_ask_question_finish"
              glib:sync-func="call_ask_question_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1126">Asynchronously invokes the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.AskQuestion"&gt;AskQuestion()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_mount_operation_handler_call_ask_question_finish() to get the result of the operation.

See phosh_dbus_mount_operation_handler_call_ask_question_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1128">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1129">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1130">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1131">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1132">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1133">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1134">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1135">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ask_question_finish"
              c:identifier="phosh_dbus_mount_operation_handler_call_ask_question_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1168">Finishes an operation started with phosh_dbus_mount_operation_handler_call_ask_question().</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="144"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1178">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1170">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1171">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_response_details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1172">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1173">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_mount_operation_handler_call_ask_question().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_ask_question_sync"
              c:identifier="phosh_dbus_mount_operation_handler_call_ask_question_sync"
              throws="1"
              glib:async-func="call_ask_question">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1201">Synchronously invokes the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.AskQuestion"&gt;AskQuestion()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_mount_operation_handler_call_ask_question() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="151"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1217">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1203">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1204">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1205">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1206">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1207">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1208">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_response_details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1209">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1210">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_close"
              c:identifier="phosh_dbus_mount_operation_handler_call_close"
              glib:finish-func="call_close_finish"
              glib:sync-func="call_close_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1388">Asynchronously invokes the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.Close"&gt;Close()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_mount_operation_handler_call_close_finish() to get the result of the operation.

See phosh_dbus_mount_operation_handler_call_close_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="192"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1390">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1391">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1392">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1393">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_close_finish"
              c:identifier="phosh_dbus_mount_operation_handler_call_close_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1418">Finishes an operation started with phosh_dbus_mount_operation_handler_call_close().</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="198"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1426">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1420">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1421">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_mount_operation_handler_call_close().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_close_sync"
              c:identifier="phosh_dbus_mount_operation_handler_call_close_sync"
              throws="1"
              glib:async-func="call_close">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1445">Synchronously invokes the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.Close"&gt;Close()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_mount_operation_handler_call_close() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="203"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1455">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1447">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1448">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_show_processes"
              c:identifier="phosh_dbus_mount_operation_handler_call_show_processes"
              glib:finish-func="call_show_processes_finish"
              glib:sync-func="call_show_processes_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1254">Asynchronously invokes the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.ShowProcesses"&gt;ShowProcesses()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_mount_operation_handler_call_show_processes_finish() to get the result of the operation.

See phosh_dbus_mount_operation_handler_call_show_processes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1256">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1257">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1258">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1259">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_application_pids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1260">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_choices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1261">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1262">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1263">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1264">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_show_processes_finish"
              c:identifier="phosh_dbus_mount_operation_handler_call_show_processes_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1299">Finishes an operation started with phosh_dbus_mount_operation_handler_call_show_processes().</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="173"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1309">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1301">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1302">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_response_details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1303">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1304">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_mount_operation_handler_call_show_processes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_show_processes_sync"
              c:identifier="phosh_dbus_mount_operation_handler_call_show_processes_sync"
              throws="1"
              glib:async-func="call_show_processes">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1332">Synchronously invokes the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.ShowProcesses"&gt;ShowProcesses()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_mount_operation_handler_call_show_processes() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="180"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1349">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1334">A #PhoshDBusMountOperationHandlerProxy.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1335">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1336">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1337">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_application_pids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1338">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_choices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1339">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1340">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="out_response_details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1341">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1342">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_ask_password"
              c:identifier="phosh_dbus_mount_operation_handler_complete_ask_password">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1480">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.AskPassword"&gt;AskPassword()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1482">A #PhoshDBusMountOperationHandler.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1483">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1484">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="response_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1485">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_ask_question"
              c:identifier="phosh_dbus_mount_operation_handler_complete_ask_question">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1504">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.AskQuestion"&gt;AskQuestion()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1506">A #PhoshDBusMountOperationHandler.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1507">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1508">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="response_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1509">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_close"
              c:identifier="phosh_dbus_mount_operation_handler_complete_close">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1552">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.Close"&gt;Close()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1554">A #PhoshDBusMountOperationHandler.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1555">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_show_processes"
              c:identifier="phosh_dbus_mount_operation_handler_complete_show_processes">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1528">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.ShowProcesses"&gt;ShowProcesses()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1530">A #PhoshDBusMountOperationHandler.</doc>
            <type name="DBusMountOperationHandler"
                  c:type="PhoshDBusMountOperationHandler*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1531">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1532">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="response_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1533">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-ask-password" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="881">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.AskPassword"&gt;AskPassword()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_mount_operation_handler_complete_ask_password() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="896">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="884">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="885">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="886">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="887">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_default_user" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="888">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_default_domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="889">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="890">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-ask-question" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="909">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.AskQuestion"&gt;AskQuestion()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_mount_operation_handler_complete_ask_question() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="922">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="912">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="913">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="914">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="915">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_choices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="916">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-close" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="962">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.Close"&gt;Close()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_mount_operation_handler_complete_close() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="971">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="965">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-show-processes" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="935">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-Gtk-MountOperationHandler.ShowProcesses"&gt;ShowProcesses()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_mount_operation_handler_complete_show_processes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="949">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="938">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_object_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="939">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="940">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="941">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_application_pids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="942">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_choices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="943">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DBusMountOperationHandlerIface"
            c:type="PhoshDBusMountOperationHandlerIface"
            glib:is-gtype-struct-for="DBusMountOperationHandler">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
           line="863">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-Gtk-MountOperationHandler.top_of_page"&gt;org.Gtk.MountOperationHandler&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="64"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="865">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_ask_password">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="866">Handler for the #PhoshDBusMountOperationHandler::handle-ask-password signal.</doc>
        <callback name="handle_ask_password">
          <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                           line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusMountOperationHandler"
                    c:type="PhoshDBusMountOperationHandler*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_object_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_icon_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_default_user" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_default_domain" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_flags" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_ask_question">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="867">Handler for the #PhoshDBusMountOperationHandler::handle-ask-question signal.</doc>
        <callback name="handle_ask_question">
          <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusMountOperationHandler"
                    c:type="PhoshDBusMountOperationHandler*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_object_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_icon_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_choices" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_close">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="868">Handler for the #PhoshDBusMountOperationHandler::handle-close signal.</doc>
        <callback name="handle_close">
          <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusMountOperationHandler"
                    c:type="PhoshDBusMountOperationHandler*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_show_processes">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="869">Handler for the #PhoshDBusMountOperationHandler::handle-show-processes signal.</doc>
        <callback name="handle_show_processes">
          <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusMountOperationHandler"
                    c:type="PhoshDBusMountOperationHandler*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_object_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_icon_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_application_pids" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_choices" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusMountOperationHandlerProxy"
           c:symbol-prefix="dbus_mount_operation_handler_proxy"
           c:type="PhoshDBusMountOperationHandlerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusMountOperationHandlerProxy"
           glib:get-type="phosh_dbus_mount_operation_handler_proxy_get_type"
           glib:type-struct="DBusMountOperationHandlerProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
           line="1572">The #PhoshDBusMountOperationHandlerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="233"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusMountOperationHandler"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_mount_operation_handler_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1763">Finishes an operation started with phosh_dbus_mount_operation_handler_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="249"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1770">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusMountOperationHandlerProxy"
                c:type="PhoshDBusMountOperationHandler*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1765">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_mount_operation_handler_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_mount_operation_handler_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1853">Finishes an operation started with phosh_dbus_mount_operation_handler_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="268"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1860">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusMountOperationHandlerProxy"
                c:type="PhoshDBusMountOperationHandler*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1855">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_mount_operation_handler_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_mount_operation_handler_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1878">Like phosh_dbus_mount_operation_handler_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_mount_operation_handler_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="271"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1893">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusMountOperationHandlerProxy"
                c:type="PhoshDBusMountOperationHandler*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1880">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1881">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1882">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1883">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1884">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_mount_operation_handler_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1788">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-Gtk-MountOperationHandler.top_of_page"&gt;org.Gtk.MountOperationHandler&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_mount_operation_handler_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="252"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="1803">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusMountOperationHandlerProxy"
                c:type="PhoshDBusMountOperationHandler*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1790">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1791">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1792">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1793">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1794">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_mount_operation_handler_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1733">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-Gtk-MountOperationHandler.top_of_page"&gt;org.Gtk.MountOperationHandler&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_mount_operation_handler_proxy_new_finish() to get the result of the operation.

See phosh_dbus_mount_operation_handler_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1735">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1736">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1737">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1738">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1739">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1740">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1741">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_mount_operation_handler_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1823">Like phosh_dbus_mount_operation_handler_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_mount_operation_handler_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_mount_operation_handler_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="260"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1825">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1826">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1827">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1828">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1829">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1830">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
                 line="1831">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusMountOperationHandlerProxyPrivate"
              c:type="PhoshDBusMountOperationHandlerProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusMountOperationHandlerProxyClass"
            c:type="PhoshDBusMountOperationHandlerProxyClass"
            glib:is-gtype-struct-for="DBusMountOperationHandlerProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
           line="1578">Class structure for #PhoshDBusMountOperationHandlerProxy.</doc>
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="233"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1580">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusMountOperationHandlerProxyPrivate"
            c:type="PhoshDBusMountOperationHandlerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="221"/>
    </record>
    <class name="DBusMountOperationHandlerSkeleton"
           c:symbol-prefix="dbus_mount_operation_handler_skeleton"
           c:type="PhoshDBusMountOperationHandlerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusMountOperationHandlerSkeleton"
           glib:get-type="phosh_dbus_mount_operation_handler_skeleton_get_type"
           glib:type-struct="DBusMountOperationHandlerSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
           line="1915">The #PhoshDBusMountOperationHandlerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="303"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusMountOperationHandler"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_mount_operation_handler_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="2186">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-Gtk-MountOperationHandler.top_of_page"&gt;org.Gtk.MountOperationHandler&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                         line="311"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="2191">The skeleton object.</doc>
          <type name="DBusMountOperationHandlerSkeleton"
                c:type="PhoshDBusMountOperationHandler*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusMountOperationHandlerSkeletonPrivate"
              c:type="PhoshDBusMountOperationHandlerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusMountOperationHandlerSkeletonClass"
            c:type="PhoshDBusMountOperationHandlerSkeletonClass"
            glib:is-gtype-struct-for="DBusMountOperationHandlerSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
           line="1921">Class structure for #PhoshDBusMountOperationHandlerSkeleton.</doc>
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="303"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="1923">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusMountOperationHandlerSkeletonPrivate"
            c:type="PhoshDBusMountOperationHandlerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="291"/>
    </record>
    <class name="DBusNotification"
           c:symbol-prefix="dbus_notification"
           c:type="PhoshDBusNotification"
           parent="Notification"
           glib:type-name="PhoshDBusNotification"
           glib:get-type="phosh_dbus_notification_get_type"
           glib:type-struct="DBusNotificationClass">
      <doc xml:space="preserve"
           filename="src/notifications/dbus-notification.c"
           line="20">A notifiction submitted via the DBus notification interface

The #PhoshDBusNotification is a notification submitted via the
org.freedesktop.Notification interface.</doc>
      <source-position filename="src/notifications/dbus-notification.h"
                       line="15"/>
      <constructor name="new" c:identifier="phosh_dbus_notification_new">
        <source-position filename="src/notifications/dbus-notification.h"
                         line="18"/>
        <return-value transfer-ownership="full">
          <type name="DBusNotification" c:type="PhoshDBusNotification*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="app_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
          <parameter name="summary" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="body" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="image" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="urgency" transfer-ownership="none">
            <type name="NotificationUrgency"
                  c:type="PhoshNotificationUrgency"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="transient" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="resident" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="category" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="profile" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="DBusNotificationClass"
            c:type="PhoshDBusNotificationClass"
            glib:is-gtype-struct-for="DBusNotification">
      <source-position filename="src/notifications/dbus-notification.h"
                       line="15"/>
      <field name="parent_class">
        <type name="NotificationClass" c:type="PhoshNotificationClass"/>
      </field>
    </record>
    <interface name="DBusScreenSaver"
               c:symbol-prefix="dbus_screen_saver"
               c:type="PhoshDBusScreenSaver"
               glib:type-name="PhoshDBusScreenSaver"
               glib:get-type="phosh_dbus_screen_saver_get_type"
               glib:type-struct="DBusScreenSaverIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screen-saver-dbus.c"
           line="592">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-ScreenSaver.top_of_page"&gt;org.gnome.ScreenSaver&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="58"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_screen_saver_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="483">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-ScreenSaver.top_of_page"&gt;org.gnome.ScreenSaver&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="488">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_screen_saver_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="496">Overrides all #GObject properties in the #PhoshDBusScreenSaver interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="504">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="498">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="499">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="active_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="605">Handler for the #PhoshDBusScreenSaver::active-changed signal.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="arg_new_value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_active">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="601">Handler for the #PhoshDBusScreenSaver::handle-get-active signal.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_active_time">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="602">Handler for the #PhoshDBusScreenSaver::handle-get-active-time signal.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_lock">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="603">Handler for the #PhoshDBusScreenSaver::handle-lock signal.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_active">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="604">Handler for the #PhoshDBusScreenSaver::handle-set-active signal.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wake_up_screen">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="606">Handler for the #PhoshDBusScreenSaver::wake-up-screen signal.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="call_get_active"
              c:identifier="phosh_dbus_screen_saver_call_get_active"
              glib:finish-func="call_get_active_finish"
              glib:sync-func="call_get_active_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="869">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.GetActive"&gt;GetActive()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screen_saver_call_get_active_finish() to get the result of the operation.

See phosh_dbus_screen_saver_call_get_active_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="871">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="872">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="873">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="874">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_active_finish"
              c:identifier="phosh_dbus_screen_saver_call_get_active_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="899">Finishes an operation started with phosh_dbus_screen_saver_call_get_active().</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="124"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="908">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="901">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="out_active"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="902">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="903">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screen_saver_call_get_active().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_active_sync"
              c:identifier="phosh_dbus_screen_saver_call_get_active_sync"
              throws="1"
              glib:async-func="call_get_active">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="929">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.GetActive"&gt;GetActive()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_screen_saver_call_get_active() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="130"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="940">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="931">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="out_active"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="932">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="933">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_active_time"
              c:identifier="phosh_dbus_screen_saver_call_get_active_time"
              glib:finish-func="call_get_active_time_finish"
              glib:sync-func="call_get_active_time_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1065">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.GetActiveTime"&gt;GetActiveTime()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screen_saver_call_get_active_time_finish() to get the result of the operation.

See phosh_dbus_screen_saver_call_get_active_time_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1067">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1068">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1069">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1070">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_active_time_finish"
              c:identifier="phosh_dbus_screen_saver_call_get_active_time_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1095">Finishes an operation started with phosh_dbus_screen_saver_call_get_active_time().</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="160"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="1104">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1097">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="out_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1098">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1099">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screen_saver_call_get_active_time().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_active_time_sync"
              c:identifier="phosh_dbus_screen_saver_call_get_active_time_sync"
              throws="1"
              glib:async-func="call_get_active_time">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1125">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.GetActiveTime"&gt;GetActiveTime()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_screen_saver_call_get_active_time() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="166"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="1136">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1127">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="out_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1128">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1129">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock"
              c:identifier="phosh_dbus_screen_saver_call_lock"
              glib:finish-func="call_lock_finish"
              glib:sync-func="call_lock_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="777">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.Lock"&gt;Lock()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screen_saver_call_lock_finish() to get the result of the operation.

See phosh_dbus_screen_saver_call_lock_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="779">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="780">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="781">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="782">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock_finish"
              c:identifier="phosh_dbus_screen_saver_call_lock_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="807">Finishes an operation started with phosh_dbus_screen_saver_call_lock().</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="108"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="815">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="809">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="810">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screen_saver_call_lock().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock_sync"
              c:identifier="phosh_dbus_screen_saver_call_lock_sync"
              throws="1"
              glib:async-func="call_lock">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="834">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.Lock"&gt;Lock()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_screen_saver_call_lock() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="113"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="844">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="836">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="837">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_active"
              c:identifier="phosh_dbus_screen_saver_call_set_active"
              glib:finish-func="call_set_active_finish"
              glib:sync-func="call_set_active_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="967">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.SetActive"&gt;SetActive()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screen_saver_call_set_active_finish() to get the result of the operation.

See phosh_dbus_screen_saver_call_set_active_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="969">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="970">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="971">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="972">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="973">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_active_finish"
              c:identifier="phosh_dbus_screen_saver_call_set_active_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1000">Finishes an operation started with phosh_dbus_screen_saver_call_set_active().</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="143"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="1008">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1002">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1003">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screen_saver_call_set_active().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_active_sync"
              c:identifier="phosh_dbus_screen_saver_call_set_active_sync"
              throws="1"
              glib:async-func="call_set_active">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1027">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.SetActive"&gt;SetActive()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_screen_saver_call_set_active() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="148"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="1038">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1029">A #PhoshDBusScreenSaverProxy.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1030">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1031">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_active"
              c:identifier="phosh_dbus_screen_saver_complete_get_active">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1181">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.GetActive"&gt;GetActive()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1183">A #PhoshDBusScreenSaver.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1184">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="active" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1185">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_active_time"
              c:identifier="phosh_dbus_screen_saver_complete_get_active_time">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1220">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.GetActiveTime"&gt;GetActiveTime()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1222">A #PhoshDBusScreenSaver.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1223">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1224">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_lock"
              c:identifier="phosh_dbus_screen_saver_complete_lock">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1163">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.Lock"&gt;Lock()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1165">A #PhoshDBusScreenSaver.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1166">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_active"
              c:identifier="phosh_dbus_screen_saver_complete_set_active">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1202">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.SetActive"&gt;SetActive()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1204">A #PhoshDBusScreenSaver.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1205">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_active_changed"
              c:identifier="phosh_dbus_screen_saver_emit_active_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="749">Emits the &lt;link linkend="gdbus-signal-org-gnome-ScreenSaver.ActiveChanged"&gt;"ActiveChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="751">A #PhoshDBusScreenSaver.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
          <parameter name="arg_new_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="752">Argument to pass with the signal.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_wake_up_screen"
              c:identifier="phosh_dbus_screen_saver_emit_wake_up_screen">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="764">Emits the &lt;link linkend="gdbus-signal-org-gnome-ScreenSaver.WakeUpScreen"&gt;"WakeUpScreen"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="766">A #PhoshDBusScreenSaver.</doc>
            <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="active-changed" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="708">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-ScreenSaver.ActiveChanged"&gt;"ActiveChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_new_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="711">Argument.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-active" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="640">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.GetActive"&gt;GetActive()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_screen_saver_complete_get_active() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="649">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="643">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-active-time" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="685">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.GetActiveTime"&gt;GetActiveTime()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_screen_saver_complete_get_active_time() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="694">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="688">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-lock" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="618">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.Lock"&gt;Lock()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_screen_saver_complete_lock() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="627">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="621">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-active" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="662">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-ScreenSaver.SetActive"&gt;SetActive()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_screen_saver_complete_set_active() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="672">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="665">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="666">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="wake-up-screen" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="728">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-ScreenSaver.WakeUpScreen"&gt;"WakeUpScreen"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="DBusScreenSaverIface"
            c:type="PhoshDBusScreenSaverIface"
            glib:is-gtype-struct-for="DBusScreenSaver">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screen-saver-dbus.c"
           line="598">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-ScreenSaver.top_of_page"&gt;org.gnome.ScreenSaver&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="58"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="600">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_active">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="601">Handler for the #PhoshDBusScreenSaver::handle-get-active signal.</doc>
        <callback name="handle_get_active">
          <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_active_time">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="602">Handler for the #PhoshDBusScreenSaver::handle-get-active-time signal.</doc>
        <callback name="handle_get_active_time">
          <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                           line="38"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_lock">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="603">Handler for the #PhoshDBusScreenSaver::handle-lock signal.</doc>
        <callback name="handle_lock">
          <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_active">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="604">Handler for the #PhoshDBusScreenSaver::handle-set-active signal.</doc>
        <callback name="handle_set_active">
          <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="active_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="605">Handler for the #PhoshDBusScreenSaver::active-changed signal.</doc>
        <callback name="active_changed">
          <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
            </parameter>
            <parameter name="arg_new_value" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wake_up_screen">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="606">Handler for the #PhoshDBusScreenSaver::wake-up-screen signal.</doc>
        <callback name="wake_up_screen">
          <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenSaver" c:type="PhoshDBusScreenSaver*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusScreenSaverProxy"
           c:symbol-prefix="dbus_screen_saver_proxy"
           c:type="PhoshDBusScreenSaverProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusScreenSaverProxy"
           glib:get-type="phosh_dbus_screen_saver_proxy_get_type"
           glib:type-struct="DBusScreenSaverProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screen-saver-dbus.c"
           line="1243">The #PhoshDBusScreenSaverProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="197"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusScreenSaver"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_screen_saver_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1434">Finishes an operation started with phosh_dbus_screen_saver_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="213"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="1441">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusScreenSaverProxy" c:type="PhoshDBusScreenSaver*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1436">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screen_saver_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_screen_saver_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1524">Finishes an operation started with phosh_dbus_screen_saver_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="1531">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusScreenSaverProxy" c:type="PhoshDBusScreenSaver*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1526">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screen_saver_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_screen_saver_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1549">Like phosh_dbus_screen_saver_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_screen_saver_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="235"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="1564">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusScreenSaverProxy" c:type="PhoshDBusScreenSaver*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1551">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1552">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1553">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1554">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1555">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_screen_saver_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1459">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-ScreenSaver.top_of_page"&gt;org.gnome.ScreenSaver&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_screen_saver_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="216"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="1474">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusScreenSaverProxy" c:type="PhoshDBusScreenSaver*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1461">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1462">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1463">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1464">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1465">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_screen_saver_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1404">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-ScreenSaver.top_of_page"&gt;org.gnome.ScreenSaver&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screen_saver_proxy_new_finish() to get the result of the operation.

See phosh_dbus_screen_saver_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1406">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1407">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1408">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1409">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1410">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1411">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1412">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_screen_saver_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1494">Like phosh_dbus_screen_saver_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screen_saver_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_screen_saver_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1496">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1497">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1498">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1499">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1500">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1501">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screen-saver-dbus.c"
                 line="1502">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusScreenSaverProxyPrivate"
              c:type="PhoshDBusScreenSaverProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusScreenSaverProxyClass"
            c:type="PhoshDBusScreenSaverProxyClass"
            glib:is-gtype-struct-for="DBusScreenSaverProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screen-saver-dbus.c"
           line="1249">Class structure for #PhoshDBusScreenSaverProxy.</doc>
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="197"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1251">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusScreenSaverProxyPrivate"
            c:type="PhoshDBusScreenSaverProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="185"/>
    </record>
    <class name="DBusScreenSaverSkeleton"
           c:symbol-prefix="dbus_screen_saver_skeleton"
           c:type="PhoshDBusScreenSaverSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusScreenSaverSkeleton"
           glib:get-type="phosh_dbus_screen_saver_skeleton_get_type"
           glib:type-struct="DBusScreenSaverSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screen-saver-dbus.c"
           line="1586">The #PhoshDBusScreenSaverSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="267"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusScreenSaver"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_screen_saver_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1905">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-ScreenSaver.top_of_page"&gt;org.gnome.ScreenSaver&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                         line="275"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="1910">The skeleton object.</doc>
          <type name="DBusScreenSaverSkeleton" c:type="PhoshDBusScreenSaver*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusScreenSaverSkeletonPrivate"
              c:type="PhoshDBusScreenSaverSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusScreenSaverSkeletonClass"
            c:type="PhoshDBusScreenSaverSkeletonClass"
            glib:is-gtype-struct-for="DBusScreenSaverSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screen-saver-dbus.c"
           line="1592">Class structure for #PhoshDBusScreenSaverSkeleton.</doc>
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="267"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="1594">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusScreenSaverSkeletonPrivate"
            c:type="PhoshDBusScreenSaverSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="255"/>
    </record>
    <interface name="DBusScreenshot"
               c:symbol-prefix="dbus_screenshot"
               c:type="PhoshDBusScreenshot"
               glib:type-name="PhoshDBusScreenshot"
               glib:get-type="phosh_dbus_screenshot_get_type"
               glib:type-struct="DBusScreenshotIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screenshot-dbus.c"
           line="1057">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Shell-Screenshot.top_of_page"&gt;org.gnome.Shell.Screenshot&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="74"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_screenshot_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="948">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Shell-Screenshot.top_of_page"&gt;org.gnome.Shell.Screenshot&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="953">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_screenshot_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="961">Overrides all #GObject properties in the #PhoshDBusScreenshot interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="969">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="963">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="964">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_flash_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1066">Handler for the #PhoshDBusScreenshot::handle-flash-area signal.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pick_color">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1067">Handler for the #PhoshDBusScreenshot::handle-pick-color signal.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_screenshot">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1068">Handler for the #PhoshDBusScreenshot::handle-screenshot signal.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_include_cursor" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_screenshot_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1069">Handler for the #PhoshDBusScreenshot::handle-screenshot-area signal.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_screenshot_window">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1070">Handler for the #PhoshDBusScreenshot::handle-screenshot-window signal.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_include_frame" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_include_cursor" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1071">Handler for the #PhoshDBusScreenshot::handle-select-area signal.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_flash_area"
              c:identifier="phosh_dbus_screenshot_call_flash_area"
              glib:finish-func="call_flash_area_finish"
              glib:sync-func="call_flash_area_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1722">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.FlashArea"&gt;FlashArea()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screenshot_call_flash_area_finish() to get the result of the operation.

See phosh_dbus_screenshot_call_flash_area_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1724">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1725">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1726">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1727">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1728">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1729">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1730">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1731">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_flash_area_finish"
              c:identifier="phosh_dbus_screenshot_call_flash_area_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1764">Finishes an operation started with phosh_dbus_screenshot_call_flash_area().</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="239"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1772">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1766">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1767">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screenshot_call_flash_area().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_flash_area_sync"
              c:identifier="phosh_dbus_screenshot_call_flash_area_sync"
              throws="1"
              glib:async-func="call_flash_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1791">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.FlashArea"&gt;FlashArea()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_screenshot_call_flash_area() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="244"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1805">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1793">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1794">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1795">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1796">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1797">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1798">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pick_color"
              c:identifier="phosh_dbus_screenshot_call_pick_color"
              glib:finish-func="call_pick_color_finish"
              glib:sync-func="call_pick_color_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1624">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.PickColor"&gt;PickColor()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screenshot_call_pick_color_finish() to get the result of the operation.

See phosh_dbus_screenshot_call_pick_color_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1626">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1627">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1628">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1629">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pick_color_finish"
              c:identifier="phosh_dbus_screenshot_call_pick_color_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1654">Finishes an operation started with phosh_dbus_screenshot_call_pick_color().</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="217"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1663">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1656">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1657">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1658">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screenshot_call_pick_color().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pick_color_sync"
              c:identifier="phosh_dbus_screenshot_call_pick_color_sync"
              throws="1"
              glib:async-func="call_pick_color">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1684">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.PickColor"&gt;PickColor()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_screenshot_call_pick_color() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="223"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1695">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1686">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1687">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1688">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_screenshot"
              c:identifier="phosh_dbus_screenshot_call_screenshot"
              glib:finish-func="call_screenshot_finish"
              glib:sync-func="call_screenshot_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1234">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.Screenshot"&gt;Screenshot()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screenshot_call_screenshot_finish() to get the result of the operation.

See phosh_dbus_screenshot_call_screenshot_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1236">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="arg_include_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1237">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1238">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1239">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1240">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1241">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1242">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_screenshot_area"
              c:identifier="phosh_dbus_screenshot_call_screenshot_area"
              glib:finish-func="call_screenshot_area_finish"
              glib:sync-func="call_screenshot_area_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1484">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.ScreenshotArea"&gt;ScreenshotArea()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screenshot_call_screenshot_area_finish() to get the result of the operation.

See phosh_dbus_screenshot_call_screenshot_area_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="179"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1486">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1487">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1488">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1489">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1490">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1491">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1492">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1493">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1494">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1495">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_screenshot_area_finish"
              c:identifier="phosh_dbus_screenshot_call_screenshot_area_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1532">Finishes an operation started with phosh_dbus_screenshot_call_screenshot_area().</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="191"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1542">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1534">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="out_success"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1535">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_filename_used"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1536">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1537">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screenshot_call_screenshot_area().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_screenshot_area_sync"
              c:identifier="phosh_dbus_screenshot_call_screenshot_area_sync"
              throws="1"
              glib:async-func="call_screenshot_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1565">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.ScreenshotArea"&gt;ScreenshotArea()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_screenshot_call_screenshot_area() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="198"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1583">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1567">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1568">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1569">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1570">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1571">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1572">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1573">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_success"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1574">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_filename_used"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1575">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1576">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_screenshot_finish"
              c:identifier="phosh_dbus_screenshot_call_screenshot_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1273">Finishes an operation started with phosh_dbus_screenshot_call_screenshot().</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="134"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1283">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1275">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="out_success"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1276">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_filename_used"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1277">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1278">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screenshot_call_screenshot().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_screenshot_sync"
              c:identifier="phosh_dbus_screenshot_call_screenshot_sync"
              throws="1"
              glib:async-func="call_screenshot">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1306">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.Screenshot"&gt;Screenshot()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_screenshot_call_screenshot() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="141"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1321">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1308">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="arg_include_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1309">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1310">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1311">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_success"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1312">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_filename_used"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1313">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1314">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_screenshot_window"
              c:identifier="phosh_dbus_screenshot_call_screenshot_window"
              glib:finish-func="call_screenshot_window_finish"
              glib:sync-func="call_screenshot_window_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1356">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.ScreenshotWindow"&gt;ScreenshotWindow()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screenshot_call_screenshot_window_finish() to get the result of the operation.

See phosh_dbus_screenshot_call_screenshot_window_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1358">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="arg_include_frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1359">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_include_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1360">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1361">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1362">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1363">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1364">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1365">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_screenshot_window_finish"
              c:identifier="phosh_dbus_screenshot_call_screenshot_window_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1398">Finishes an operation started with phosh_dbus_screenshot_call_screenshot_window().</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="161"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1408">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1400">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="out_success"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1401">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_filename_used"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1402">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1403">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screenshot_call_screenshot_window().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_screenshot_window_sync"
              c:identifier="phosh_dbus_screenshot_call_screenshot_window_sync"
              throws="1"
              glib:async-func="call_screenshot_window">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1431">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.ScreenshotWindow"&gt;ScreenshotWindow()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_screenshot_call_screenshot_window() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="168"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1447">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1433">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="arg_include_frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1434">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_include_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1435">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1436">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1437">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_success"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1438">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_filename_used"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1439">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1440">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_area"
              c:identifier="phosh_dbus_screenshot_call_select_area"
              glib:finish-func="call_select_area_finish"
              glib:sync-func="call_select_area_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1838">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.SelectArea"&gt;SelectArea()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screenshot_call_select_area_finish() to get the result of the operation.

See phosh_dbus_screenshot_call_select_area_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1840">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1841">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1842">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1843">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_area_finish"
              c:identifier="phosh_dbus_screenshot_call_select_area_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1868">Finishes an operation started with phosh_dbus_screenshot_call_select_area().</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="259"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1880">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1870">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="out_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1871">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="out_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1872">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="out_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1873">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="out_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1874">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1875">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screenshot_call_select_area().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_area_sync"
              c:identifier="phosh_dbus_screenshot_call_select_area_sync"
              throws="1"
              glib:async-func="call_select_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1907">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.SelectArea"&gt;SelectArea()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_screenshot_call_select_area() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="268"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1921">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1909">A #PhoshDBusScreenshotProxy.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="out_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1910">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="out_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1911">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="out_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1912">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="out_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1913">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1914">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_flash_area"
              c:identifier="phosh_dbus_screenshot_complete_flash_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2047">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.FlashArea"&gt;FlashArea()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2049">A #PhoshDBusScreenshot.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2050">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pick_color"
              c:identifier="phosh_dbus_screenshot_complete_pick_color">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2026">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.PickColor"&gt;PickColor()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2028">A #PhoshDBusScreenshot.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2029">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2030">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_screenshot"
              c:identifier="phosh_dbus_screenshot_complete_screenshot">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1954">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.Screenshot"&gt;Screenshot()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1956">A #PhoshDBusScreenshot.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1957">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1958">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="filename_used" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1959">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_screenshot_area"
              c:identifier="phosh_dbus_screenshot_complete_screenshot_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2002">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.ScreenshotArea"&gt;ScreenshotArea()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2004">A #PhoshDBusScreenshot.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2005">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2006">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="filename_used" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2007">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_screenshot_window"
              c:identifier="phosh_dbus_screenshot_complete_screenshot_window">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1978">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.ScreenshotWindow"&gt;ScreenshotWindow()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1980">A #PhoshDBusScreenshot.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1981">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1982">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="filename_used" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1983">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_area"
              c:identifier="phosh_dbus_screenshot_complete_select_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2065">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.SelectArea"&gt;SelectArea()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2067">A #PhoshDBusScreenshot.</doc>
            <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2068">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2069">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2070">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2071">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2072">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-flash-area" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1184">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.FlashArea"&gt;FlashArea()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_screenshot_complete_flash_area() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1197">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1187">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1188">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1189">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1190">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1191">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-pick-color" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1162">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.PickColor"&gt;PickColor()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_screenshot_complete_pick_color() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1171">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1165">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-screenshot" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1083">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.Screenshot"&gt;Screenshot()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_screenshot_complete_screenshot() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1095">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1086">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_include_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1087">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1088">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1089">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-screenshot-area" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1134">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.ScreenshotArea"&gt;ScreenshotArea()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_screenshot_complete_screenshot_area() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1149">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1137">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1138">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1139">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1140">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1141">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1142">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1143">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-screenshot-window" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1108">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.ScreenshotWindow"&gt;ScreenshotWindow()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_screenshot_complete_screenshot_window() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1121">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1111">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_include_frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1112">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_include_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1113">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_flash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1114">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1115">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-area" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1210">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Shell-Screenshot.SelectArea"&gt;SelectArea()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_screenshot_complete_select_area() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="1219">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="1213">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DBusScreenshotIface"
            c:type="PhoshDBusScreenshotIface"
            glib:is-gtype-struct-for="DBusScreenshot">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screenshot-dbus.c"
           line="1063">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Shell-Screenshot.top_of_page"&gt;org.gnome.Shell.Screenshot&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="74"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1065">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_flash_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1066">Handler for the #PhoshDBusScreenshot::handle-flash-area signal.</doc>
        <callback name="handle_flash_area">
          <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                           line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_pick_color">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1067">Handler for the #PhoshDBusScreenshot::handle-pick-color signal.</doc>
        <callback name="handle_pick_color">
          <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                           line="41"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_screenshot">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1068">Handler for the #PhoshDBusScreenshot::handle-screenshot signal.</doc>
        <callback name="handle_screenshot">
          <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_include_cursor" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_flash" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_filename" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_screenshot_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1069">Handler for the #PhoshDBusScreenshot::handle-screenshot-area signal.</doc>
        <callback name="handle_screenshot_area">
          <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_flash" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_filename" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_screenshot_window">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1070">Handler for the #PhoshDBusScreenshot::handle-screenshot-window signal.</doc>
        <callback name="handle_screenshot_window">
          <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_include_frame" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_include_cursor" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_flash" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_filename" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_area">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="1071">Handler for the #PhoshDBusScreenshot::handle-select-area signal.</doc>
        <callback name="handle_select_area">
          <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusScreenshot" c:type="PhoshDBusScreenshot*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusScreenshotProxy"
           c:symbol-prefix="dbus_screenshot_proxy"
           c:type="PhoshDBusScreenshotProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusScreenshotProxy"
           glib:get-type="phosh_dbus_screenshot_proxy_get_type"
           glib:type-struct="DBusScreenshotProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screenshot-dbus.c"
           line="2097">The #PhoshDBusScreenshotProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="302"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusScreenshot"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_screenshot_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2288">Finishes an operation started with phosh_dbus_screenshot_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="318"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="2295">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusScreenshotProxy" c:type="PhoshDBusScreenshot*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2290">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screenshot_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_screenshot_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2378">Finishes an operation started with phosh_dbus_screenshot_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="337"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="2385">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusScreenshotProxy" c:type="PhoshDBusScreenshot*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2380">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_screenshot_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_screenshot_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2403">Like phosh_dbus_screenshot_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_screenshot_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="340"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="2418">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusScreenshotProxy" c:type="PhoshDBusScreenshot*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2405">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2406">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2407">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2408">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2409">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_screenshot_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2313">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Shell-Screenshot.top_of_page"&gt;org.gnome.Shell.Screenshot&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_screenshot_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="321"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="2328">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusScreenshotProxy" c:type="PhoshDBusScreenshot*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2315">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2316">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2317">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2318">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2319">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_screenshot_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2258">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Shell-Screenshot.top_of_page"&gt;org.gnome.Shell.Screenshot&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screenshot_proxy_new_finish() to get the result of the operation.

See phosh_dbus_screenshot_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="310"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2260">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2261">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2262">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2263">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2264">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2265">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2266">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_screenshot_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2348">Like phosh_dbus_screenshot_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_screenshot_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_screenshot_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="329"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2350">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2351">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2352">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2353">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2354">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2355">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-screenshot-dbus.c"
                 line="2356">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusScreenshotProxyPrivate"
              c:type="PhoshDBusScreenshotProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusScreenshotProxyClass"
            c:type="PhoshDBusScreenshotProxyClass"
            glib:is-gtype-struct-for="DBusScreenshotProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screenshot-dbus.c"
           line="2103">Class structure for #PhoshDBusScreenshotProxy.</doc>
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="302"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2105">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusScreenshotProxyPrivate"
            c:type="PhoshDBusScreenshotProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="290"/>
    </record>
    <class name="DBusScreenshotSkeleton"
           c:symbol-prefix="dbus_screenshot_skeleton"
           c:type="PhoshDBusScreenshotSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusScreenshotSkeleton"
           glib:get-type="phosh_dbus_screenshot_skeleton_get_type"
           glib:type-struct="DBusScreenshotSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screenshot-dbus.c"
           line="2440">The #PhoshDBusScreenshotSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="372"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusScreenshot"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_screenshot_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2711">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Shell-Screenshot.top_of_page"&gt;org.gnome.Shell.Screenshot&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-screenshot-dbus.h"
                         line="380"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="2716">The skeleton object.</doc>
          <type name="DBusScreenshotSkeleton" c:type="PhoshDBusScreenshot*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusScreenshotSkeletonPrivate"
              c:type="PhoshDBusScreenshotSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusScreenshotSkeletonClass"
            c:type="PhoshDBusScreenshotSkeletonClass"
            glib:is-gtype-struct-for="DBusScreenshotSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screenshot-dbus.c"
           line="2446">Class structure for #PhoshDBusScreenshotSkeleton.</doc>
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="372"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="2448">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusScreenshotSkeletonPrivate"
            c:type="PhoshDBusScreenshotSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="360"/>
    </record>
    <interface name="DBusSensorProxy"
               c:symbol-prefix="dbus_sensor_proxy"
               c:type="PhoshDBusSensorProxy"
               glib:type-name="PhoshDBusSensorProxy"
               glib:get-type="phosh_dbus_sensor_proxy_get_type"
               glib:type-struct="DBusSensorProxyIface">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="587">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-net-hadess-SensorProxy.top_of_page"&gt;net.hadess.SensorProxy&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="72"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_sensor_proxy_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="471">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-net-hadess-SensorProxy.top_of_page"&gt;net.hadess.SensorProxy&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="476">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_sensor_proxy_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="484">Overrides all #GObject properties in the #PhoshDBusSensorProxy interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="492">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="486">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="487">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_accelerometer_orientation"
                      invoker="get_accelerometer_orientation"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="851">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.AccelerometerOrientation"&gt;"AccelerometerOrientation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_dbus_sensor_proxy_dup_accelerometer_orientation() if on another thread.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="58"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="861">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="853">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_has_accelerometer"
                      invoker="get_has_accelerometer"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="818">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasAccelerometer"&gt;"HasAccelerometer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="826">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="820">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_has_ambient_light"
                      invoker="get_has_ambient_light"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="904">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasAmbientLight"&gt;"HasAmbientLight"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="912">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="906">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_has_proximity"
                      invoker="get_has_proximity"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1023">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasProximity"&gt;"HasProximity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1031">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1025">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_light_level"
                      invoker="get_light_level"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="990">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.LightLevel"&gt;"LightLevel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="998">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="992">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_light_level_unit"
                      invoker="get_light_level_unit"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="937">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.LightLevelUnit"&gt;"LightLevelUnit"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_dbus_sensor_proxy_dup_light_level_unit() if on another thread.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="68"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="947">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="939">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_proximity_near"
                      invoker="get_proximity_near"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1056">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.ProximityNear"&gt;"ProximityNear"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1064">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1058">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_claim_accelerometer">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="596">Handler for the #PhoshDBusSensorProxy::handle-claim-accelerometer signal.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_claim_light">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="597">Handler for the #PhoshDBusSensorProxy::handle-claim-light signal.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_claim_proximity">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="598">Handler for the #PhoshDBusSensorProxy::handle-claim-proximity signal.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_release_accelerometer">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="599">Handler for the #PhoshDBusSensorProxy::handle-release-accelerometer signal.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_release_light">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="600">Handler for the #PhoshDBusSensorProxy::handle-release-light signal.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_release_proximity">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="601">Handler for the #PhoshDBusSensorProxy::handle-release-proximity signal.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_claim_accelerometer"
              c:identifier="phosh_dbus_sensor_proxy_call_claim_accelerometer"
              glib:finish-func="call_claim_accelerometer_finish"
              glib:sync-func="call_claim_accelerometer_sync">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1089">Asynchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimAccelerometer"&gt;ClaimAccelerometer()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_call_claim_accelerometer_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_call_claim_accelerometer_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1091">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1092">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1093">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1094">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_claim_accelerometer_finish"
              c:identifier="phosh_dbus_sensor_proxy_call_claim_accelerometer_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1119">Finishes an operation started with phosh_dbus_sensor_proxy_call_claim_accelerometer().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="118"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1127">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1121">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1122">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_call_claim_accelerometer().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_claim_accelerometer_sync"
              c:identifier="phosh_dbus_sensor_proxy_call_claim_accelerometer_sync"
              throws="1"
              glib:async-func="call_claim_accelerometer">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1146">Synchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimAccelerometer"&gt;ClaimAccelerometer()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_call_claim_accelerometer() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="123"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1156">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1148">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1149">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_claim_light"
              c:identifier="phosh_dbus_sensor_proxy_call_claim_light"
              glib:finish-func="call_claim_light_finish"
              glib:sync-func="call_claim_light_sync">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1273">Asynchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimLight"&gt;ClaimLight()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_call_claim_light_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_call_claim_light_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1275">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1276">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1277">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1278">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_claim_light_finish"
              c:identifier="phosh_dbus_sensor_proxy_call_claim_light_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1303">Finishes an operation started with phosh_dbus_sensor_proxy_call_claim_light().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="150"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1311">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1305">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1306">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_call_claim_light().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_claim_light_sync"
              c:identifier="phosh_dbus_sensor_proxy_call_claim_light_sync"
              throws="1"
              glib:async-func="call_claim_light">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1330">Synchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimLight"&gt;ClaimLight()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_call_claim_light() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="155"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1340">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1332">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1333">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_claim_proximity"
              c:identifier="phosh_dbus_sensor_proxy_call_claim_proximity"
              glib:finish-func="call_claim_proximity_finish"
              glib:sync-func="call_claim_proximity_sync">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1457">Asynchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimProximity"&gt;ClaimProximity()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_call_claim_proximity_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_call_claim_proximity_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1459">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1460">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1461">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1462">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_claim_proximity_finish"
              c:identifier="phosh_dbus_sensor_proxy_call_claim_proximity_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1487">Finishes an operation started with phosh_dbus_sensor_proxy_call_claim_proximity().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="182"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1495">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1489">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1490">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_call_claim_proximity().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_claim_proximity_sync"
              c:identifier="phosh_dbus_sensor_proxy_call_claim_proximity_sync"
              throws="1"
              glib:async-func="call_claim_proximity">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1514">Synchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimProximity"&gt;ClaimProximity()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_call_claim_proximity() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="187"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1524">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1516">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1517">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_accelerometer"
              c:identifier="phosh_dbus_sensor_proxy_call_release_accelerometer"
              glib:finish-func="call_release_accelerometer_finish"
              glib:sync-func="call_release_accelerometer_sync">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1181">Asynchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseAccelerometer"&gt;ReleaseAccelerometer()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_call_release_accelerometer_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_call_release_accelerometer_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1183">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1184">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1185">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1186">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_accelerometer_finish"
              c:identifier="phosh_dbus_sensor_proxy_call_release_accelerometer_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1211">Finishes an operation started with phosh_dbus_sensor_proxy_call_release_accelerometer().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="134"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1219">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1213">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1214">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_call_release_accelerometer().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_accelerometer_sync"
              c:identifier="phosh_dbus_sensor_proxy_call_release_accelerometer_sync"
              throws="1"
              glib:async-func="call_release_accelerometer">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1238">Synchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseAccelerometer"&gt;ReleaseAccelerometer()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_call_release_accelerometer() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="139"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1248">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1240">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1241">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_light"
              c:identifier="phosh_dbus_sensor_proxy_call_release_light"
              glib:finish-func="call_release_light_finish"
              glib:sync-func="call_release_light_sync">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1365">Asynchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseLight"&gt;ReleaseLight()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_call_release_light_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_call_release_light_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1367">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1368">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1369">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1370">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_light_finish"
              c:identifier="phosh_dbus_sensor_proxy_call_release_light_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1395">Finishes an operation started with phosh_dbus_sensor_proxy_call_release_light().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="166"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1403">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1397">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1398">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_call_release_light().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_light_sync"
              c:identifier="phosh_dbus_sensor_proxy_call_release_light_sync"
              throws="1"
              glib:async-func="call_release_light">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1422">Synchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseLight"&gt;ReleaseLight()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_call_release_light() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="171"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1432">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1424">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1425">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_proximity"
              c:identifier="phosh_dbus_sensor_proxy_call_release_proximity"
              glib:finish-func="call_release_proximity_finish"
              glib:sync-func="call_release_proximity_sync">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1549">Asynchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseProximity"&gt;ReleaseProximity()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_call_release_proximity_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_call_release_proximity_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="192"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1551">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1552">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1553">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1554">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_proximity_finish"
              c:identifier="phosh_dbus_sensor_proxy_call_release_proximity_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1579">Finishes an operation started with phosh_dbus_sensor_proxy_call_release_proximity().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="198"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1587">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1581">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1582">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_call_release_proximity().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_proximity_sync"
              c:identifier="phosh_dbus_sensor_proxy_call_release_proximity_sync"
              throws="1"
              glib:async-func="call_release_proximity">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1606">Synchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseProximity"&gt;ReleaseProximity()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_call_release_proximity() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="203"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1616">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1608">A #PhoshDBusSensorProxyProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1609">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_claim_accelerometer"
              c:identifier="phosh_dbus_sensor_proxy_complete_claim_accelerometer">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1641">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimAccelerometer"&gt;ClaimAccelerometer()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1643">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1644">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_claim_light"
              c:identifier="phosh_dbus_sensor_proxy_complete_claim_light">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1677">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimLight"&gt;ClaimLight()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1679">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1680">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_claim_proximity"
              c:identifier="phosh_dbus_sensor_proxy_complete_claim_proximity">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1713">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimProximity"&gt;ClaimProximity()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1715">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1716">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_release_accelerometer"
              c:identifier="phosh_dbus_sensor_proxy_complete_release_accelerometer">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1659">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseAccelerometer"&gt;ReleaseAccelerometer()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1661">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1662">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_release_light"
              c:identifier="phosh_dbus_sensor_proxy_complete_release_light">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1695">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseLight"&gt;ReleaseLight()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1697">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1698">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_release_proximity"
              c:identifier="phosh_dbus_sensor_proxy_complete_release_proximity">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1731">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseProximity"&gt;ReleaseProximity()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1733">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1734">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_accelerometer_orientation"
              c:identifier="phosh_dbus_sensor_proxy_dup_accelerometer_orientation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="871">Gets a copy of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.AccelerometerOrientation"&gt;"AccelerometerOrientation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="215"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="879">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="873">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_light_level_unit"
              c:identifier="phosh_dbus_sensor_proxy_dup_light_level_unit"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="957">Gets a copy of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.LightLevelUnit"&gt;"LightLevelUnit"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="222"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="965">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="959">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_accelerometer_orientation"
              c:identifier="phosh_dbus_sensor_proxy_get_accelerometer_orientation"
              glib:get-property="accelerometer-orientation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="851">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.AccelerometerOrientation"&gt;"AccelerometerOrientation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_dbus_sensor_proxy_dup_accelerometer_orientation() if on another thread.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="214"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="861">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="853">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_accelerometer"
              c:identifier="phosh_dbus_sensor_proxy_get_has_accelerometer"
              glib:get-property="has-accelerometer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="818">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasAccelerometer"&gt;"HasAccelerometer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="211"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="826">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="820">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_ambient_light"
              c:identifier="phosh_dbus_sensor_proxy_get_has_ambient_light"
              glib:get-property="has-ambient-light"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="904">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasAmbientLight"&gt;"HasAmbientLight"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="912">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="906">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_proximity"
              c:identifier="phosh_dbus_sensor_proxy_get_has_proximity"
              glib:get-property="has-proximity"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1023">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasProximity"&gt;"HasProximity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1031">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1025">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_light_level"
              c:identifier="phosh_dbus_sensor_proxy_get_light_level"
              glib:get-property="light-level"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="990">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.LightLevel"&gt;"LightLevel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="225"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="998">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="992">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_light_level_unit"
              c:identifier="phosh_dbus_sensor_proxy_get_light_level_unit"
              glib:get-property="light-level-unit"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="937">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.LightLevelUnit"&gt;"LightLevelUnit"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_dbus_sensor_proxy_dup_light_level_unit() if on another thread.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="221"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="947">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="939">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_proximity_near"
              c:identifier="phosh_dbus_sensor_proxy_get_proximity_near"
              glib:get-property="proximity-near"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1056">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.ProximityNear"&gt;"ProximityNear"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="1064">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1058">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_accelerometer_orientation"
              c:identifier="phosh_dbus_sensor_proxy_set_accelerometer_orientation"
              glib:set-property="accelerometer-orientation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="889">Sets the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.AccelerometerOrientation"&gt;"AccelerometerOrientation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="216"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="891">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="892">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_accelerometer"
              c:identifier="phosh_dbus_sensor_proxy_set_has_accelerometer"
              glib:set-property="has-accelerometer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="836">Sets the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasAccelerometer"&gt;"HasAccelerometer"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="212"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="838">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="839">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_ambient_light"
              c:identifier="phosh_dbus_sensor_proxy_set_has_ambient_light"
              glib:set-property="has-ambient-light"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="922">Sets the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasAmbientLight"&gt;"HasAmbientLight"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="219"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="924">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="925">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_proximity"
              c:identifier="phosh_dbus_sensor_proxy_set_has_proximity"
              glib:set-property="has-proximity"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1041">Sets the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasProximity"&gt;"HasProximity"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1043">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1044">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_light_level"
              c:identifier="phosh_dbus_sensor_proxy_set_light_level"
              glib:set-property="light-level"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1008">Sets the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.LightLevel"&gt;"LightLevel"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1010">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1011">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_light_level_unit"
              c:identifier="phosh_dbus_sensor_proxy_set_light_level_unit"
              glib:set-property="light-level-unit"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="975">Sets the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.LightLevelUnit"&gt;"LightLevelUnit"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="977">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="978">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proximity_near"
              c:identifier="phosh_dbus_sensor_proxy_set_proximity_near"
              glib:set-property="proximity-near"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1074">Sets the &lt;link linkend="gdbus-property-net-hadess-SensorProxy.ProximityNear"&gt;"ProximityNear"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="232"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1076">A #PhoshDBusSensorProxy.</doc>
            <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1077">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="accelerometer-orientation"
                writable="1"
                transfer-ownership="none"
                setter="set_accelerometer_orientation"
                getter="get_accelerometer_orientation"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="762">Represents the D-Bus property &lt;link linkend="gdbus-property-net-hadess-SensorProxy.AccelerometerOrientation"&gt;"AccelerometerOrientation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="has-accelerometer"
                writable="1"
                transfer-ownership="none"
                setter="set_has_accelerometer"
                getter="get_has_accelerometer"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="753">Represents the D-Bus property &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasAccelerometer"&gt;"HasAccelerometer"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-ambient-light"
                writable="1"
                transfer-ownership="none"
                setter="set_has_ambient_light"
                getter="get_has_ambient_light"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="771">Represents the D-Bus property &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasAmbientLight"&gt;"HasAmbientLight"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-proximity"
                writable="1"
                transfer-ownership="none"
                setter="set_has_proximity"
                getter="get_has_proximity"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="798">Represents the D-Bus property &lt;link linkend="gdbus-property-net-hadess-SensorProxy.HasProximity"&gt;"HasProximity"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="light-level"
                writable="1"
                transfer-ownership="none"
                setter="set_light_level"
                getter="get_light_level"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="789">Represents the D-Bus property &lt;link linkend="gdbus-property-net-hadess-SensorProxy.LightLevel"&gt;"LightLevel"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="light-level-unit"
                writable="1"
                transfer-ownership="none"
                setter="set_light_level_unit"
                getter="get_light_level_unit"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="780">Represents the D-Bus property &lt;link linkend="gdbus-property-net-hadess-SensorProxy.LightLevelUnit"&gt;"LightLevelUnit"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="proximity-near"
                writable="1"
                transfer-ownership="none"
                setter="set_proximity_near"
                getter="get_proximity_near"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="807">Represents the D-Bus property &lt;link linkend="gdbus-property-net-hadess-SensorProxy.ProximityNear"&gt;"ProximityNear"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-claim-accelerometer" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="620">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimAccelerometer"&gt;ClaimAccelerometer()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_sensor_proxy_complete_claim_accelerometer() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="629">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="623">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-claim-light" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="664">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimLight"&gt;ClaimLight()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_sensor_proxy_complete_claim_light() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="673">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="667">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-claim-proximity" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="708">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ClaimProximity"&gt;ClaimProximity()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_sensor_proxy_complete_claim_proximity() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="717">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="711">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-release-accelerometer" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="642">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseAccelerometer"&gt;ReleaseAccelerometer()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_sensor_proxy_complete_release_accelerometer() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="651">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="645">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-release-light" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="686">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseLight"&gt;ReleaseLight()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_sensor_proxy_complete_release_light() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="695">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="689">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-release-proximity" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="730">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-net-hadess-SensorProxy.ReleaseProximity"&gt;ReleaseProximity()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_sensor_proxy_complete_release_proximity() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="739">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="733">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="DBusSensorProxyCompass"
               c:symbol-prefix="dbus_sensor_proxy_compass"
               c:type="PhoshDBusSensorProxyCompass"
               glib:type-name="PhoshDBusSensorProxyCompass"
               glib:get-type="phosh_dbus_sensor_proxy_compass_get_type"
               glib:type-struct="DBusSensorProxyCompassIface">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="2959">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-net-hadess-SensorProxy-Compass.top_of_page"&gt;net.hadess.SensorProxy.Compass&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="368"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_sensor_proxy_compass_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2900">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-net-hadess-SensorProxy-Compass.top_of_page"&gt;net.hadess.SensorProxy.Compass&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="376"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="2905">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_sensor_proxy_compass_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2913">Overrides all #GObject properties in the #PhoshDBusSensorProxyCompass interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="377"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="2921">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2915">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2916">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_compass_heading"
                      invoker="get_compass_heading"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3081">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy-Compass.CompassHeading"&gt;"CompassHeading"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="364"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3089">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3083">A #PhoshDBusSensorProxyCompass.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_has_compass"
                      invoker="get_has_compass"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3048">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy-Compass.HasCompass"&gt;"HasCompass"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="366"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3056">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3050">A #PhoshDBusSensorProxyCompass.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_claim_compass">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2968">Handler for the #PhoshDBusSensorProxyCompass::handle-claim-compass signal.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="356"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_release_compass">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2969">Handler for the #PhoshDBusSensorProxyCompass::handle-release-compass signal.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="360"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_claim_compass"
              c:identifier="phosh_dbus_sensor_proxy_compass_call_claim_compass"
              glib:finish-func="call_claim_compass_finish"
              glib:sync-func="call_claim_compass_sync">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3114">Asynchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy-Compass.ClaimCompass"&gt;ClaimCompass()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_compass_call_claim_compass_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_compass_call_claim_compass_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="392"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3116">A #PhoshDBusSensorProxyCompassProxy.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3117">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3118">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3119">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_claim_compass_finish"
              c:identifier="phosh_dbus_sensor_proxy_compass_call_claim_compass_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3144">Finishes an operation started with phosh_dbus_sensor_proxy_compass_call_claim_compass().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="398"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3152">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3146">A #PhoshDBusSensorProxyCompassProxy.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3147">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_compass_call_claim_compass().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_claim_compass_sync"
              c:identifier="phosh_dbus_sensor_proxy_compass_call_claim_compass_sync"
              throws="1"
              glib:async-func="call_claim_compass">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3171">Synchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy-Compass.ClaimCompass"&gt;ClaimCompass()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_compass_call_claim_compass() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="403"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3181">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3173">A #PhoshDBusSensorProxyCompassProxy.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3174">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_compass"
              c:identifier="phosh_dbus_sensor_proxy_compass_call_release_compass"
              glib:finish-func="call_release_compass_finish"
              glib:sync-func="call_release_compass_sync">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3206">Asynchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy-Compass.ReleaseCompass"&gt;ReleaseCompass()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_compass_call_release_compass_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_compass_call_release_compass_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="408"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3208">A #PhoshDBusSensorProxyCompassProxy.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3209">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3210">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3211">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_compass_finish"
              c:identifier="phosh_dbus_sensor_proxy_compass_call_release_compass_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3236">Finishes an operation started with phosh_dbus_sensor_proxy_compass_call_release_compass().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="414"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3244">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3238">A #PhoshDBusSensorProxyCompassProxy.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3239">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_compass_call_release_compass().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_release_compass_sync"
              c:identifier="phosh_dbus_sensor_proxy_compass_call_release_compass_sync"
              throws="1"
              glib:async-func="call_release_compass">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3263">Synchronously invokes the &lt;link linkend="gdbus-method-net-hadess-SensorProxy-Compass.ReleaseCompass"&gt;ReleaseCompass()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_compass_call_release_compass() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="419"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3273">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3265">A #PhoshDBusSensorProxyCompassProxy.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3266">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_claim_compass"
              c:identifier="phosh_dbus_sensor_proxy_compass_complete_claim_compass">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3298">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-net-hadess-SensorProxy-Compass.ClaimCompass"&gt;ClaimCompass()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="381"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3300">A #PhoshDBusSensorProxyCompass.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3301">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_release_compass"
              c:identifier="phosh_dbus_sensor_proxy_compass_complete_release_compass">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3316">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-net-hadess-SensorProxy-Compass.ReleaseCompass"&gt;ReleaseCompass()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="385"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3318">A #PhoshDBusSensorProxyCompass.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3319">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_compass_heading"
              c:identifier="phosh_dbus_sensor_proxy_compass_get_compass_heading"
              glib:get-property="compass-heading"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3081">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy-Compass.CompassHeading"&gt;"CompassHeading"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="430"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3089">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3083">A #PhoshDBusSensorProxyCompass.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_compass"
              c:identifier="phosh_dbus_sensor_proxy_compass_get_has_compass"
              glib:get-property="has-compass"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3048">Gets the value of the &lt;link linkend="gdbus-property-net-hadess-SensorProxy-Compass.HasCompass"&gt;"HasCompass"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="427"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3056">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3050">A #PhoshDBusSensorProxyCompass.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_compass_heading"
              c:identifier="phosh_dbus_sensor_proxy_compass_set_compass_heading"
              glib:set-property="compass-heading"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3099">Sets the &lt;link linkend="gdbus-property-net-hadess-SensorProxy-Compass.CompassHeading"&gt;"CompassHeading"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="431"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3101">A #PhoshDBusSensorProxyCompass.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3102">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_compass"
              c:identifier="phosh_dbus_sensor_proxy_compass_set_has_compass"
              glib:set-property="has-compass"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3066">Sets the &lt;link linkend="gdbus-property-net-hadess-SensorProxy-Compass.HasCompass"&gt;"HasCompass"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="428"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3068">A #PhoshDBusSensorProxyCompass.</doc>
            <type name="DBusSensorProxyCompass"
                  c:type="PhoshDBusSensorProxyCompass*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3069">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="compass-heading"
                writable="1"
                transfer-ownership="none"
                setter="set_compass_heading"
                getter="get_compass_heading"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3037">Represents the D-Bus property &lt;link linkend="gdbus-property-net-hadess-SensorProxy-Compass.CompassHeading"&gt;"CompassHeading"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="has-compass"
                writable="1"
                transfer-ownership="none"
                setter="set_has_compass"
                getter="get_has_compass"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3028">Represents the D-Bus property &lt;link linkend="gdbus-property-net-hadess-SensorProxy-Compass.HasCompass"&gt;"HasCompass"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-claim-compass" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2983">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-net-hadess-SensorProxy-Compass.ClaimCompass"&gt;ClaimCompass()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_sensor_proxy_compass_complete_claim_compass() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="2992">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2986">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-release-compass" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3005">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-net-hadess-SensorProxy-Compass.ReleaseCompass"&gt;ReleaseCompass()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_sensor_proxy_compass_complete_release_compass() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3014">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3008">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DBusSensorProxyCompassIface"
            c:type="PhoshDBusSensorProxyCompassIface"
            glib:is-gtype-struct-for="DBusSensorProxyCompass">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="2965">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-net-hadess-SensorProxy-Compass.top_of_page"&gt;net.hadess.SensorProxy.Compass&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="368"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2967">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_claim_compass">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2968">Handler for the #PhoshDBusSensorProxyCompass::handle-claim-compass signal.</doc>
        <callback name="handle_claim_compass">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="356"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSensorProxyCompass"
                    c:type="PhoshDBusSensorProxyCompass*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_release_compass">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2969">Handler for the #PhoshDBusSensorProxyCompass::handle-release-compass signal.</doc>
        <callback name="handle_release_compass">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="360"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSensorProxyCompass"
                    c:type="PhoshDBusSensorProxyCompass*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_compass_heading">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2970">Getter for the #PhoshDBusSensorProxyCompass:compass-heading property.</doc>
        <callback name="get_compass_heading">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="364"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3089">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/iio-sensor-proxy-dbus.c"
                   line="3083">A #PhoshDBusSensorProxyCompass.</doc>
              <type name="DBusSensorProxyCompass"
                    c:type="PhoshDBusSensorProxyCompass*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_has_compass">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2971">Getter for the #PhoshDBusSensorProxyCompass:has-compass property.</doc>
        <callback name="get_has_compass">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="366"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3056">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/iio-sensor-proxy-dbus.c"
                   line="3050">A #PhoshDBusSensorProxyCompass.</doc>
              <type name="DBusSensorProxyCompass"
                    c:type="PhoshDBusSensorProxyCompass*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusSensorProxyCompassProxy"
           c:symbol-prefix="dbus_sensor_proxy_compass_proxy"
           c:type="PhoshDBusSensorProxyCompassProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusSensorProxyCompassProxy"
           glib:get-type="phosh_dbus_sensor_proxy_compass_proxy_get_type"
           glib:type-struct="DBusSensorProxyCompassProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="3336">The #PhoshDBusSensorProxyCompassProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="457"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusSensorProxyCompass"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_sensor_proxy_compass_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3612">Finishes an operation started with phosh_dbus_sensor_proxy_compass_proxy_new().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="473"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3619">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSensorProxyCompassProxy"
                c:type="PhoshDBusSensorProxyCompass*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3614">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_compass_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_sensor_proxy_compass_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3702">Finishes an operation started with phosh_dbus_sensor_proxy_compass_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="492"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3709">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSensorProxyCompassProxy"
                c:type="PhoshDBusSensorProxyCompass*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3704">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_compass_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_sensor_proxy_compass_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3727">Like phosh_dbus_sensor_proxy_compass_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_compass_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="495"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3742">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSensorProxyCompassProxy"
                c:type="PhoshDBusSensorProxyCompass*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3729">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3730">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3731">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3732">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3733">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_sensor_proxy_compass_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3637">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-net-hadess-SensorProxy-Compass.top_of_page"&gt;net.hadess.SensorProxy.Compass&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_compass_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="476"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="3652">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSensorProxyCompassProxy"
                c:type="PhoshDBusSensorProxyCompass*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3639">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3640">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3641">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3642">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3643">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_sensor_proxy_compass_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3582">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-net-hadess-SensorProxy-Compass.top_of_page"&gt;net.hadess.SensorProxy.Compass&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_compass_proxy_new_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_compass_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="465"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3584">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3585">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3586">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3587">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3588">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3589">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3590">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_sensor_proxy_compass_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3672">Like phosh_dbus_sensor_proxy_compass_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_compass_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_compass_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="484"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3674">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3675">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3676">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3677">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3678">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3679">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="3680">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusSensorProxyCompassProxyPrivate"
              c:type="PhoshDBusSensorProxyCompassProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusSensorProxyCompassProxyClass"
            c:type="PhoshDBusSensorProxyCompassProxyClass"
            glib:is-gtype-struct-for="DBusSensorProxyCompassProxy">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="3342">Class structure for #PhoshDBusSensorProxyCompassProxy.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="457"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3344">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusSensorProxyCompassProxyPrivate"
            c:type="PhoshDBusSensorProxyCompassProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="445"/>
    </record>
    <class name="DBusSensorProxyCompassSkeleton"
           c:symbol-prefix="dbus_sensor_proxy_compass_skeleton"
           c:type="PhoshDBusSensorProxyCompassSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusSensorProxyCompassSkeleton"
           glib:get-type="phosh_dbus_sensor_proxy_compass_skeleton_get_type"
           glib:type-struct="DBusSensorProxyCompassSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="3764">The #PhoshDBusSensorProxyCompassSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="527"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusSensorProxyCompass"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_sensor_proxy_compass_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="4230">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-net-hadess-SensorProxy-Compass.top_of_page"&gt;net.hadess.SensorProxy.Compass&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="535"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="4235">The skeleton object.</doc>
          <type name="DBusSensorProxyCompassSkeleton"
                c:type="PhoshDBusSensorProxyCompass*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusSensorProxyCompassSkeletonPrivate"
              c:type="PhoshDBusSensorProxyCompassSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusSensorProxyCompassSkeletonClass"
            c:type="PhoshDBusSensorProxyCompassSkeletonClass"
            glib:is-gtype-struct-for="DBusSensorProxyCompassSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="3770">Class structure for #PhoshDBusSensorProxyCompassSkeleton.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="527"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="3772">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusSensorProxyCompassSkeletonPrivate"
            c:type="PhoshDBusSensorProxyCompassSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="515"/>
    </record>
    <record name="DBusSensorProxyIface"
            c:type="PhoshDBusSensorProxyIface"
            glib:is-gtype-struct-for="DBusSensorProxy">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="593">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-net-hadess-SensorProxy.top_of_page"&gt;net.hadess.SensorProxy&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="72"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="595">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_claim_accelerometer">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="596">Handler for the #PhoshDBusSensorProxy::handle-claim-accelerometer signal.</doc>
        <callback name="handle_claim_accelerometer">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_claim_light">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="597">Handler for the #PhoshDBusSensorProxy::handle-claim-light signal.</doc>
        <callback name="handle_claim_light">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="38"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_claim_proximity">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="598">Handler for the #PhoshDBusSensorProxy::handle-claim-proximity signal.</doc>
        <callback name="handle_claim_proximity">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_release_accelerometer">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="599">Handler for the #PhoshDBusSensorProxy::handle-release-accelerometer signal.</doc>
        <callback name="handle_release_accelerometer">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_release_light">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="600">Handler for the #PhoshDBusSensorProxy::handle-release-light signal.</doc>
        <callback name="handle_release_light">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_release_proximity">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="601">Handler for the #PhoshDBusSensorProxy::handle-release-proximity signal.</doc>
        <callback name="handle_release_proximity">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="54"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_accelerometer_orientation">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="602">Getter for the #PhoshDBusSensorProxy:accelerometer-orientation property.</doc>
        <callback name="get_accelerometer_orientation">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="58"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="861">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/iio-sensor-proxy-dbus.c"
                   line="853">A #PhoshDBusSensorProxy.</doc>
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_has_accelerometer">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="603">Getter for the #PhoshDBusSensorProxy:has-accelerometer property.</doc>
        <callback name="get_has_accelerometer">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="826">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/iio-sensor-proxy-dbus.c"
                   line="820">A #PhoshDBusSensorProxy.</doc>
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_has_ambient_light">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="604">Getter for the #PhoshDBusSensorProxy:has-ambient-light property.</doc>
        <callback name="get_has_ambient_light">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="912">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/iio-sensor-proxy-dbus.c"
                   line="906">A #PhoshDBusSensorProxy.</doc>
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_has_proximity">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="605">Getter for the #PhoshDBusSensorProxy:has-proximity property.</doc>
        <callback name="get_has_proximity">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1031">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/iio-sensor-proxy-dbus.c"
                   line="1025">A #PhoshDBusSensorProxy.</doc>
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_light_level">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="606">Getter for the #PhoshDBusSensorProxy:light-level property.</doc>
        <callback name="get_light_level">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="998">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/iio-sensor-proxy-dbus.c"
                   line="992">A #PhoshDBusSensorProxy.</doc>
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_light_level_unit">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="607">Getter for the #PhoshDBusSensorProxy:light-level-unit property.</doc>
        <callback name="get_light_level_unit">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="68"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="947">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/iio-sensor-proxy-dbus.c"
                   line="939">A #PhoshDBusSensorProxy.</doc>
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_proximity_near">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="608">Getter for the #PhoshDBusSensorProxy:proximity-near property.</doc>
        <callback name="get_proximity_near">
          <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="1064">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/iio-sensor-proxy-dbus.c"
                   line="1058">A #PhoshDBusSensorProxy.</doc>
              <type name="DBusSensorProxy" c:type="PhoshDBusSensorProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusSensorProxyProxy"
           c:symbol-prefix="dbus_sensor_proxy_proxy"
           c:type="PhoshDBusSensorProxyProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusSensorProxyProxy"
           glib:get-type="phosh_dbus_sensor_proxy_proxy_get_type"
           glib:type-struct="DBusSensorProxyProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="1751">The #PhoshDBusSensorProxyProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="258"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusSensorProxy"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_sensor_proxy_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2107">Finishes an operation started with phosh_dbus_sensor_proxy_proxy_new().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="274"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="2114">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSensorProxyProxy" c:type="PhoshDBusSensorProxy*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2109">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_sensor_proxy_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2197">Finishes an operation started with phosh_dbus_sensor_proxy_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="293"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="2204">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSensorProxyProxy" c:type="PhoshDBusSensorProxy*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2199">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_sensor_proxy_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_sensor_proxy_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2222">Like phosh_dbus_sensor_proxy_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="296"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="2237">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSensorProxyProxy" c:type="PhoshDBusSensorProxy*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2224">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2225">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2226">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2227">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2228">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_sensor_proxy_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2132">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-net-hadess-SensorProxy.top_of_page"&gt;net.hadess.SensorProxy&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_sensor_proxy_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="277"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="2147">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSensorProxyProxy" c:type="PhoshDBusSensorProxy*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2134">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2135">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2136">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2137">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2138">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_sensor_proxy_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2077">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-net-hadess-SensorProxy.top_of_page"&gt;net.hadess.SensorProxy&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_proxy_new_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2079">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2080">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2081">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2082">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2083">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2084">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2085">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_sensor_proxy_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2167">Like phosh_dbus_sensor_proxy_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_sensor_proxy_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_sensor_proxy_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="285"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2169">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2170">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2171">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2172">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2173">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2174">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/iio-sensor-proxy-dbus.c"
                 line="2175">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusSensorProxyProxyPrivate"
              c:type="PhoshDBusSensorProxyProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusSensorProxyProxyClass"
            c:type="PhoshDBusSensorProxyProxyClass"
            glib:is-gtype-struct-for="DBusSensorProxyProxy">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="1757">Class structure for #PhoshDBusSensorProxyProxy.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="258"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="1759">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusSensorProxyProxyPrivate"
            c:type="PhoshDBusSensorProxyProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="246"/>
    </record>
    <class name="DBusSensorProxySkeleton"
           c:symbol-prefix="dbus_sensor_proxy_skeleton"
           c:type="PhoshDBusSensorProxySkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusSensorProxySkeleton"
           glib:get-type="phosh_dbus_sensor_proxy_skeleton_get_type"
           glib:type-struct="DBusSensorProxySkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="2259">The #PhoshDBusSensorProxySkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="328"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusSensorProxy"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_sensor_proxy_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2790">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-net-hadess-SensorProxy.top_of_page"&gt;net.hadess.SensorProxy&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/iio-sensor-proxy-dbus.h"
                         line="336"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="2795">The skeleton object.</doc>
          <type name="DBusSensorProxySkeleton" c:type="PhoshDBusSensorProxy*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusSensorProxySkeletonPrivate"
              c:type="PhoshDBusSensorProxySkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusSensorProxySkeletonClass"
            c:type="PhoshDBusSensorProxySkeletonClass"
            glib:is-gtype-struct-for="DBusSensorProxySkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="2265">Class structure for #PhoshDBusSensorProxySkeleton.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="328"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2267">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusSensorProxySkeletonPrivate"
            c:type="PhoshDBusSensorProxySkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="316"/>
    </record>
    <interface name="DBusSessionManager"
               c:symbol-prefix="dbus_session_manager"
               c:type="PhoshDBusSessionManager"
               glib:type-name="PhoshDBusSessionManager"
               glib:get-type="phosh_dbus_session_manager_get_type"
               glib:type-struct="DBusSessionManagerIface">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-dbus.c"
           line="986">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager.top_of_page"&gt;org.gnome.SessionManager&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/gnome-session-dbus.h" line="86"/>
      <function name="interface_info"
                c:identifier="phosh_dbus_session_manager_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="824">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SessionManager.top_of_page"&gt;org.gnome.SessionManager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="829">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_dbus_session_manager_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="837">Overrides all #GObject properties in the #PhoshDBusSessionManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="845">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="839">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="840">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_session_is_active"
                      invoker="get_session_is_active"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1255">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SessionManager.SessionIsActive"&gt;"SessionIsActive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1263">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1257">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="995">Handler for the #PhoshDBusSessionManager::handle-can-shutdown signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_inhibit">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="996">Handler for the #PhoshDBusSessionManager::handle-inhibit signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_toplevel_xid" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_is_inhibited">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="997">Handler for the #PhoshDBusSessionManager::handle-is-inhibited signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_logout">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="998">Handler for the #PhoshDBusSessionManager::handle-logout signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_reboot">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="999">Handler for the #PhoshDBusSessionManager::handle-reboot signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_register_client">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1000">Handler for the #PhoshDBusSessionManager::handle-register-client signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_client_startup_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1001">Handler for the #PhoshDBusSessionManager::handle-shutdown signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_uninhibit">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1002">Handler for the #PhoshDBusSessionManager::handle-uninhibit signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_inhibit_cookie" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="inhibitor_added">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1004">Handler for the #PhoshDBusSessionManager::inhibitor-added signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="inhibitor_removed">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1005">Handler for the #PhoshDBusSessionManager::inhibitor-removed signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_can_shutdown"
              c:identifier="phosh_dbus_session_manager_call_can_shutdown"
              glib:finish-func="call_can_shutdown_finish"
              glib:sync-func="call_can_shutdown_sync">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1820">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.CanShutdown"&gt;CanShutdown()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_session_manager_call_can_shutdown_finish() to get the result of the operation.

See phosh_dbus_session_manager_call_can_shutdown_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1822">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1823">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1824">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1825">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_shutdown_finish"
              c:identifier="phosh_dbus_session_manager_call_can_shutdown_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1850">Finishes an operation started with phosh_dbus_session_manager_call_can_shutdown().</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="249"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1859">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1852">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="out_unnamed_arg0"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1853">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1854">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_session_manager_call_can_shutdown().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_shutdown_sync"
              c:identifier="phosh_dbus_session_manager_call_can_shutdown_sync"
              throws="1"
              glib:async-func="call_can_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1880">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.CanShutdown"&gt;CanShutdown()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_session_manager_call_can_shutdown() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="255"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1891">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1882">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="out_unnamed_arg0"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1883">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1884">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_inhibit"
              c:identifier="phosh_dbus_session_manager_call_inhibit"
              glib:finish-func="call_inhibit_finish"
              glib:sync-func="call_inhibit_sync">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1600">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Inhibit"&gt;Inhibit()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_session_manager_call_inhibit_finish() to get the result of the operation.

See phosh_dbus_session_manager_call_inhibit_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1602">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1603">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_toplevel_xid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1604">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1605">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1606">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1607">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1608">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1609">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_inhibit_finish"
              c:identifier="phosh_dbus_session_manager_call_inhibit_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1642">Finishes an operation started with phosh_dbus_session_manager_call_inhibit().</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="209"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1651">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1644">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="out_inhibit_cookie"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1645">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1646">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_session_manager_call_inhibit().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_inhibit_sync"
              c:identifier="phosh_dbus_session_manager_call_inhibit_sync"
              throws="1"
              glib:async-func="call_inhibit">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1672">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Inhibit"&gt;Inhibit()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_session_manager_call_inhibit() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="215"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1687">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1674">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1675">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_toplevel_xid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1676">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1677">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1678">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_inhibit_cookie"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1679">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1680">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_is_inhibited"
              c:identifier="phosh_dbus_session_manager_call_is_inhibited"
              glib:finish-func="call_is_inhibited_finish"
              glib:sync-func="call_is_inhibited_sync">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1918">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.IsInhibited"&gt;IsInhibited()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_session_manager_call_is_inhibited_finish() to get the result of the operation.

See phosh_dbus_session_manager_call_is_inhibited_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1920">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1921">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1922">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1923">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1924">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_is_inhibited_finish"
              c:identifier="phosh_dbus_session_manager_call_is_inhibited_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1951">Finishes an operation started with phosh_dbus_session_manager_call_is_inhibited().</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="268"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1960">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1953">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="out_unnamed_arg1"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1954">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1955">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_session_manager_call_is_inhibited().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_is_inhibited_sync"
              c:identifier="phosh_dbus_session_manager_call_is_inhibited_sync"
              throws="1"
              glib:async-func="call_is_inhibited">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1981">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.IsInhibited"&gt;IsInhibited()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_session_manager_call_is_inhibited() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="274"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1993">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1983">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1984">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_unnamed_arg1"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1985">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1986">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout"
              c:identifier="phosh_dbus_session_manager_call_logout"
              glib:finish-func="call_logout_finish"
              glib:sync-func="call_logout_sync">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1318">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Logout"&gt;Logout()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_session_manager_call_logout_finish() to get the result of the operation.

See phosh_dbus_session_manager_call_logout_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1320">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1321">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1322">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1323">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1324">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_finish"
              c:identifier="phosh_dbus_session_manager_call_logout_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1351">Finishes an operation started with phosh_dbus_session_manager_call_logout().</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="156"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1359">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1353">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1354">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_session_manager_call_logout().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_sync"
              c:identifier="phosh_dbus_session_manager_call_logout_sync"
              throws="1"
              glib:async-func="call_logout">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1378">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Logout"&gt;Logout()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_session_manager_call_logout() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="161"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1389">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1380">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1381">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1382">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_reboot"
              c:identifier="phosh_dbus_session_manager_call_reboot"
              glib:finish-func="call_reboot_finish"
              glib:sync-func="call_reboot_sync">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1508">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Reboot"&gt;Reboot()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_session_manager_call_reboot_finish() to get the result of the operation.

See phosh_dbus_session_manager_call_reboot_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1510">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1511">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1512">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1513">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_reboot_finish"
              c:identifier="phosh_dbus_session_manager_call_reboot_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1538">Finishes an operation started with phosh_dbus_session_manager_call_reboot().</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="189"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1546">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1540">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1541">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_session_manager_call_reboot().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_reboot_sync"
              c:identifier="phosh_dbus_session_manager_call_reboot_sync"
              throws="1"
              glib:async-func="call_reboot">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1565">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Reboot"&gt;Reboot()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_session_manager_call_reboot() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="194"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1575">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1567">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1568">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_client"
              c:identifier="phosh_dbus_session_manager_call_register_client"
              glib:finish-func="call_register_client_finish"
              glib:sync-func="call_register_client_sync">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2022">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.RegisterClient"&gt;RegisterClient()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_session_manager_call_register_client_finish() to get the result of the operation.

See phosh_dbus_session_manager_call_register_client_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="281"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2024">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2025">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_client_startup_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2026">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2027">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2028">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2029">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_client_finish"
              c:identifier="phosh_dbus_session_manager_call_register_client_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2058">Finishes an operation started with phosh_dbus_session_manager_call_register_client().</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="289"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="2067">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2060">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="out_client_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2061">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2062">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_session_manager_call_register_client().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_client_sync"
              c:identifier="phosh_dbus_session_manager_call_register_client_sync"
              throws="1"
              glib:async-func="call_register_client">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2088">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.RegisterClient"&gt;RegisterClient()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_session_manager_call_register_client() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="295"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="2101">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2090">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2091">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_client_startup_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2092">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_client_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2093">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2094">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_shutdown"
              c:identifier="phosh_dbus_session_manager_call_shutdown"
              glib:finish-func="call_shutdown_finish"
              glib:sync-func="call_shutdown_sync">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1416">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Shutdown"&gt;Shutdown()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_session_manager_call_shutdown_finish() to get the result of the operation.

See phosh_dbus_session_manager_call_shutdown_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1418">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1419">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1420">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1421">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_shutdown_finish"
              c:identifier="phosh_dbus_session_manager_call_shutdown_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1446">Finishes an operation started with phosh_dbus_session_manager_call_shutdown().</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="173"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1454">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1448">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1449">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_session_manager_call_shutdown().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_shutdown_sync"
              c:identifier="phosh_dbus_session_manager_call_shutdown_sync"
              throws="1"
              glib:async-func="call_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1473">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Shutdown"&gt;Shutdown()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_session_manager_call_shutdown() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="178"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1483">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1475">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1476">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_uninhibit"
              c:identifier="phosh_dbus_session_manager_call_uninhibit"
              glib:finish-func="call_uninhibit_finish"
              glib:sync-func="call_uninhibit_sync">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1722">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Uninhibit"&gt;Uninhibit()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_session_manager_call_uninhibit_finish() to get the result of the operation.

See phosh_dbus_session_manager_call_uninhibit_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1724">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_inhibit_cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1725">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1726">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1727">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1728">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_uninhibit_finish"
              c:identifier="phosh_dbus_session_manager_call_uninhibit_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1755">Finishes an operation started with phosh_dbus_session_manager_call_uninhibit().</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="232"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1763">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1757">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1758">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_session_manager_call_uninhibit().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_uninhibit_sync"
              c:identifier="phosh_dbus_session_manager_call_uninhibit_sync"
              throws="1"
              glib:async-func="call_uninhibit">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1782">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Uninhibit"&gt;Uninhibit()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_dbus_session_manager_call_uninhibit() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="237"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1793">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1784">A #PhoshDBusSessionManagerProxy.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_inhibit_cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1785">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1786">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_shutdown"
              c:identifier="phosh_dbus_session_manager_complete_can_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2225">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-SessionManager.CanShutdown"&gt;CanShutdown()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2227">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2228">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2229">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_inhibit"
              c:identifier="phosh_dbus_session_manager_complete_inhibit">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2186">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Inhibit"&gt;Inhibit()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2188">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2189">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="inhibit_cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2190">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_is_inhibited"
              c:identifier="phosh_dbus_session_manager_complete_is_inhibited">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2246">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-SessionManager.IsInhibited"&gt;IsInhibited()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2248">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2249">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="unnamed_arg1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2250">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_logout"
              c:identifier="phosh_dbus_session_manager_complete_logout">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2132">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Logout"&gt;Logout()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2134">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2135">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_reboot"
              c:identifier="phosh_dbus_session_manager_complete_reboot">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2168">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Reboot"&gt;Reboot()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2170">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2171">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_register_client"
              c:identifier="phosh_dbus_session_manager_complete_register_client">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2267">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-SessionManager.RegisterClient"&gt;RegisterClient()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2269">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2270">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="client_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2271">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_shutdown"
              c:identifier="phosh_dbus_session_manager_complete_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2150">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Shutdown"&gt;Shutdown()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2152">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2153">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_uninhibit"
              c:identifier="phosh_dbus_session_manager_complete_uninhibit">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2207">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Uninhibit"&gt;Uninhibit()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2209">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2210">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_inhibitor_added"
              c:identifier="phosh_dbus_session_manager_emit_inhibitor_added">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1288">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager.InhibitorAdded"&gt;"InhibitorAdded"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1290">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1291">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_inhibitor_removed"
              c:identifier="phosh_dbus_session_manager_emit_inhibitor_removed">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1303">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager.InhibitorRemoved"&gt;"InhibitorRemoved"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1305">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1306">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_session_is_active"
              c:identifier="phosh_dbus_session_manager_get_session_is_active"
              glib:get-property="session-is-active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1255">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SessionManager.SessionIsActive"&gt;"SessionIsActive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="306"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1263">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1257">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_session_is_active"
              c:identifier="phosh_dbus_session_manager_set_session_is_active"
              glib:set-property="session-is-active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1273">Sets the &lt;link linkend="gdbus-property-org-gnome-SessionManager.SessionIsActive"&gt;"SessionIsActive"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="307"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1275">A #PhoshDBusSessionManager.</doc>
            <type name="DBusSessionManager" c:type="PhoshDBusSessionManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1276">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="session-is-active"
                writable="1"
                transfer-ownership="none"
                setter="set_session_is_active"
                getter="get_session_is_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1244">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-SessionManager.SessionIsActive"&gt;"SessionIsActive"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-can-shutdown" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1133">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-SessionManager.CanShutdown"&gt;CanShutdown()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_session_manager_complete_can_shutdown() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1142">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1136">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-inhibit" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1084">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Inhibit"&gt;Inhibit()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_session_manager_complete_inhibit() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1097">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1087">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1088">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_toplevel_xid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1089">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1090">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1091">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-is-inhibited" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1155">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-SessionManager.IsInhibited"&gt;IsInhibited()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_session_manager_complete_is_inhibited() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1165">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1158">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1159">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-logout" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1017">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Logout"&gt;Logout()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_session_manager_complete_logout() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1027">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1020">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1021">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-reboot" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1062">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Reboot"&gt;Reboot()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_session_manager_complete_reboot() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1071">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1065">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-register-client" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1178">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-SessionManager.RegisterClient"&gt;RegisterClient()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_session_manager_complete_register_client() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1189">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1181">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1182">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_client_startup_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1183">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-shutdown" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1040">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Shutdown"&gt;Shutdown()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_session_manager_complete_shutdown() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1049">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1043">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-uninhibit" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1110">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-SessionManager.Uninhibit"&gt;Uninhibit()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_dbus_session_manager_complete_uninhibit() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="1120">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1113">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_inhibit_cookie" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1114">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="inhibitor-added" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1203">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager.InhibitorAdded"&gt;"InhibitorAdded"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1206">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="inhibitor-removed" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1223">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager.InhibitorRemoved"&gt;"InhibitorRemoved"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1226">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DBusSessionManagerIface"
            c:type="PhoshDBusSessionManagerIface"
            glib:is-gtype-struct-for="DBusSessionManager">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-dbus.c"
           line="992">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager.top_of_page"&gt;org.gnome.SessionManager&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/gnome-session-dbus.h" line="86"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="994">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_can_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="995">Handler for the #PhoshDBusSessionManager::handle-can-shutdown signal.</doc>
        <callback name="handle_can_shutdown">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="35"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_inhibit">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="996">Handler for the #PhoshDBusSessionManager::handle-inhibit signal.</doc>
        <callback name="handle_inhibit">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_app_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_toplevel_xid" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_reason" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_flags" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_is_inhibited">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="997">Handler for the #PhoshDBusSessionManager::handle-is-inhibited signal.</doc>
        <callback name="handle_is_inhibited">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_unnamed_arg0" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_logout">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="998">Handler for the #PhoshDBusSessionManager::handle-logout signal.</doc>
        <callback name="handle_logout">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_mode" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_reboot">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="999">Handler for the #PhoshDBusSessionManager::handle-reboot signal.</doc>
        <callback name="handle_reboot">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="57"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_register_client">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1000">Handler for the #PhoshDBusSessionManager::handle-register-client signal.</doc>
        <callback name="handle_register_client">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_app_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_client_startup_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_shutdown">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1001">Handler for the #PhoshDBusSessionManager::handle-shutdown signal.</doc>
        <callback name="handle_shutdown">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_uninhibit">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1002">Handler for the #PhoshDBusSessionManager::handle-uninhibit signal.</doc>
        <callback name="handle_uninhibit">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_inhibit_cookie" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_session_is_active">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1003">Getter for the #PhoshDBusSessionManager:session-is-active property.</doc>
        <callback name="get_session_is_active">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="76"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="1263">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/gnome-session-dbus.c"
                   line="1257">A #PhoshDBusSessionManager.</doc>
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="inhibitor_added">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1004">Handler for the #PhoshDBusSessionManager::inhibitor-added signal.</doc>
        <callback name="inhibitor_added">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
            <parameter name="arg_unnamed_arg0" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="inhibitor_removed">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="1005">Handler for the #PhoshDBusSessionManager::inhibitor-removed signal.</doc>
        <callback name="inhibitor_removed">
          <source-position filename="src/dbus/gnome-session-dbus.h" line="82"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DBusSessionManager"
                    c:type="PhoshDBusSessionManager*"/>
            </parameter>
            <parameter name="arg_unnamed_arg0" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DBusSessionManagerProxy"
           c:symbol-prefix="dbus_session_manager_proxy"
           c:type="PhoshDBusSessionManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshDBusSessionManagerProxy"
           glib:get-type="phosh_dbus_session_manager_proxy_get_type"
           glib:type-struct="DBusSessionManagerProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-dbus.c"
           line="2290">The #PhoshDBusSessionManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/gnome-session-dbus.h" line="333"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusSessionManager"/>
      <constructor name="new_finish"
                   c:identifier="phosh_dbus_session_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2550">Finishes an operation started with phosh_dbus_session_manager_proxy_new().</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="349"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="2557">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSessionManagerProxy"
                c:type="PhoshDBusSessionManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2552">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_session_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_dbus_session_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2640">Finishes an operation started with phosh_dbus_session_manager_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="368"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="2647">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSessionManagerProxy"
                c:type="PhoshDBusSessionManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2642">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_dbus_session_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_dbus_session_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2665">Like phosh_dbus_session_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_dbus_session_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="371"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="2680">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSessionManagerProxy"
                c:type="PhoshDBusSessionManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2667">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2668">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2669">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2670">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2671">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_dbus_session_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2575">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager.top_of_page"&gt;org.gnome.SessionManager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_dbus_session_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="352"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="2590">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DBusSessionManagerProxy"
                c:type="PhoshDBusSessionManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2577">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2578">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2579">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2580">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2581">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_dbus_session_manager_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2520">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager.top_of_page"&gt;org.gnome.SessionManager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_session_manager_proxy_new_finish() to get the result of the operation.

See phosh_dbus_session_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="341"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2522">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2523">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2524">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2525">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2526">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2527">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2528">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_dbus_session_manager_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2610">Like phosh_dbus_session_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_dbus_session_manager_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_dbus_session_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="360"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2612">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2613">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2614">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2615">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2616">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2617">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-dbus.c"
                 line="2618">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusSessionManagerProxyPrivate"
              c:type="PhoshDBusSessionManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="DBusSessionManagerProxyClass"
            c:type="PhoshDBusSessionManagerProxyClass"
            glib:is-gtype-struct-for="DBusSessionManagerProxy">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-dbus.c"
           line="2296">Class structure for #PhoshDBusSessionManagerProxy.</doc>
      <source-position filename="src/dbus/gnome-session-dbus.h" line="333"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2298">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DBusSessionManagerProxyPrivate"
            c:type="PhoshDBusSessionManagerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="321"/>
    </record>
    <class name="DBusSessionManagerSkeleton"
           c:symbol-prefix="dbus_session_manager_skeleton"
           c:type="PhoshDBusSessionManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshDBusSessionManagerSkeleton"
           glib:get-type="phosh_dbus_session_manager_skeleton_get_type"
           glib:type-struct="DBusSessionManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-dbus.c"
           line="2702">The #PhoshDBusSessionManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/gnome-session-dbus.h" line="403"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusSessionManager"/>
      <constructor name="new"
                   c:identifier="phosh_dbus_session_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="3205">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager.top_of_page"&gt;org.gnome.SessionManager&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/gnome-session-dbus.h" line="411"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="3210">The skeleton object.</doc>
          <type name="DBusSessionManagerSkeleton"
                c:type="PhoshDBusSessionManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusSessionManagerSkeletonPrivate"
              c:type="PhoshDBusSessionManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DBusSessionManagerSkeletonClass"
            c:type="PhoshDBusSessionManagerSkeletonClass"
            glib:is-gtype-struct-for="DBusSessionManagerSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-dbus.c"
           line="2708">Class structure for #PhoshDBusSessionManagerSkeleton.</doc>
      <source-position filename="src/dbus/gnome-session-dbus.h" line="403"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="2710">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DBusSessionManagerSkeletonPrivate"
            c:type="PhoshDBusSessionManagerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/gnome-session-dbus.h" line="391"/>
    </record>
    <class name="DockedInfo"
           c:symbol-prefix="docked_info"
           c:type="PhoshDockedInfo"
           parent="StatusIcon"
           glib:type-name="PhoshDockedInfo"
           glib:get-type="phosh_docked_info_get_type"
           glib:type-struct="DockedInfoClass">
      <doc xml:space="preserve"
           filename="src/docked-info.c"
           line="17">A widget to display the docked status

#PhoshDockedInfo displays whether the device is docked</doc>
      <source-position filename="src/docked-info.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_docked_info_new">
        <source-position filename="src/docked-info.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="enabled" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="present" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="DockedInfoClass"
            c:type="PhoshDockedInfoClass"
            glib:is-gtype-struct-for="DockedInfo">
      <source-position filename="src/docked-info.h" line="16"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <class name="DockedManager"
           c:symbol-prefix="docked_manager"
           c:type="PhoshDockedManager"
           parent="GObject.Object"
           glib:type-name="PhoshDockedManager"
           glib:get-type="phosh_docked_manager_get_type"
           glib:type-struct="DockedManagerClass">
      <doc xml:space="preserve"
           filename="src/docked-manager.c"
           line="25">Handles 'docking" the phone to additional hardware

#PhoshDockedManager allows to dock the phone to additional hardware
and performs the necessary configuration changes
(disable OSK, don't maximize windows by default, ...)</doc>
      <source-position filename="src/docked-manager.h" line="17"/>
      <constructor name="new" c:identifier="phosh_docked_manager_new">
        <source-position filename="src/docked-manager.h" line="19"/>
        <return-value transfer-ownership="full">
          <type name="DockedManager" c:type="PhoshDockedManager*"/>
        </return-value>
        <parameters>
          <parameter name="mode_manager" transfer-ownership="none">
            <type name="ModeManager" c:type="PhoshModeManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_can_dock"
              c:identifier="phosh_docked_manager_get_can_dock"
              glib:get-property="can-dock">
        <source-position filename="src/docked-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockedManager" c:type="PhoshDockedManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="phosh_docked_manager_get_enabled"
              glib:get-property="enabled">
        <source-position filename="src/docked-manager.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockedManager" c:type="PhoshDockedManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="phosh_docked_manager_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/docked-manager.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockedManager" c:type="PhoshDockedManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="phosh_docked_manager_set_enabled"
              glib:set-property="enabled">
        <source-position filename="src/docked-manager.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DockedManager" c:type="PhoshDockedManager*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-dock"
                transfer-ownership="none"
                getter="get_can_dock"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_enabled"
                getter="get_enabled"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="phone-undocked-symbolic">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mode-manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="ModeManager"/>
      </property>
    </class>
    <record name="DockedManagerClass"
            c:type="PhoshDockedManagerClass"
            glib:is-gtype-struct-for="DockedManager">
      <source-position filename="src/docked-manager.h" line="17"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="DragSurface"
           c:symbol-prefix="drag_surface"
           c:type="PhoshDragSurface"
           parent="LayerSurface"
           glib:type-name="PhoshDragSurface"
           glib:get-type="phosh_drag_surface_get_type"
           glib:type-struct="DragSurfaceClass">
      <doc xml:space="preserve"
           filename="src/drag-surface.c"
           line="16">A drgable layer surface

A layer surface that can be dragged in ne direction via gestures.

See #PhoshTopPanel for a usage example. Note that you need to
update folded/unfolded margins on the #PhoshLayerSurface's
`configured` event to adjust it to the proper sizes.</doc>
      <source-position filename="src/drag-surface.h" line="56"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="dragged">
        <doc xml:space="preserve"
             filename="src/drag-surface.h"
             line="50">invoked when a surface is being dragged</doc>
        <source-position filename="src/drag-surface.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
          <parameter name="margin" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_drag_handle"
              c:identifier="phosh_drag_surface_get_drag_handle"
              glib:get-property="drag-handle">
        <source-position filename="src/drag-surface.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drag_mode"
              c:identifier="phosh_drag_surface_get_drag_mode"
              glib:get-property="drag-mode">
        <source-position filename="src/drag-surface.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="DragSurfaceDragMode" c:type="PhoshDragSurfaceDragMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drag_state"
              c:identifier="phosh_drag_surface_get_drag_state"
              glib:get-property="drag-state">
        <source-position filename="src/drag-surface.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="DragSurfaceState" c:type="PhoshDragSurfaceState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_threshold"
              c:identifier="phosh_drag_surface_get_threshold"
              glib:get-property="threshold">
        <source-position filename="src/drag-surface.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_drag_handle"
              c:identifier="phosh_drag_surface_set_drag_handle"
              glib:set-property="drag-handle">
        <source-position filename="src/drag-surface.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drag_mode"
              c:identifier="phosh_drag_surface_set_drag_mode"
              glib:set-property="drag-mode">
        <source-position filename="src/drag-surface.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="DragSurfaceDragMode"
                  c:type="PhoshDragSurfaceDragMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drag_state"
              c:identifier="phosh_drag_surface_set_drag_state">
        <source-position filename="src/drag-surface.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="DragSurfaceState" c:type="PhoshDragSurfaceState"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_exclusive"
              c:identifier="phosh_drag_surface_set_exclusive"
              glib:set-property="exclusive">
        <source-position filename="src/drag-surface.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
          <parameter name="exclusive" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_margin" c:identifier="phosh_drag_surface_set_margin">
        <source-position filename="src/drag-surface.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
          <parameter name="margin_folded" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="margin_unfolded" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_threshold"
              c:identifier="phosh_drag_surface_set_threshold"
              glib:set-property="threshold">
        <source-position filename="src/drag-surface.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DragSurface" c:type="PhoshDragSurface*"/>
          </instance-parameter>
          <parameter name="threshold" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <property name="drag-handle"
                writable="1"
                transfer-ownership="none"
                setter="set_drag_handle"
                getter="get_drag_handle"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="drag-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_drag_mode"
                getter="get_drag_mode"
                default-value="PHOSH_DRAG_SURFACE_DRAG_MODE_FULL">
        <type name="DragSurfaceDragMode"/>
      </property>
      <property name="drag-state"
                transfer-ownership="none"
                getter="get_drag_state"
                default-value="PHOSH_DRAG_SURFACE_STATE_FOLDED">
        <type name="DragSurfaceState"/>
      </property>
      <property name="exclusive"
                writable="1"
                transfer-ownership="none"
                setter="set_exclusive"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="layer-shell-effects"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="margin-folded"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="margin-unfolded"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="threshold"
                writable="1"
                transfer-ownership="none"
                setter="set_threshold"
                getter="get_threshold"
                default-value="1.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance">
        <type name="LayerSurface" c:type="PhoshLayerSurface"/>
      </field>
      <glib:signal name="dragged" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DragSurfaceClass"
            c:type="PhoshDragSurfaceClass"
            glib:is-gtype-struct-for="DragSurface">
      <source-position filename="src/drag-surface.h" line="56"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/drag-surface.h"
             line="49">The parent class</doc>
        <type name="LayerSurfaceClass" c:type="PhoshLayerSurfaceClass"/>
      </field>
      <field name="dragged">
        <doc xml:space="preserve"
             filename="src/drag-surface.h"
             line="50">invoked when a surface is being dragged</doc>
        <callback name="dragged">
          <source-position filename="src/drag-surface.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DragSurface" c:type="PhoshDragSurface*"/>
            </parameter>
            <parameter name="margin" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="DragSurfaceDragMode"
                 glib:type-name="PhoshDragSurfaceDragMode"
                 glib:get-type="phosh_drag_surface_drag_mode_get_type"
                 c:type="PhoshDragSurfaceDragMode">
      <doc xml:space="preserve"
           filename="src/drag-surface.h"
           line="32">The drag mode of the drag surface. Specifies how and where
the surface is draggable.</doc>
      <member name="full"
              value="0"
              c:identifier="PHOSH_DRAG_SURFACE_DRAG_MODE_FULL"
              glib:nick="full"
              glib:name="PHOSH_DRAG_SURFACE_DRAG_MODE_FULL">
        <doc xml:space="preserve"
             filename="src/drag-surface.h"
             line="34">Full surface is draggable</doc>
      </member>
      <member name="handle"
              value="1"
              c:identifier="PHOSH_DRAG_SURFACE_DRAG_MODE_HANDLE"
              glib:nick="handle"
              glib:name="PHOSH_DRAG_SURFACE_DRAG_MODE_HANDLE">
        <doc xml:space="preserve"
             filename="src/drag-surface.h"
             line="35">Handle area is draggable.</doc>
      </member>
      <member name="none"
              value="2"
              c:identifier="PHOSH_DRAG_SURFACE_DRAG_MODE_NONE"
              glib:nick="none"
              glib:name="PHOSH_DRAG_SURFACE_DRAG_MODE_NONE">
        <doc xml:space="preserve"
             filename="src/drag-surface.h"
             line="36">Surface is not draggable.</doc>
      </member>
    </enumeration>
    <enumeration name="DragSurfaceState"
                 glib:type-name="PhoshDragSurfaceState"
                 glib:get-type="phosh_drag_surface_state_get_type"
                 c:type="PhoshDragSurfaceState">
      <doc xml:space="preserve"
           filename="src/drag-surface.h"
           line="18">The state of the drag surface.</doc>
      <member name="folded"
              value="0"
              c:identifier="PHOSH_DRAG_SURFACE_STATE_FOLDED"
              glib:nick="folded"
              glib:name="PHOSH_DRAG_SURFACE_STATE_FOLDED">
        <doc xml:space="preserve"
             filename="src/drag-surface.h"
             line="20">Surface is folded.</doc>
      </member>
      <member name="unfolded"
              value="1"
              c:identifier="PHOSH_DRAG_SURFACE_STATE_UNFOLDED"
              glib:nick="unfolded"
              glib:name="PHOSH_DRAG_SURFACE_STATE_UNFOLDED">
        <doc xml:space="preserve"
             filename="src/drag-surface.h"
             line="21">Surface is unfolded.</doc>
      </member>
      <member name="dragged"
              value="2"
              c:identifier="PHOSH_DRAG_SURFACE_STATE_DRAGGED"
              glib:nick="dragged"
              glib:name="PHOSH_DRAG_SURFACE_STATE_DRAGGED">
        <doc xml:space="preserve"
             filename="src/drag-surface.h"
             line="22">Surface is being dragged.</doc>
      </member>
    </enumeration>
    <function-macro name="EMERGENCY_CALLS"
                    c:identifier="PHOSH_EMERGENCY_CALLS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EMERGENCY_CALLS_GET_IFACE"
                    c:identifier="PHOSH_EMERGENCY_CALLS_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EMERGENCY_CALLS_PROXY"
                    c:identifier="PHOSH_EMERGENCY_CALLS_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="118"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EMERGENCY_CALLS_PROXY_CLASS"
                    c:identifier="PHOSH_EMERGENCY_CALLS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="119"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EMERGENCY_CALLS_PROXY_GET_CLASS"
                    c:identifier="PHOSH_EMERGENCY_CALLS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="120"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EMERGENCY_CALLS_SKELETON"
                    c:identifier="PHOSH_EMERGENCY_CALLS_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="188"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EMERGENCY_CALLS_SKELETON_CLASS"
                    c:identifier="PHOSH_EMERGENCY_CALLS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="189"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EMERGENCY_CALLS_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_EMERGENCY_CALLS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="190"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="EXTENSION_POINT_LOCKSCREEN_WIDGET"
              value="phosh-lockscreen-widget"
              c:type="PHOSH_EXTENSION_POINT_LOCKSCREEN_WIDGET">
      <source-position filename="src/plugin-loader.h" line="16"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EXTENSION_POINT_QUICK_SETTING_WIDGET"
              value="phosh-quick-setting-widget"
              c:type="PHOSH_EXTENSION_POINT_QUICK_SETTING_WIDGET">
      <source-position filename="src/plugin-loader.h" line="17"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <interface name="EmergencyCalls"
               c:symbol-prefix="emergency_calls"
               c:type="PhoshEmergencyCalls"
               glib:type-name="PhoshEmergencyCalls"
               glib:get-type="phosh_emergency_calls_get_type"
               glib:type-struct="EmergencyCallsIface">
      <doc xml:space="preserve"
           filename="src/dbus/calls-emergency-dbus.c"
           line="478">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-EmergencyCalls.top_of_page"&gt;org.gnome.Calls.EmergencyCalls&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="46"/>
      <function name="interface_info"
                c:identifier="phosh_emergency_calls_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="408">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Calls-EmergencyCalls.top_of_page"&gt;org.gnome.Calls.EmergencyCalls&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="413">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_emergency_calls_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="421">Overrides all #GObject properties in the #PhoshEmergencyCalls interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="429">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="423">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="424">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="emergency_numbers_changed">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="489">Handler for the #PhoshEmergencyCalls::emergency-numbers-changed signal.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_call_emergency_contact">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="487">Handler for the #PhoshEmergencyCalls::handle-call-emergency-contact signal.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_emergency_contacts">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="488">Handler for the #PhoshEmergencyCalls::handle-get-emergency-contacts signal.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_call_emergency_contact"
              c:identifier="phosh_emergency_calls_call_call_emergency_contact"
              glib:finish-func="call_call_emergency_contact_finish"
              glib:sync-func="call_call_emergency_contact_sync">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="679">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Calls-EmergencyCalls.CallEmergencyContact"&gt;CallEmergencyContact()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_emergency_calls_call_call_emergency_contact_finish() to get the result of the operation.

See phosh_emergency_calls_call_call_emergency_contact_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="681">A #PhoshEmergencyCallsProxy.</doc>
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="682">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="683">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="684">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="685">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_call_emergency_contact_finish"
              c:identifier="phosh_emergency_calls_call_call_emergency_contact_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="712">Finishes an operation started with phosh_emergency_calls_call_call_emergency_contact().</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h"
                         line="102"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="720">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="714">A #PhoshEmergencyCallsProxy.</doc>
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="715">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_emergency_calls_call_call_emergency_contact().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_call_emergency_contact_sync"
              c:identifier="phosh_emergency_calls_call_call_emergency_contact_sync"
              throws="1"
              glib:async-func="call_call_emergency_contact">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="739">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Calls-EmergencyCalls.CallEmergencyContact"&gt;CallEmergencyContact()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_emergency_calls_call_call_emergency_contact() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h"
                         line="107"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="750">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="741">A #PhoshEmergencyCallsProxy.</doc>
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="742">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="743">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_emergency_contacts"
              c:identifier="phosh_emergency_calls_call_get_emergency_contacts"
              glib:finish-func="call_get_emergency_contacts_finish"
              glib:sync-func="call_get_emergency_contacts_sync">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="581">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Calls-EmergencyCalls.GetEmergencyContacts"&gt;GetEmergencyContacts()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_emergency_calls_call_get_emergency_contacts_finish() to get the result of the operation.

See phosh_emergency_calls_call_get_emergency_contacts_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="583">A #PhoshEmergencyCallsProxy.</doc>
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="584">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="585">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="586">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_emergency_contacts_finish"
              c:identifier="phosh_emergency_calls_call_get_emergency_contacts_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="611">Finishes an operation started with phosh_emergency_calls_call_get_emergency_contacts().</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="83"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="620">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="613">A #PhoshEmergencyCallsProxy.</doc>
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
          <parameter name="out_contacts"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="614">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="615">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_emergency_calls_call_get_emergency_contacts().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_emergency_contacts_sync"
              c:identifier="phosh_emergency_calls_call_get_emergency_contacts_sync"
              throws="1"
              glib:async-func="call_get_emergency_contacts">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="641">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Calls-EmergencyCalls.GetEmergencyContacts"&gt;GetEmergencyContacts()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_emergency_calls_call_get_emergency_contacts() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="89"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="652">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="643">A #PhoshEmergencyCallsProxy.</doc>
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
          <parameter name="out_contacts"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="644">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="645">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_call_emergency_contact"
              c:identifier="phosh_emergency_calls_complete_call_emergency_contact">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="798">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Calls-EmergencyCalls.CallEmergencyContact"&gt;CallEmergencyContact()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="800">A #PhoshEmergencyCalls.</doc>
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="801">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_emergency_contacts"
              c:identifier="phosh_emergency_calls_complete_get_emergency_contacts">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="777">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Calls-EmergencyCalls.GetEmergencyContacts"&gt;GetEmergencyContacts()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="779">A #PhoshEmergencyCalls.</doc>
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="780">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="781">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_emergency_numbers_changed"
              c:identifier="phosh_emergency_calls_emit_emergency_numbers_changed">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="568">Emits the &lt;link linkend="gdbus-signal-org-gnome-Calls-EmergencyCalls.EmergencyNumbersChanged"&gt;"EmergencyNumbersChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="570">A #PhoshEmergencyCalls.</doc>
            <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="emergency-numbers-changed" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="547">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-Calls-EmergencyCalls.EmergencyNumbersChanged"&gt;"EmergencyNumbersChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="handle-call-emergency-contact" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="523">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Calls-EmergencyCalls.CallEmergencyContact"&gt;CallEmergencyContact()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_emergency_calls_complete_call_emergency_contact() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="533">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="526">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="527">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-emergency-contacts" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="501">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Calls-EmergencyCalls.GetEmergencyContacts"&gt;GetEmergencyContacts()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_emergency_calls_complete_get_emergency_contacts() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="510">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="504">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="EmergencyCallsIface"
            c:type="PhoshEmergencyCallsIface"
            glib:is-gtype-struct-for="EmergencyCalls">
      <doc xml:space="preserve"
           filename="src/dbus/calls-emergency-dbus.c"
           line="484">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-EmergencyCalls.top_of_page"&gt;org.gnome.Calls.EmergencyCalls&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="46"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="486">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_call_emergency_contact">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="487">Handler for the #PhoshEmergencyCalls::handle-call-emergency-contact signal.</doc>
        <callback name="handle_call_emergency_contact">
          <source-position filename="src/dbus/calls-emergency-dbus.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_emergency_contacts">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="488">Handler for the #PhoshEmergencyCalls::handle-get-emergency-contacts signal.</doc>
        <callback name="handle_get_emergency_contacts">
          <source-position filename="src/dbus/calls-emergency-dbus.h"
                           line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="emergency_numbers_changed">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="489">Handler for the #PhoshEmergencyCalls::emergency-numbers-changed signal.</doc>
        <callback name="emergency_numbers_changed">
          <source-position filename="src/dbus/calls-emergency-dbus.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="EmergencyCalls" c:type="PhoshEmergencyCalls*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EmergencyCallsManager"
           c:symbol-prefix="emergency_calls_manager"
           c:type="PhoshEmergencyCallsManager"
           parent="Manager"
           glib:type-name="PhoshEmergencyCallsManager"
           glib:get-type="phosh_emergency_calls_manager_get_type"
           glib:type-struct="EmergencyCallsManagerClass">
      <doc xml:space="preserve"
           filename="src/emergency-calls-manager.c"
           line="25">Manages emergency calls and contacts. Contacts are kept in
a GListStore containing the emergency contacts form the calls API.

#PhoshEmergencyCallsManager provides a GListStore containing the
emergency contacts fetched from the calls API at `org.gnome.Calls`.
It is designed to be used with [type@EmergencyContactRow] and the
`gtk_list_box_bind_model` function.

#PhoshEmergencyCallsManager also provides the [method@EmergencyCallsManager.call] method
to call an emergency contact.
If you are calling an emergency contact it is advised
that you use `phosh_emergency_calls_call` or `phosh_emergency_calls_row_call` instead of
calling `phosh_emergency_calls_manager_call` directly.</doc>
      <source-position filename="src/emergency-calls-manager.h" line="21"/>
      <constructor name="new" c:identifier="phosh_emergency_calls_manager_new">
        <source-position filename="src/emergency-calls-manager.h" line="23"/>
        <return-value transfer-ownership="full">
          <type name="EmergencyCallsManager"
                c:type="PhoshEmergencyCallsManager*"/>
        </return-value>
      </constructor>
      <method name="call" c:identifier="phosh_emergency_calls_manager_call">
        <doc xml:space="preserve"
             filename="src/emergency-calls-manager.c"
             line="435">Starts an emergency call with the specified id.</doc>
        <source-position filename="src/emergency-calls-manager.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-calls-manager.c"
                 line="437">The EmergencyCallsManager to use to make the call.</doc>
            <type name="EmergencyCallsManager"
                  c:type="PhoshEmergencyCallsManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-calls-manager.c"
                 line="438">The id that identifies the emergency contact.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_list_store"
              c:identifier="phosh_emergency_calls_manager_get_list_store">
        <doc xml:space="preserve"
             filename="src/emergency-calls-manager.c"
             line="418">Gets the `GListStore` that contains the currently valid emergency contacts.</doc>
        <source-position filename="src/emergency-calls-manager.h" line="24"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/emergency-calls-manager.c"
               line="424">List of emergency contacts.</doc>
          <type name="Gio.ListStore" c:type="GListStore*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-calls-manager.c"
                 line="420">The #PhoshEmergencyCallsManager</doc>
            <type name="EmergencyCallsManager"
                  c:type="PhoshEmergencyCallsManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="emergency-contacts" transfer-ownership="none">
        <type name="Gio.ListStore"/>
      </property>
      <glib:signal name="dial-error" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EmergencyCallsManagerClass"
            c:type="PhoshEmergencyCallsManagerClass"
            glib:is-gtype-struct-for="EmergencyCallsManager">
      <source-position filename="src/emergency-calls-manager.h" line="21"/>
      <field name="parent_class">
        <type name="ManagerClass" c:type="PhoshManagerClass"/>
      </field>
    </record>
    <class name="EmergencyCallsProxy"
           c:symbol-prefix="emergency_calls_proxy"
           c:type="PhoshEmergencyCallsProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshEmergencyCallsProxy"
           glib:get-type="phosh_emergency_calls_proxy_get_type"
           glib:type-struct="EmergencyCallsProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/calls-emergency-dbus.c"
           line="818">The #PhoshEmergencyCallsProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="138"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="EmergencyCalls"/>
      <constructor name="new_finish"
                   c:identifier="phosh_emergency_calls_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="1009">Finishes an operation started with phosh_emergency_calls_proxy_new().</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h"
                         line="154"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="1016">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EmergencyCallsProxy" c:type="PhoshEmergencyCalls*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1011">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_emergency_calls_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_emergency_calls_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="1099">Finishes an operation started with phosh_emergency_calls_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h"
                         line="173"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="1106">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EmergencyCallsProxy" c:type="PhoshEmergencyCalls*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1101">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_emergency_calls_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_emergency_calls_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="1124">Like phosh_emergency_calls_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_emergency_calls_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h"
                         line="176"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="1139">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EmergencyCallsProxy" c:type="PhoshEmergencyCalls*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1126">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1127">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1128">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1129">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1130">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_emergency_calls_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="1034">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-EmergencyCalls.top_of_page"&gt;org.gnome.Calls.EmergencyCalls&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_emergency_calls_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h"
                         line="157"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="1049">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EmergencyCallsProxy" c:type="PhoshEmergencyCalls*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1036">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1037">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1038">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1039">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1040">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_emergency_calls_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="979">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-EmergencyCalls.top_of_page"&gt;org.gnome.Calls.EmergencyCalls&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_emergency_calls_proxy_new_finish() to get the result of the operation.

See phosh_emergency_calls_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h"
                         line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="981">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="982">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="983">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="984">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="985">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="986">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="987">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_emergency_calls_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="1069">Like phosh_emergency_calls_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_emergency_calls_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_emergency_calls_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h"
                         line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1071">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1072">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1073">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1074">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1075">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1076">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/calls-emergency-dbus.c"
                 line="1077">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EmergencyCallsProxyPrivate"
              c:type="PhoshEmergencyCallsProxyPrivate*"/>
      </field>
    </class>
    <record name="EmergencyCallsProxyClass"
            c:type="PhoshEmergencyCallsProxyClass"
            glib:is-gtype-struct-for="EmergencyCallsProxy">
      <doc xml:space="preserve"
           filename="src/dbus/calls-emergency-dbus.c"
           line="824">Class structure for #PhoshEmergencyCallsProxy.</doc>
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="138"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="826">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="EmergencyCallsProxyPrivate"
            c:type="PhoshEmergencyCallsProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="126"/>
    </record>
    <class name="EmergencyCallsSkeleton"
           c:symbol-prefix="emergency_calls_skeleton"
           c:type="PhoshEmergencyCallsSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshEmergencyCallsSkeleton"
           glib:get-type="phosh_emergency_calls_skeleton_get_type"
           glib:type-struct="EmergencyCallsSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/calls-emergency-dbus.c"
           line="1161">The #PhoshEmergencyCallsSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="208"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="EmergencyCalls"/>
      <constructor name="new"
                   c:identifier="phosh_emergency_calls_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="1455">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Calls-EmergencyCalls.top_of_page"&gt;org.gnome.Calls.EmergencyCalls&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/calls-emergency-dbus.h"
                         line="216"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="1460">The skeleton object.</doc>
          <type name="EmergencyCallsSkeleton" c:type="PhoshEmergencyCalls*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EmergencyCallsSkeletonPrivate"
              c:type="PhoshEmergencyCallsSkeletonPrivate*"/>
      </field>
    </class>
    <record name="EmergencyCallsSkeletonClass"
            c:type="PhoshEmergencyCallsSkeletonClass"
            glib:is-gtype-struct-for="EmergencyCallsSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/calls-emergency-dbus.c"
           line="1167">Class structure for #PhoshEmergencyCallsSkeleton.</doc>
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="208"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="1169">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="EmergencyCallsSkeletonPrivate"
            c:type="PhoshEmergencyCallsSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="196"/>
    </record>
    <class name="EmergencyContact"
           c:symbol-prefix="emergency_contact"
           c:type="PhoshEmergencyContact"
           parent="GObject.Object"
           glib:type-name="PhoshEmergencyContact"
           glib:get-type="phosh_emergency_contact_get_type"
           glib:type-struct="EmergencyContactClass">
      <doc xml:space="preserve"
           filename="src/emergency-contact.c"
           line="25">id: The id that is given to this emergency contact by the calls DBus API. Eg `+123 123 123`
name: The name of person in this emergency contact. Eg Bob
source: An integer identifying the source of the emergency contact. Eg SIM card or user entered.
additional_properties: Any other information, given by the calls DBus API. Format is `a{sv}`

#PhoshEmergencyContact holds data about an emergency contact and is used to build #PhoshEmergencyContactRow.

A GListStore of #PhoshEmergencyContact is provided by #PhoshEmergencyContactManager.</doc>
      <source-position filename="src/emergency-contact.h" line="19"/>
      <constructor name="new" c:identifier="phosh_emergency_contact_new">
        <doc xml:space="preserve"
             filename="src/emergency-contact.c"
             line="180">#phosh_emergency_contact_new creates a new #PhoshEmergencyContact with the provided information.
The input information is designed parsed from the DBus API and then provided to this function.
See #PhoshEmergencyContactManager `on_update_finish` function for reference.</doc>
        <source-position filename="src/emergency-contact.h" line="21"/>
        <return-value transfer-ownership="full">
          <type name="EmergencyContact" c:type="PhoshEmergencyContact*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-contact.c"
                 line="182">The id that is given to this emergency contact by the calls DBus API. Eg `+123 123 123`</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-contact.c"
                 line="183">The name of person in this emergency contact. Eg Bob</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-contact.c"
                 line="184">An integer identifying the source of the emergency contact. Eg SIM card or user entered.</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="additional_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-contact.c"
                 line="185">Any other information, given by the calls DBus API. Format is `a{sv}`</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="call" c:identifier="phosh_emergency_contact_call">
        <doc xml:space="preserve"
             filename="src/emergency-contact.c"
             line="205">Starts an emergency call to this emergency contact.

This function calls #phosh_emergency_contact_manager_call with the
passed emergency_contact_manager parameter and id from self.</doc>
        <source-position filename="src/emergency-contact.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-contact.c"
                 line="207">The Contact to call.</doc>
            <type name="EmergencyContact" c:type="PhoshEmergencyContact*"/>
          </instance-parameter>
          <parameter name="emergency_calls_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-contact.c"
                 line="208">The contact manager that will interface with the API.</doc>
            <type name="EmergencyCallsManager"
                  c:type="PhoshEmergencyCallsManager*"/>
          </parameter>
        </parameters>
      </method>
      <property name="additional-properties"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/emergency-contact.c"
             line="160">Any other information, given by the calls DBus API.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/emergency-contact.c"
             line="131">The id that is given to this emergency contact by the calls DBus
API.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/emergency-contact.c"
             line="141">The name of person in this emergency contact. Eg Bob.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="source"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="1">
        <doc xml:space="preserve"
             filename="src/emergency-contact.c"
             line="150">An integer identifying the source of the emergency contact. Eg SIM card or user entered.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="EmergencyContactClass"
            c:type="PhoshEmergencyContactClass"
            glib:is-gtype-struct-for="EmergencyContact">
      <source-position filename="src/emergency-contact.h" line="19"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="EmergencyContactRow"
           c:symbol-prefix="emergency_contact_row"
           c:type="PhoshEmergencyContactRow"
           parent="Handy.ActionRow"
           glib:type-name="PhoshEmergencyContactRow"
           glib:get-type="phosh_emergency_contact_row_get_type"
           glib:type-struct="EmergencyContactRowClass">
      <doc xml:space="preserve"
           filename="src/emergency-contact-row.c"
           line="22">A widget that displays a the data in the attached #PhoshEmergencyContact.

contact: The contact object contains data about the bound emergency contact.

#PhoshEmergencyContactRow is a widget derived from `GtkListBoxRow`. It displays the data from
the bound #PhoshEmergencyContact.

#PhoshEmergencyContactRow is designed to be used with `gtk_list_box_bind_model`.

NOTE: Don't get confused between the widgets on this object and the
properties on the contact.  The widgets are bound to the data on
the contact object.</doc>
      <source-position filename="src/emergency-contact-row.h" line="21"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_emergency_contact_row_new">
        <doc xml:space="preserve"
             filename="src/emergency-contact-row.c"
             line="156">Creates a new emergency contact row bound to [type@EmergencyContact].</doc>
        <source-position filename="src/emergency-contact-row.h" line="23"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/emergency-contact-row.c"
               line="162">a new #PhoshEmergencyContactRow</doc>
          <type name="EmergencyContactRow" c:type="PhoshEmergencyContactRow*"/>
        </return-value>
        <parameters>
          <parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-contact-row.c"
                 line="158">The emergency contact that the widget will be bound to.</doc>
            <type name="EmergencyContact" c:type="PhoshEmergencyContact*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="call" c:identifier="phosh_emergency_contact_row_call">
        <doc xml:space="preserve"
             filename="src/emergency-contact-row.c"
             line="171">Starts an emergency call to the bound emergency contact.</doc>
        <source-position filename="src/emergency-contact-row.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-contact-row.c"
                 line="173">The EmergencyContactRow that will be called</doc>
            <type name="EmergencyContactRow"
                  c:type="PhoshEmergencyContactRow*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/emergency-contact-row.c"
                 line="174">The contact manager that will interface with the API.</doc>
            <type name="EmergencyCallsManager"
                  c:type="PhoshEmergencyCallsManager*"/>
          </parameter>
        </parameters>
      </method>
      <property name="contact"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/emergency-contact-row.c"
             line="132">The contact object that contains data about the emergency contact.</doc>
        <type name="EmergencyContact"/>
      </property>
    </class>
    <record name="EmergencyContactRowClass"
            c:type="PhoshEmergencyContactRowClass"
            glib:is-gtype-struct-for="EmergencyContactRow">
      <source-position filename="src/emergency-contact-row.h" line="21"/>
      <field name="parent_class">
        <type name="Handy.ActionRowClass" c:type="HdyActionRowClass"/>
      </field>
    </record>
    <class name="EmergencyMenu"
           c:symbol-prefix="emergency_menu"
           c:type="PhoshEmergencyMenu"
           parent="SystemModalDialog"
           glib:type-name="PhoshEmergencyMenu"
           glib:get-type="phosh_emergency_menu_get_type"
           glib:type-struct="EmergencyMenuClass">
      <doc xml:space="preserve"
           filename="src/emergency-menu.c"
           line="24">A menu that allows the user to dial an emergency service, see
emergency info and quickly call emergency contacts.

#PhoshEmergencyMenu is a menu that allows the user to dial an
emergency service, see emergency info and quickly call emergency
contacts.

The #PhoshEmergencyMenu is designed to be integrated with the lock
screen via an emergency button.

The fetching of emergency contact and calling of emergency
contact/service is done via a DBus API with the Calls app, it is
managed by the #PhoshEmergencyContactManager class.

The emergency contacts list bind a GListStore provided by the
#PhoshEmergencyContactManager to a `GtkListBox` using
`gtk_list_box_bind_model` function.</doc>
      <source-position filename="src/emergency-menu.h" line="17"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_emergency_menu_new">
        <source-position filename="src/emergency-menu.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="EmergencyMenu" c:type="PhoshEmergencyMenu*"/>
        </return-value>
      </constructor>
      <glib:signal name="done" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EmergencyMenuClass"
            c:type="PhoshEmergencyMenuClass"
            glib:is-gtype-struct-for="EmergencyMenu">
      <source-position filename="src/emergency-menu.h" line="17"/>
      <field name="parent_class">
        <type name="SystemModalDialogClass"
              c:type="PhoshSystemModalDialogClass"/>
      </field>
    </record>
    <class name="EndSessionDialog"
           c:symbol-prefix="end_session_dialog"
           c:type="PhoshEndSessionDialog"
           parent="SystemModalDialog"
           glib:type-name="PhoshEndSessionDialog"
           glib:get-type="phosh_end_session_dialog_get_type"
           glib:type-struct="EndSessionDialogClass">
      <doc xml:space="preserve"
           filename="src/end-session-dialog.c"
           line="27">A system modal prompt to authorize applications

The #PhoshEndSessionDialog is used to confirm/decline the end of the session
and is spawned by the #PhoshSessionManager.</doc>
      <source-position filename="src/end-session-dialog.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_end_session_dialog_new">
        <source-position filename="src/end-session-dialog.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="seconds" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="paths" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_action"
              c:identifier="phosh_end_session_dialog_get_action"
              glib:get-property="action">
        <source-position filename="src/end-session-dialog.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EndSessionDialog" c:type="PhoshEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_action_confirmed"
              c:identifier="phosh_end_session_dialog_get_action_confirmed">
        <source-position filename="src/end-session-dialog.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EndSessionDialog" c:type="PhoshEndSessionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="action"
                writable="1"
                transfer-ownership="none"
                getter="get_action"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="inhibitor-paths" writable="1" transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="timeout"
                writable="1"
                transfer-ownership="none"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <glib:signal name="closed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EndSessionDialogClass"
            c:type="PhoshEndSessionDialogClass"
            glib:is-gtype-struct-for="EndSessionDialog">
      <source-position filename="src/end-session-dialog.h" line="16"/>
      <field name="parent_class">
        <type name="SystemModalDialogClass"
              c:type="PhoshSystemModalDialogClass"/>
      </field>
    </record>
    <constant name="FOLDERS_SCHEMA_ID"
              value="org.gnome.desktop.app-folders"
              c:type="PHOSH_FOLDERS_SCHEMA_ID">
      <source-position filename="src/folder-info.h" line="13"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Fader"
           c:symbol-prefix="fader"
           c:type="PhoshFader"
           parent="LayerSurface"
           glib:type-name="PhoshFader"
           glib:get-type="phosh_fader_get_type"
           glib:type-struct="FaderClass">
      <doc xml:space="preserve"
           filename="src/fader.c"
           line="18">A fader

A fullsreen surface that fades in or out.</doc>
      <source-position filename="src/fader.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_fader_new">
        <source-position filename="src/fader.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Fader" c:type="PhoshFader*"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="hide" c:identifier="phosh_fader_hide">
        <source-position filename="src/fader.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Fader" c:type="PhoshFader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="fade-out-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/fader.c"
             line="199">The time of a fade out animation in ms. 0 to enable any
fade out.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="fade-out-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="PHOSH_ANIMATION_TYPE_EASE_OUT_CUBIC">
        <doc xml:space="preserve"
             filename="src/fader.c"
             line="209">The animation type for the fade out.</doc>
        <type name="AnimationType"/>
      </property>
      <property name="monitor"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Monitor"/>
      </property>
      <property name="style-class"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/fader.c"
             line="219">The CSS style class used for the animation</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="FaderClass"
            c:type="PhoshFaderClass"
            glib:is-gtype-struct-for="Fader">
      <source-position filename="src/fader.h" line="16"/>
      <field name="parent_class">
        <type name="LayerSurfaceClass" c:type="PhoshLayerSurfaceClass"/>
      </field>
    </record>
    <class name="FadingLabel"
           c:symbol-prefix="fading_label"
           c:type="PhoshFadingLabel"
           parent="Gtk.Bin"
           glib:type-name="PhoshFadingLabel"
           glib:get-type="phosh_fading_label_get_type"
           glib:type-struct="FadingLabelClass">
      <doc xml:space="preserve"
           filename="src/fading-label.c"
           line="17">A label that visually fades out when too wide for the given space.</doc>
      <source-position filename="src/fading-label.h" line="17"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_fading_label_new">
        <source-position filename="src/fading-label.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_align"
              c:identifier="phosh_fading_label_get_align"
              glib:get-property="align">
        <source-position filename="src/fading-label.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FadingLabel" c:type="PhoshFadingLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="phosh_fading_label_get_label"
              glib:get-property="label">
        <source-position filename="src/fading-label.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FadingLabel" c:type="PhoshFadingLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_align"
              c:identifier="phosh_fading_label_set_align"
              glib:set-property="align">
        <source-position filename="src/fading-label.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FadingLabel" c:type="PhoshFadingLabel*"/>
          </instance-parameter>
          <parameter name="align" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="phosh_fading_label_set_label"
              glib:set-property="label">
        <source-position filename="src/fading-label.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FadingLabel" c:type="PhoshFadingLabel*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="align"
                writable="1"
                transfer-ownership="none"
                setter="set_align"
                getter="get_align"
                default-value="0.000000">
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="label"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="FadingLabelClass"
            c:type="PhoshFadingLabelClass"
            glib:is-gtype-struct-for="FadingLabel">
      <source-position filename="src/fading-label.h" line="17"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="FavoriteListModel"
           c:symbol-prefix="favorite_list_model"
           c:type="PhoshFavoriteListModel"
           version="0.1.3"
           parent="GObject.Object"
           glib:type-name="PhoshFavoriteListModel"
           glib:get-type="phosh_favorite_list_model_get_type"
           glib:type-struct="FavoriteListModelClass">
      <doc xml:space="preserve"
           filename="src/favorite-list-model.c"
           line="17">A `GListModel` of the users favorite applications</doc>
      <source-position filename="src/favorite-list-model.h" line="20"/>
      <implements name="Gio.ListModel"/>
      <function name="get_default"
                c:identifier="phosh_favorite_list_model_get_default">
        <source-position filename="src/favorite-list-model.h" line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/favorite-list-model.c"
               line="173">The global #PhoshFavoriteListModel singleton</doc>
          <type name="FavoriteListModel" c:type="PhoshFavoriteListModel*"/>
        </return-value>
      </function>
      <method name="add_app" c:identifier="phosh_favorite_list_model_add_app">
        <source-position filename="src/favorite-list-model.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FavoriteListModel" c:type="PhoshFavoriteListModel*"/>
          </instance-parameter>
          <parameter name="app" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="app_is_favorite"
              c:identifier="phosh_favorite_list_model_app_is_favorite">
        <source-position filename="src/favorite-list-model.h" line="23"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/favorite-list-model.c"
               line="194">%TRUE if @app if currently favorited, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/favorite-list-model.c"
                 line="191">the #PhoshFavoriteListModel, use %NULL for the default</doc>
            <type name="FavoriteListModel" c:type="PhoshFavoriteListModel*"/>
          </instance-parameter>
          <parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/favorite-list-model.c"
                 line="192">a #GAppInfo to lookup</doc>
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_app"
              c:identifier="phosh_favorite_list_model_remove_app">
        <source-position filename="src/favorite-list-model.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FavoriteListModel" c:type="PhoshFavoriteListModel*"/>
          </instance-parameter>
          <parameter name="app" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FavoriteListModelClass"
            c:type="PhoshFavoriteListModelClass"
            glib:is-gtype-struct-for="FavoriteListModel">
      <source-position filename="src/favorite-list-model.h" line="20"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="FeedbackInfo"
           c:symbol-prefix="feedback_info"
           c:type="PhoshFeedbackInfo"
           parent="StatusIcon"
           glib:type-name="PhoshFeedbackInfo"
           glib:get-type="phosh_feedback_info_get_type"
           glib:type-struct="FeedbackInfoClass">
      <doc xml:space="preserve"
           filename="src/feedbackinfo.c"
           line="16">A widget to display feedback status</doc>
      <source-position filename="src/feedbackinfo.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_feedback_info_new">
        <source-position filename="src/feedbackinfo.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="enabled" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/feedbackinfo.c"
             line="192">Whether feedback is enabled. This is true for the `full` and `quiet` profile.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="muted" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/feedbackinfo.c"
             line="173">Whether audio is muted (this is true for the `quiet` and `silent`
profiles) but not for the `full` profile.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="present"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="FeedbackInfoClass"
            c:type="PhoshFeedbackInfoClass"
            glib:is-gtype-struct-for="FeedbackInfo">
      <source-position filename="src/feedbackinfo.h" line="16"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <class name="FeedbackManager"
           c:symbol-prefix="feedback_manager"
           c:type="PhoshFeedbackManager"
           parent="GObject.Object"
           glib:type-name="PhoshFeedbackManager"
           glib:get-type="phosh_feedback_manager_get_type"
           glib:type-struct="FeedbackManagerClass">
      <doc xml:space="preserve"
           filename="src/feedback-manager.c"
           line="18">Sends and configures user feedback</doc>
      <source-position filename="src/feedback-manager.h" line="14"/>
      <constructor name="new" c:identifier="phosh_feedback_manager_new">
        <source-position filename="src/feedback-manager.h" line="20"/>
        <return-value transfer-ownership="full">
          <type name="FeedbackManager" c:type="PhoshFeedbackManager*"/>
        </return-value>
      </constructor>
      <method name="get_icon_name"
              c:identifier="phosh_feedback_manager_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/feedback-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FeedbackManager" c:type="PhoshFeedbackManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_profile"
              c:identifier="phosh_feedback_manager_get_profile"
              glib:get-property="profile">
        <source-position filename="src/feedback-manager.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FeedbackManager" c:type="PhoshFeedbackManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_profile"
              c:identifier="phosh_feedback_manager_set_profile">
        <source-position filename="src/feedback-manager.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FeedbackManager" c:type="PhoshFeedbackManager*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="toggle" c:identifier="phosh_feedback_manager_toggle">
        <source-position filename="src/feedback-manager.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FeedbackManager" c:type="PhoshFeedbackManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="trigger_feedback"
              c:identifier="phosh_feedback_manager_trigger_feedback">
        <source-position filename="src/feedback-manager.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FeedbackManager" c:type="PhoshFeedbackManager*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="preferences-system-notifications-symbolic">
        <doc xml:space="preserve"
             filename="src/feedback-manager.c"
             line="177">The feedback icon name</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="present" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/feedback-manager.c"
             line="195">Whether feedback manager is present</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="profile" transfer-ownership="none" getter="get_profile">
        <doc xml:space="preserve"
             filename="src/feedback-manager.c"
             line="186">The feedback profile name</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="FeedbackManagerClass"
            c:type="PhoshFeedbackManagerClass"
            glib:is-gtype-struct-for="FeedbackManager">
      <source-position filename="src/feedback-manager.h" line="14"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="FolderInfo"
           c:symbol-prefix="folder_info"
           c:type="PhoshFolderInfo"
           parent="GObject.Object"
           glib:type-name="PhoshFolderInfo"
           glib:get-type="phosh_folder_info_get_type"
           glib:type-struct="FolderInfoClass">
      <doc xml:space="preserve"
           filename="src/folder-info.c"
           line="24">An object that represents a list of applications belonging to a folder.</doc>
      <source-position filename="src/folder-info.h" line="16"/>
      <implements name="Gio.AppInfo"/>
      <constructor name="new_from_folder_path"
                   c:identifier="phosh_folder_info_new_from_folder_path">
        <source-position filename="src/folder-info.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="FolderInfo" c:type="PhoshFolderInfo*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_app_info"
              c:identifier="phosh_folder_info_add_app_info">
        <source-position filename="src/folder-info.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FolderInfo" c:type="PhoshFolderInfo*"/>
          </instance-parameter>
          <parameter name="app_info" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="contains" c:identifier="phosh_folder_info_contains">
        <source-position filename="src/folder-info.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FolderInfo" c:type="PhoshFolderInfo*"/>
          </instance-parameter>
          <parameter name="app_info" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_app_infos"
              c:identifier="phosh_folder_info_get_app_infos"
              glib:get-property="app-infos">
        <doc xml:space="preserve"
             filename="src/folder-info.c"
             line="389">Get the list model of the folder info.</doc>
        <source-position filename="src/folder-info.h" line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/folder-info.c"
               line="395">The folder info</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/folder-info.c"
                 line="391">A folder info</doc>
            <type name="FolderInfo" c:type="PhoshFolderInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="phosh_folder_info_get_name"
              glib:get-property="name">
        <source-position filename="src/folder-info.h" line="20"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FolderInfo" c:type="PhoshFolderInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="refilter" c:identifier="phosh_folder_info_refilter">
        <source-position filename="src/folder-info.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FolderInfo" c:type="PhoshFolderInfo*"/>
          </instance-parameter>
          <parameter name="search" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_app_info"
              c:identifier="phosh_folder_info_remove_app_info">
        <source-position filename="src/folder-info.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FolderInfo" c:type="PhoshFolderInfo*"/>
          </instance-parameter>
          <parameter name="app_info" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="phosh_folder_info_set_name"
              glib:set-property="name">
        <source-position filename="src/folder-info.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FolderInfo" c:type="PhoshFolderInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="app-infos"
                transfer-ownership="none"
                getter="get_app_infos">
        <doc xml:space="preserve"
             filename="src/folder-info.c"
             line="339">A list model of (filtered) app-infos belonging to the folder.</doc>
        <type name="Gio.ListModel"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/folder-info.c"
             line="327">Name of the folder</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/folder-info.c"
             line="315">Relative GSettings path to folder</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="apps-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="FolderInfoClass"
            c:type="PhoshFolderInfoClass"
            glib:is-gtype-struct-for="FolderInfo">
      <source-position filename="src/folder-info.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function-macro name="GEO_CLUE_DBUS_IS_MANAGER"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_IS_MANAGER"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_IS_MANAGER_PROXY"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_IS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="97"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_IS_MANAGER_PROXY_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_IS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="98"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_IS_MANAGER_SKELETON"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_IS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="167"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_IS_MANAGER_SKELETON_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_IS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="168"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_IS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_IS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_IS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_PROXY"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_IS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="101"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_IS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_PROXY_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_IS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="102"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_IS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_SKELETON"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_IS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="171"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_IS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_SKELETON_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_IS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="172"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_MANAGER"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_MANAGER"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_MANAGER_GET_IFACE"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_MANAGER_PROXY"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="94"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_MANAGER_PROXY_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="95"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_MANAGER_PROXY_GET_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="96"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_MANAGER_SKELETON"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="164"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_MANAGER_SKELETON_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="165"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_MANAGER_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="166"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_GET_IFACE"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_PROXY"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="98"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_PROXY_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="99"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_PROXY_GET_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="100"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_SKELETON"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="168"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_SKELETON_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="169"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_GEO_CLUE_DBUS_ORG_FREEDESKTOP_GEO_CLUE2_AGENT_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="170"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="GeoClueDBusManager"
               c:symbol-prefix="geo_clue_dbus_manager"
               c:type="PhoshGeoClueDBusManager"
               glib:type-name="PhoshGeoClueDBusManager"
               glib:get-type="phosh_geo_clue_dbus_manager_get_type"
               glib:type-struct="GeoClueDBusManagerIface">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-manager-dbus.c"
           line="391">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Manager.top_of_page"&gt;org.freedesktop.GeoClue2.Manager&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="43"/>
      <function name="interface_info"
                c:identifier="phosh_geo_clue_dbus_manager_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="345">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Manager.top_of_page"&gt;org.freedesktop.GeoClue2.Manager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="350">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_geo_clue_dbus_manager_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="358">Overrides all #GObject properties in the #PhoshGeoClueDBusManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="366">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="360">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="361">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_available_accuracy_level"
                      invoker="get_available_accuracy_level"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="491">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Manager.AvailableAccuracyLevel"&gt;"AvailableAccuracyLevel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="499">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="493">A #PhoshGeoClueDBusManager.</doc>
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_in_use"
                      invoker="get_in_use"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="458">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Manager.InUse"&gt;"InUse"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="466">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="460">A #PhoshGeoClueDBusManager.</doc>
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_agent">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="400">Handler for the #PhoshGeoClueDBusManager::handle-add-agent signal.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_agent"
              c:identifier="phosh_geo_clue_dbus_manager_call_add_agent"
              glib:finish-func="call_add_agent_finish"
              glib:sync-func="call_add_agent_sync">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="524">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-GeoClue2-Manager.AddAgent"&gt;AddAgent()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_geo_clue_dbus_manager_call_add_agent_finish() to get the result of the operation.

See phosh_geo_clue_dbus_manager_call_add_agent_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="526">A #PhoshGeoClueDBusManagerProxy.</doc>
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="527">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="528">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="529">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="530">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_agent_finish"
              c:identifier="phosh_geo_clue_dbus_manager_call_add_agent_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="557">Finishes an operation started with phosh_geo_clue_dbus_manager_call_add_agent().</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="70"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="565">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="559">A #PhoshGeoClueDBusManagerProxy.</doc>
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="560">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_geo_clue_dbus_manager_call_add_agent().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_agent_sync"
              c:identifier="phosh_geo_clue_dbus_manager_call_add_agent_sync"
              throws="1"
              glib:async-func="call_add_agent">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="584">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-GeoClue2-Manager.AddAgent"&gt;AddAgent()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_geo_clue_dbus_manager_call_add_agent() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="75"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="595">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="586">A #PhoshGeoClueDBusManagerProxy.</doc>
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="587">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="588">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_agent"
              c:identifier="phosh_geo_clue_dbus_manager_complete_add_agent">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="622">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-GeoClue2-Manager.AddAgent"&gt;AddAgent()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="624">A #PhoshGeoClueDBusManager.</doc>
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="625">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_available_accuracy_level"
              c:identifier="phosh_geo_clue_dbus_manager_get_available_accuracy_level"
              glib:get-property="available-accuracy-level"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="491">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Manager.AvailableAccuracyLevel"&gt;"AvailableAccuracyLevel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="499">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="493">A #PhoshGeoClueDBusManager.</doc>
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_in_use"
              c:identifier="phosh_geo_clue_dbus_manager_get_in_use"
              glib:get-property="in-use"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="458">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Manager.InUse"&gt;"InUse"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="466">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="460">A #PhoshGeoClueDBusManager.</doc>
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_available_accuracy_level"
              c:identifier="phosh_geo_clue_dbus_manager_set_available_accuracy_level"
              glib:set-property="available-accuracy-level"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="509">Sets the &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Manager.AvailableAccuracyLevel"&gt;"AvailableAccuracyLevel"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="511">A #PhoshGeoClueDBusManager.</doc>
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="512">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_in_use"
              c:identifier="phosh_geo_clue_dbus_manager_set_in_use"
              glib:set-property="in-use"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="476">Sets the &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Manager.InUse"&gt;"InUse"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="478">A #PhoshGeoClueDBusManager.</doc>
            <type name="GeoClueDBusManager" c:type="PhoshGeoClueDBusManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="479">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="available-accuracy-level"
                writable="1"
                transfer-ownership="none"
                setter="set_available_accuracy_level"
                getter="get_available_accuracy_level"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="447">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Manager.AvailableAccuracyLevel"&gt;"AvailableAccuracyLevel"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="in-use"
                writable="1"
                transfer-ownership="none"
                setter="set_in_use"
                getter="get_in_use"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="438">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Manager.InUse"&gt;"InUse"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-add-agent" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="414">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-GeoClue2-Manager.AddAgent"&gt;AddAgent()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_geo_clue_dbus_manager_complete_add_agent() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="424">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="417">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="418">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GeoClueDBusManagerIface"
            c:type="PhoshGeoClueDBusManagerIface"
            glib:is-gtype-struct-for="GeoClueDBusManager">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-manager-dbus.c"
           line="397">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Manager.top_of_page"&gt;org.freedesktop.GeoClue2.Manager&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="43"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="399">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_agent">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="400">Handler for the #PhoshGeoClueDBusManager::handle-add-agent signal.</doc>
        <callback name="handle_add_agent">
          <source-position filename="src/dbus/geoclue-manager-dbus.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GeoClueDBusManager"
                    c:type="PhoshGeoClueDBusManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_available_accuracy_level">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="401">Getter for the #PhoshGeoClueDBusManager:available-accuracy-level property.</doc>
        <callback name="get_available_accuracy_level">
          <source-position filename="src/dbus/geoclue-manager-dbus.h"
                           line="39"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="499">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/geoclue-manager-dbus.c"
                   line="493">A #PhoshGeoClueDBusManager.</doc>
              <type name="GeoClueDBusManager"
                    c:type="PhoshGeoClueDBusManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_in_use">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="402">Getter for the #PhoshGeoClueDBusManager:in-use property.</doc>
        <callback name="get_in_use">
          <source-position filename="src/dbus/geoclue-manager-dbus.h"
                           line="41"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="466">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/geoclue-manager-dbus.c"
                   line="460">A #PhoshGeoClueDBusManager.</doc>
              <type name="GeoClueDBusManager"
                    c:type="PhoshGeoClueDBusManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GeoClueDBusManagerProxy"
           c:symbol-prefix="geo_clue_dbus_manager_proxy"
           c:type="PhoshGeoClueDBusManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshGeoClueDBusManagerProxy"
           glib:get-type="phosh_geo_clue_dbus_manager_proxy_get_type"
           glib:type-struct="GeoClueDBusManagerProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-manager-dbus.c"
           line="642">The #PhoshGeoClueDBusManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="114"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GeoClueDBusManager"/>
      <constructor name="new_finish"
                   c:identifier="phosh_geo_clue_dbus_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="918">Finishes an operation started with phosh_geo_clue_dbus_manager_proxy_new().</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h"
                         line="130"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="925">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GeoClueDBusManagerProxy"
                c:type="PhoshGeoClueDBusManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="920">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_geo_clue_dbus_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_geo_clue_dbus_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="1008">Finishes an operation started with phosh_geo_clue_dbus_manager_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h"
                         line="149"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="1015">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GeoClueDBusManagerProxy"
                c:type="PhoshGeoClueDBusManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="1010">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_geo_clue_dbus_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_geo_clue_dbus_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="1033">Like phosh_geo_clue_dbus_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_geo_clue_dbus_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h"
                         line="152"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="1048">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GeoClueDBusManagerProxy"
                c:type="PhoshGeoClueDBusManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="1035">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="1036">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="1037">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="1038">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="1039">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_geo_clue_dbus_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="943">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Manager.top_of_page"&gt;org.freedesktop.GeoClue2.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_geo_clue_dbus_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h"
                         line="133"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="958">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GeoClueDBusManagerProxy"
                c:type="PhoshGeoClueDBusManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="945">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="946">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="947">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="948">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="949">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_geo_clue_dbus_manager_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="888">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Manager.top_of_page"&gt;org.freedesktop.GeoClue2.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_geo_clue_dbus_manager_proxy_new_finish() to get the result of the operation.

See phosh_geo_clue_dbus_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="890">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="891">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="892">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="893">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="894">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="895">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="896">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_geo_clue_dbus_manager_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="978">Like phosh_geo_clue_dbus_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_geo_clue_dbus_manager_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_geo_clue_dbus_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="980">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="981">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="982">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="983">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="984">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="985">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-manager-dbus.c"
                 line="986">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GeoClueDBusManagerProxyPrivate"
              c:type="PhoshGeoClueDBusManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="GeoClueDBusManagerProxyClass"
            c:type="PhoshGeoClueDBusManagerProxyClass"
            glib:is-gtype-struct-for="GeoClueDBusManagerProxy">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-manager-dbus.c"
           line="648">Class structure for #PhoshGeoClueDBusManagerProxy.</doc>
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="114"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="650">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GeoClueDBusManagerProxyPrivate"
            c:type="PhoshGeoClueDBusManagerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="102"/>
    </record>
    <class name="GeoClueDBusManagerSkeleton"
           c:symbol-prefix="geo_clue_dbus_manager_skeleton"
           c:type="PhoshGeoClueDBusManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshGeoClueDBusManagerSkeleton"
           glib:get-type="phosh_geo_clue_dbus_manager_skeleton_get_type"
           glib:type-struct="GeoClueDBusManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-manager-dbus.c"
           line="1070">The #PhoshGeoClueDBusManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="184"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GeoClueDBusManager"/>
      <constructor name="new"
                   c:identifier="phosh_geo_clue_dbus_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="1536">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Manager.top_of_page"&gt;org.freedesktop.GeoClue2.Manager&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/geoclue-manager-dbus.h"
                         line="192"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="1541">The skeleton object.</doc>
          <type name="GeoClueDBusManagerSkeleton"
                c:type="PhoshGeoClueDBusManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GeoClueDBusManagerSkeletonPrivate"
              c:type="PhoshGeoClueDBusManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GeoClueDBusManagerSkeletonClass"
            c:type="PhoshGeoClueDBusManagerSkeletonClass"
            glib:is-gtype-struct-for="GeoClueDBusManagerSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-manager-dbus.c"
           line="1076">Class structure for #PhoshGeoClueDBusManagerSkeleton.</doc>
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="184"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="1078">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GeoClueDBusManagerSkeletonPrivate"
            c:type="PhoshGeoClueDBusManagerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="172"/>
    </record>
    <interface name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
               c:symbol-prefix="geo_clue_dbus_org_freedesktop_geo_clue2_agent"
               c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent"
               glib:type-name="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent"
               glib:get-type="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_get_type"
               glib:type-struct="GeoClueDBusOrgFreedesktopGeoClue2AgentIface">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-agent-dbus.c"
           line="418">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Agent.top_of_page"&gt;org.freedesktop.GeoClue2.Agent&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="42"/>
      <function name="interface_info"
                c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="373">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Agent.top_of_page"&gt;org.freedesktop.GeoClue2.Agent&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="378">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="386">Overrides all #GObject properties in the #PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="394">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="388">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="389">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_max_accuracy_level"
                      invoker="get_max_accuracy_level"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="476">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Agent.MaxAccuracyLevel"&gt;"MaxAccuracyLevel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="484">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="478">A #PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent.</doc>
            <type name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
                  c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_authorize_app">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="427">Handler for the #PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent::handle-authorize-app signal.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
                  c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_desktop_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_req_accuracy_level" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_authorize_app"
              c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_call_authorize_app"
              glib:finish-func="call_authorize_app_finish"
              glib:sync-func="call_authorize_app_sync">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="509">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-GeoClue2-Agent.AuthorizeApp"&gt;AuthorizeApp()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_call_authorize_app_finish() to get the result of the operation.

See phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_call_authorize_app_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="511">A #PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentProxy.</doc>
            <type name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
                  c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
          </instance-parameter>
          <parameter name="arg_desktop_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="512">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_req_accuracy_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="513">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="514">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="515">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="516">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_authorize_app_finish"
              c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_call_authorize_app_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="545">Finishes an operation started with phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_call_authorize_app().</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="72"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="555">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="547">A #PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentProxy.</doc>
            <type name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
                  c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
          </instance-parameter>
          <parameter name="out_authorized"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="548">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_allowed_accuracy_level"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="549">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="550">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_call_authorize_app().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_authorize_app_sync"
              c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_call_authorize_app_sync"
              throws="1"
              glib:async-func="call_authorize_app">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="578">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-GeoClue2-Agent.AuthorizeApp"&gt;AuthorizeApp()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_call_authorize_app() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="79"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="592">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="580">A #PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentProxy.</doc>
            <type name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
                  c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
          </instance-parameter>
          <parameter name="arg_desktop_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="581">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_req_accuracy_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="582">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_authorized"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="583">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_allowed_accuracy_level"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="584">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="585">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_authorize_app"
              c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_complete_authorize_app">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="625">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-GeoClue2-Agent.AuthorizeApp"&gt;AuthorizeApp()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="627">A #PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent.</doc>
            <type name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
                  c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="628">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="authorized" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="629">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="allowed_accuracy_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="630">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_max_accuracy_level"
              c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_get_max_accuracy_level"
              glib:get-property="max-accuracy-level"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="476">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Agent.MaxAccuracyLevel"&gt;"MaxAccuracyLevel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="484">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="478">A #PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent.</doc>
            <type name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
                  c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_max_accuracy_level"
              c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_set_max_accuracy_level"
              glib:set-property="max-accuracy-level"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="494">Sets the &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Agent.MaxAccuracyLevel"&gt;"MaxAccuracyLevel"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="496">A #PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent.</doc>
            <type name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
                  c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="497">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="max-accuracy-level"
                writable="1"
                transfer-ownership="none"
                setter="set_max_accuracy_level"
                getter="get_max_accuracy_level"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="465">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-GeoClue2-Agent.MaxAccuracyLevel"&gt;"MaxAccuracyLevel"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-authorize-app" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="440">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-GeoClue2-Agent.AuthorizeApp"&gt;AuthorizeApp()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_complete_authorize_app() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="451">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="443">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_desktop_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="444">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_req_accuracy_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="445">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GeoClueDBusOrgFreedesktopGeoClue2AgentIface"
            c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentIface"
            glib:is-gtype-struct-for="GeoClueDBusOrgFreedesktopGeoClue2Agent">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-agent-dbus.c"
           line="424">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Agent.top_of_page"&gt;org.freedesktop.GeoClue2.Agent&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="42"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="426">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_authorize_app">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="427">Handler for the #PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent::handle-authorize-app signal.</doc>
        <callback name="handle_authorize_app">
          <source-position filename="src/dbus/geoclue-agent-dbus.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
                    c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_desktop_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_req_accuracy_level" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_max_accuracy_level">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="428">Getter for the #PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent:max-accuracy-level property.</doc>
        <callback name="get_max_accuracy_level">
          <source-position filename="src/dbus/geoclue-agent-dbus.h" line="40"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="484">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/geoclue-agent-dbus.c"
                   line="478">A #PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent.</doc>
              <type name="GeoClueDBusOrgFreedesktopGeoClue2Agent"
                    c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GeoClueDBusOrgFreedesktopGeoClue2AgentProxy"
           c:symbol-prefix="geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy"
           c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentProxy"
           glib:get-type="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_get_type"
           glib:type-struct="GeoClueDBusOrgFreedesktopGeoClue2AgentProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-agent-dbus.c"
           line="651">The #PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="118"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GeoClueDBusOrgFreedesktopGeoClue2Agent"/>
      <constructor name="new_finish"
                   c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="911">Finishes an operation started with phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new().</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="134"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="918">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GeoClueDBusOrgFreedesktopGeoClue2AgentProxy"
                c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="913">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="1001">Finishes an operation started with phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="153"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="1008">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GeoClueDBusOrgFreedesktopGeoClue2AgentProxy"
                c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="1003">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="1026">Like phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="156"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="1041">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GeoClueDBusOrgFreedesktopGeoClue2AgentProxy"
                c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="1028">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="1029">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="1030">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="1031">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="1032">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="936">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Agent.top_of_page"&gt;org.freedesktop.GeoClue2.Agent&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="137"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="951">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GeoClueDBusOrgFreedesktopGeoClue2AgentProxy"
                c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="938">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="939">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="940">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="941">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="942">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="881">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Agent.top_of_page"&gt;org.freedesktop.GeoClue2.Agent&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_finish() to get the result of the operation.

See phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="883">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="884">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="885">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="886">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="887">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="888">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="889">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="971">Like phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="973">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="974">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="975">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="976">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="977">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="978">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/geoclue-agent-dbus.c"
                 line="979">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GeoClueDBusOrgFreedesktopGeoClue2AgentProxyPrivate"
              c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentProxyPrivate*"/>
      </field>
    </class>
    <record name="GeoClueDBusOrgFreedesktopGeoClue2AgentProxyClass"
            c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentProxyClass"
            glib:is-gtype-struct-for="GeoClueDBusOrgFreedesktopGeoClue2AgentProxy">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-agent-dbus.c"
           line="657">Class structure for #PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentProxy.</doc>
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="118"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="659">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GeoClueDBusOrgFreedesktopGeoClue2AgentProxyPrivate"
            c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="106"/>
    </record>
    <class name="GeoClueDBusOrgFreedesktopGeoClue2AgentSkeleton"
           c:symbol-prefix="geo_clue_dbus_org_freedesktop_geo_clue2_agent_skeleton"
           c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentSkeleton"
           glib:get-type="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_skeleton_get_type"
           glib:type-struct="GeoClueDBusOrgFreedesktopGeoClue2AgentSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-agent-dbus.c"
           line="1063">The #PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="188"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GeoClueDBusOrgFreedesktopGeoClue2Agent"/>
      <constructor name="new"
                   c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="1516">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Agent.top_of_page"&gt;org.freedesktop.GeoClue2.Agent&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/geoclue-agent-dbus.h" line="196"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="1521">The skeleton object.</doc>
          <type name="GeoClueDBusOrgFreedesktopGeoClue2AgentSkeleton"
                c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GeoClueDBusOrgFreedesktopGeoClue2AgentSkeletonPrivate"
              c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GeoClueDBusOrgFreedesktopGeoClue2AgentSkeletonClass"
            c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentSkeletonClass"
            glib:is-gtype-struct-for="GeoClueDBusOrgFreedesktopGeoClue2AgentSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-agent-dbus.c"
           line="1069">Class structure for #PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentSkeleton.</doc>
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="188"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="1071">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GeoClueDBusOrgFreedesktopGeoClue2AgentSkeletonPrivate"
            c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="176"/>
    </record>
    <class name="GnomeShellManager"
           c:symbol-prefix="gnome_shell_manager"
           c:type="PhoshGnomeShellManager"
           parent="DBusGnomeShellSkeleton"
           glib:type-name="PhoshGnomeShellManager"
           glib:get-type="phosh_gnome_shell_manager_get_type"
           glib:type-struct="GnomeShellManagerClass">
      <doc xml:space="preserve"
           filename="src/gnome-shell-manager.c"
           line="25">Provides the org.gnome.Shell DBus interface</doc>
      <source-position filename="src/gnome-shell-manager.h" line="79"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusGnomeShell"/>
      <function name="get_default"
                c:identifier="phosh_gnome_shell_manager_get_default">
        <doc xml:space="preserve"
             filename="src/gnome-shell-manager.c"
             line="839">Get the shell manager singleton</doc>
        <source-position filename="src/gnome-shell-manager.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/gnome-shell-manager.c"
               line="844">The shell manager singleton</doc>
          <type name="GnomeShellManager" c:type="PhoshGnomeShellManager*"/>
        </return-value>
      </function>
      <property name="shell-action-mode"
                writable="1"
                transfer-ownership="none"
                default-value="PHOSH_SHELL_ACTION_MODE_NONE">
        <type name="ShellActionMode"/>
      </property>
    </class>
    <record name="GnomeShellManagerClass"
            c:type="PhoshGnomeShellManagerClass"
            glib:is-gtype-struct-for="GnomeShellManager">
      <source-position filename="src/gnome-shell-manager.h" line="79"/>
      <field name="parent_class">
        <type name="DBusGnomeShellSkeletonClass"
              c:type="PhoshDBusGnomeShellSkeletonClass"/>
      </field>
    </record>
    <class name="GtkMountManager"
           c:symbol-prefix="gtk_mount_manager"
           c:type="PhoshGtkMountManager"
           parent="DBusMountOperationHandlerSkeleton"
           glib:type-name="PhoshGtkMountManager"
           glib:get-type="phosh_gtk_mount_manager_get_type"
           glib:type-struct="GtkMountManagerClass">
      <doc xml:space="preserve"
           filename="src/gtk-mount-manager.c"
           line="18">Provides the org.Gtk.GtkMountOperationHandler DBus interface

The interface is responsible to handle the ui parts of a #GtkMountOperation.</doc>
      <source-position filename="src/gtk-mount-manager.h" line="15"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusMountOperationHandler"/>
      <constructor name="new" c:identifier="phosh_gtk_mount_manager_new">
        <source-position filename="src/gtk-mount-manager.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="GtkMountManager" c:type="PhoshGtkMountManager*"/>
        </return-value>
      </constructor>
      <glib:signal name="new-prompt" when="last">
        <doc xml:space="preserve"
             filename="src/gtk-mount-manager.c"
             line="391">Emitted when a new prompt is shown</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="GtkMountManagerClass"
            c:type="PhoshGtkMountManagerClass"
            glib:is-gtype-struct-for="GtkMountManager">
      <source-position filename="src/gtk-mount-manager.h" line="15"/>
      <field name="parent_class">
        <type name="DBusMountOperationHandlerSkeletonClass"
              c:type="PhoshDBusMountOperationHandlerSkeletonClass"/>
      </field>
    </record>
    <class name="GtkMountPrompt"
           c:symbol-prefix="gtk_mount_prompt"
           c:type="PhoshGtkMountPrompt"
           parent="SystemModalDialog"
           glib:type-name="PhoshGtkMountPrompt"
           glib:get-type="phosh_gtk_mount_prompt_get_type"
           glib:type-struct="GtkMountPromptClass">
      <doc xml:space="preserve"
           filename="src/gtk-mount-prompt.c"
           line="17">A modal prompt for #PhoshGtkMountManager

The #PhoshGtkMountPrompt is used to query the needed information
for the #PhoshGtkMountManager.</doc>
      <source-position filename="src/gtk-mount-prompt.h" line="14"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_gtk_mount_prompt_new">
        <source-position filename="src/gtk-mount-prompt.h" line="16"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_user" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="default_domain" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="pids" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="choices" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
          <parameter name="ask_flags" transfer-ownership="none">
            <type name="Gio.AskPasswordFlags" c:type="GAskPasswordFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_ask_flags"
              c:identifier="phosh_gtk_mount_prompt_get_ask_flags"
              glib:get-property="ask-flags">
        <source-position filename="src/gtk-mount-prompt.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="Gio.AskPasswordFlags" c:type="GAskPasswordFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GtkMountPrompt" c:type="PhoshGtkMountPrompt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cancelled"
              c:identifier="phosh_gtk_mount_prompt_get_cancelled">
        <source-position filename="src/gtk-mount-prompt.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/gtk-mount-prompt.c"
               line="501">%TRUE if the dialog was cancelled (e.g. via swipe
away or pressing the Esc-key.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/gtk-mount-prompt.c"
                 line="499">The #PhoshGtkMountPrompt</doc>
            <type name="GtkMountPrompt" c:type="PhoshGtkMountPrompt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_choice"
              c:identifier="phosh_gtk_mount_prompt_get_choice">
        <source-position filename="src/gtk-mount-prompt.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GtkMountPrompt" c:type="PhoshGtkMountPrompt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_choices"
              c:identifier="phosh_gtk_mount_prompt_get_choices"
              glib:get-property="choices">
        <source-position filename="src/gtk-mount-prompt.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/gtk-mount-prompt.c"
               line="517">The prompt's choices</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/gtk-mount-prompt.c"
                 line="515">The #PhoshGtkMountPrompt</doc>
            <type name="GtkMountPrompt" c:type="PhoshGtkMountPrompt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="phosh_gtk_mount_prompt_get_password">
        <source-position filename="src/gtk-mount-prompt.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GtkMountPrompt" c:type="PhoshGtkMountPrompt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_pids"
              c:identifier="phosh_gtk_mount_prompt_set_pids"
              glib:set-property="pids">
        <source-position filename="src/gtk-mount-prompt.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GtkMountPrompt" c:type="PhoshGtkMountPrompt*"/>
          </instance-parameter>
          <parameter name="pids" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <property name="ask-flags"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_ask_flags"
                default-value="0">
        <type name="Gio.AskPasswordFlags"/>
      </property>
      <property name="choices"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_choices">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="default-domain"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="default-user"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="message"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pids"
                writable="1"
                transfer-ownership="none"
                setter="set_pids">
        <type name="GLib.Variant"/>
      </property>
      <glib:signal name="closed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="GtkMountPromptClass"
            c:type="PhoshGtkMountPromptClass"
            glib:is-gtype-struct-for="GtkMountPrompt">
      <source-position filename="src/gtk-mount-prompt.h" line="14"/>
      <field name="parent_class">
        <type name="SystemModalDialogClass"
              c:type="PhoshSystemModalDialogClass"/>
      </field>
    </record>
    <constant name="HOME_BAR_HEIGHT" value="15" c:type="PHOSH_HOME_BAR_HEIGHT">
      <source-position filename="src/home.h" line="16"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Head"
           c:symbol-prefix="head"
           c:type="PhoshHead"
           parent="GObject.Object"
           glib:type-name="PhoshHead"
           glib:get-type="phosh_head_get_type"
           glib:type-struct="HeadClass">
      <doc xml:space="preserve"
           filename="src/monitor/head.c"
           line="15">An output head

A output head (usually a monitor). Only enabled heads correspond to a
wl_output and #PhoshMonitor. #PhoshHead should be considered an
implementation detail of #PhoshMonitorManager and not be used outside of it.</doc>
      <source-position filename="src/monitor/head-priv.h" line="21"/>
      <constructor name="new_from_wlr_head"
                   c:identifier="phosh_head_new_from_wlr_head">
        <source-position filename="src/monitor/head-priv.h" line="68"/>
        <return-value transfer-ownership="full">
          <type name="Head" c:type="PhoshHead*"/>
        </return-value>
        <parameters>
          <parameter name="wlr_head"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="calculate_supported_mode_scales"
              c:identifier="phosh_head_calculate_supported_mode_scales">
        <source-position filename="src/monitor/head-priv.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float*"/>
        </return-value>
        <parameters>
          <instance-parameter name="head" transfer-ownership="none">
            <type name="Head" c:type="PhoshHead*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="HeadMode" c:type="PhoshHeadMode*"/>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="fractional" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_pending" c:identifier="phosh_head_clear_pending">
        <doc xml:space="preserve"
             filename="src/monitor/head.c"
             line="744">Clear all pending state. This can be used if e.g.  pending state
was set but the output configuration not submitted.</doc>
        <source-position filename="src/monitor/head-priv.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="746">A #PhoshHead</doc>
            <type name="Head" c:type="PhoshHead*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find_mode_by_name"
              c:identifier="phosh_head_find_mode_by_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/monitor/head.c"
             line="617">Look up the given mode by its name.</doc>
        <source-position filename="src/monitor/head-priv.h" line="74"/>
        <return-value>
          <doc xml:space="preserve"
               filename="src/monitor/head.c"
               line="624">The #PhoshHeadMode if found, otherwise %NULL</doc>
          <type name="HeadMode" c:type="PhoshHeadMode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="619">A #PhoshHead</doc>
            <type name="Head" c:type="PhoshHead*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="620">The name of a mode</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_enabled" c:identifier="phosh_head_get_enabled">
        <source-position filename="src/monitor/head-priv.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Head" c:type="PhoshHead*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_mode"
              c:identifier="phosh_head_get_preferred_mode">
        <doc xml:space="preserve"
             filename="src/monitor/head.c"
             line="577">Get the preferred mode</doc>
        <source-position filename="src/monitor/head-priv.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/head.c"
               line="583">The preferred mode</doc>
          <type name="HeadMode" c:type="PhoshHeadMode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="579">The #PhoshHead</doc>
            <type name="Head" c:type="PhoshHead*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wlr_head"
              c:identifier="phosh_head_get_wlr_head"
              glib:get-property="wlr-head">
        <doc xml:space="preserve"
             filename="src/monitor/head.c"
             line="545">Get the heads wlr_head</doc>
        <source-position filename="src/monitor/head-priv.h" line="69"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/monitor/head.c"
               line="551">The wayland head.</doc>
          <type name="gpointer" c:type="zwlr_output_head_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="547">The #PhoshHead</doc>
            <type name="Head" c:type="PhoshHead*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_builtin" c:identifier="phosh_head_is_builtin">
        <doc xml:space="preserve"
             filename="src/monitor/head.c"
             line="600">Checks whether the given head is a builtin display.</doc>
        <source-position filename="src/monitor/head-priv.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/head.c"
               line="606">%TRUE if the head built in panel (e.g. laptop panel or
phone LCD)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="602">A #PhoshHead</doc>
            <type name="Head" c:type="PhoshHead*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_pending_enabled"
              c:identifier="phosh_head_set_pending_enabled">
        <doc xml:space="preserve"
             filename="src/monitor/head.c"
             line="764">Sets a head to pending enabled. This will become active after the next
call to #phosh_monitor_manager_apply_monitor_config().</doc>
        <source-position filename="src/monitor/head-priv.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="766">A #PhoshHead</doc>
            <type name="Head" c:type="PhoshHead*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="767">%TRUE if the head should be enabled, otherwise %FALSE</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pending_transform"
              c:identifier="phosh_head_set_pending_transform">
        <doc xml:space="preserve"
             filename="src/monitor/head.c"
             line="491">Set the heads pending transform. Move pending positions of heads to
the right and below @self around to avoid gaps and overlaps in the
layout.</doc>
        <source-position filename="src/monitor/head-priv.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="493">The head to transform</doc>
            <type name="Head" c:type="PhoshHead*"/>
          </instance-parameter>
          <parameter name="transform" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="494">The transform to apply to the head</doc>
            <type name="MonitorTransform" c:type="PhoshMonitorTransform"/>
          </parameter>
          <parameter name="heads" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/head.c"
                 line="495">All currently known heads</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Head"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wlr-head"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_wlr_head">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="vendor">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="product">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="serial">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="enabled">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="phys">
        <type name="gpointer" c:type="PhoshPhysicalSize"/>
      </field>
      <field name="x">
        <type name="gint32" c:type="int32_t"/>
      </field>
      <field name="y">
        <type name="gint32" c:type="int32_t"/>
      </field>
      <field name="transform">
        <type name="gpointer" c:type="wl_output_transform"/>
      </field>
      <field name="scale">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="mode">
        <type name="HeadMode" c:type="PhoshHeadMode*"/>
      </field>
      <field name="modes">
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="pending">
        <type name="gpointer" c:type="PhoshHeadStatePending"/>
      </field>
      <field name="conn_type">
        <type name="MonitorConnectorType" c:type="PhoshMonitorConnectorType"/>
      </field>
      <field name="wlr_head">
        <type name="gpointer" c:type="zwlr_output_head_v1*"/>
      </field>
      <glib:signal name="head-finished" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="HeadClass"
            c:type="PhoshHeadClass"
            glib:is-gtype-struct-for="Head">
      <source-position filename="src/monitor/head-priv.h" line="21"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="HeadMode" c:type="PhoshHeadMode">
      <source-position filename="src/monitor/head-priv.h" line="34"/>
      <field name="wlr_mode" writable="1">
        <type name="gpointer" c:type="zwlr_output_mode_v1*"/>
      </field>
      <field name="head" writable="1">
        <type name="Head" c:type="PhoshHead*"/>
      </field>
      <field name="width" writable="1">
        <type name="gint32" c:type="int32_t"/>
      </field>
      <field name="height" writable="1">
        <type name="gint32" c:type="int32_t"/>
      </field>
      <field name="refresh" writable="1">
        <type name="gint32" c:type="int32_t"/>
      </field>
      <field name="preferred" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
    </record>
    <record name="HeadStatePending" c:type="PhoshHeadStatePending">
      <source-position filename="src/monitor/head-priv.h" line="61"/>
      <field name="x" writable="1">
        <type name="gint32" c:type="int32_t"/>
      </field>
      <field name="y" writable="1">
        <type name="gint32" c:type="int32_t"/>
      </field>
      <field name="transform" writable="1">
        <type name="gpointer" c:type="wl_output_transform"/>
      </field>
      <field name="mode" writable="1">
        <type name="HeadMode" c:type="PhoshHeadMode*"/>
      </field>
      <field name="scale" writable="1">
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="enabled" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="seen" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <enumeration name="HksDeviceType" c:type="PhoshHksDeviceType">
      <doc xml:space="preserve"
           filename="src/hks-manager.h"
           line="14">Keep in sync with kernels rfkill types</doc>
      <source-position filename="src/hks-manager.h" line="22"/>
      <member name="hks_type_mic" value="10" c:identifier="PHOSH_HKS_TYPE_MIC">
        <doc xml:space="preserve"
             filename="src/hks-manager.h"
             line="16">Microphone hardware kill switch</doc>
      </member>
    </enumeration>
    <class name="HksInfo"
           c:symbol-prefix="hks_info"
           c:type="PhoshHksInfo"
           parent="StatusIcon"
           glib:type-name="PhoshHksInfo"
           glib:get-type="phosh_hks_info_get_type"
           glib:type-struct="HksInfoClass">
      <doc xml:space="preserve"
           filename="src/hks-info.c"
           line="17">A widget to display the HKS status of a device

#PhoshHksInfo displays whether a device is disabled via a hardware
kill switch (HKS).</doc>
      <source-position filename="src/hks-info.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_hks_info_new">
        <source-position filename="src/hks-info.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="blocked"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="device-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="present"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="HksInfoClass"
            c:type="PhoshHksInfoClass"
            glib:is-gtype-struct-for="HksInfo">
      <source-position filename="src/hks-info.h" line="16"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <class name="HksManager"
           c:symbol-prefix="hks_manager"
           c:type="PhoshHksManager"
           parent="GObject.Object"
           glib:type-name="PhoshHksManager"
           glib:get-type="phosh_hks_manager_get_type"
           glib:type-struct="HksManagerClass">
      <doc xml:space="preserve"
           filename="src/hks-manager.c"
           line="34">Tracks hardware kill switch state

Monitor hardware kill switch state. This will be submitted to gnome-settings-daemon
once we figured out the kernel interfaces.</doc>
      <source-position filename="src/hks-manager.h" line="27"/>
      <constructor name="new" c:identifier="phosh_hks_manager_new">
        <source-position filename="src/hks-manager.h" line="29"/>
        <return-value transfer-ownership="full">
          <type name="HksManager" c:type="PhoshHksManager*"/>
        </return-value>
      </constructor>
      <property name="camera-blocked"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="camera-icon-name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="camera-present"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mic-blocked"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mic-icon-name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mic-present"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="HksManagerClass"
            c:type="PhoshHksManagerClass"
            glib:is-gtype-struct-for="HksManager">
      <source-position filename="src/hks-manager.h" line="27"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Home"
           c:symbol-prefix="home"
           c:type="PhoshHome"
           parent="DragSurface"
           glib:type-name="PhoshHome"
           glib:get-type="phosh_home_get_type"
           glib:type-struct="HomeClass">
      <doc xml:space="preserve"
           filename="src/home.c"
           line="34">The home surface contains the overview and the home bar to fold and unfold the overview.

#PhoshHome contains the #PhoshOverview that manages running
applications and the app grid. It also manages a bar at the
bottom of the screen to fold and unfold the #PhoshOverview and a
pill in the center (powerbar) that toggles the OSK.</doc>
      <source-position filename="src/home.h" line="30"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_home_new">
        <source-position filename="src/home.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="layer_shell"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="zwlr_layer_shell_v1*"/>
          </parameter>
          <parameter name="layer_shell_effects"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="zphoc_layer_shell_effects_v1*"/>
          </parameter>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_overview" c:identifier="phosh_home_get_overview">
        <doc xml:space="preserve"
             filename="src/home.c"
             line="667">Get the overview widget</doc>
        <source-position filename="src/home.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/home.c"
               line="673">The overview</doc>
          <type name="Overview" c:type="PhoshOverview*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/home.c"
                 line="669">The home surface</doc>
            <type name="Home" c:type="PhoshHome*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="phosh_home_get_state"
              glib:get-property="state">
        <doc xml:space="preserve"
             filename="src/home.c"
             line="620">Get the current state of the home widget. See [property@Home:state] for details.</doc>
        <source-position filename="src/home.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/home.c"
               line="626">The home widget's state</doc>
          <type name="HomeState" c:type="PhoshHomeState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/home.c"
                 line="622">The home surface</doc>
            <type name="Home" c:type="PhoshHome*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="phosh_home_set_state"
              glib:set-property="state">
        <doc xml:space="preserve"
             filename="src/home.c"
             line="636">Set the state of the home screen. See #PhoshHomeState.</doc>
        <source-position filename="src/home.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/home.c"
                 line="638">The home surface</doc>
            <type name="Home" c:type="PhoshHome*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/home.c"
                 line="639">The state to set</doc>
            <type name="HomeState" c:type="PhoshHomeState"/>
          </parameter>
        </parameters>
      </method>
      <property name="osk-enabled"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/home.c"
             line="543">Whether the osk is currently enabled in the system configuration.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="state"
                writable="1"
                transfer-ownership="none"
                setter="set_state"
                getter="get_state"
                default-value="PHOSH_HOME_STATE_FOLDED">
        <doc xml:space="preserve"
             filename="src/home.c"
             line="531">Whether the home widget is currently folded (only home-bar is
visible) or unfolded (overview is visible). The property is
changed when the widget reaches it's target state.</doc>
        <type name="HomeState"/>
      </property>
    </class>
    <record name="HomeClass"
            c:type="PhoshHomeClass"
            glib:is-gtype-struct-for="Home">
      <source-position filename="src/home.h" line="30"/>
      <field name="parent_class">
        <type name="DragSurfaceClass" c:type="PhoshDragSurfaceClass"/>
      </field>
    </record>
    <enumeration name="HomeState"
                 glib:type-name="PhoshHomeState"
                 glib:get-type="phosh_home_state_get_type"
                 c:type="PhoshHomeState">
      <doc xml:space="preserve"
           filename="src/home.h"
           line="18">The state of #PhoshHome.</doc>
      <member name="folded"
              value="0"
              c:identifier="PHOSH_HOME_STATE_FOLDED"
              glib:nick="folded"
              glib:name="PHOSH_HOME_STATE_FOLDED">
        <doc xml:space="preserve"
             filename="src/home.h"
             line="20">Only home button is visible</doc>
      </member>
      <member name="unfolded"
              value="1"
              c:identifier="PHOSH_HOME_STATE_UNFOLDED"
              glib:nick="unfolded"
              glib:name="PHOSH_HOME_STATE_UNFOLDED">
        <doc xml:space="preserve"
             filename="src/home.h"
             line="21">Home screen takes the whole screen except the top panel</doc>
      </member>
    </enumeration>
    <function-macro name="IDLE_DBUS_IDLE_MONITOR"
                    c:identifier="PHOSH_IDLE_DBUS_IDLE_MONITOR"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IDLE_MONITOR_GET_IFACE"
                    c:identifier="PHOSH_IDLE_DBUS_IDLE_MONITOR_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IDLE_MONITOR_PROXY"
                    c:identifier="PHOSH_IDLE_DBUS_IDLE_MONITOR_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="177"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IDLE_MONITOR_PROXY_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_IDLE_MONITOR_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="178"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IDLE_MONITOR_PROXY_GET_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_IDLE_MONITOR_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="179"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IDLE_MONITOR_SKELETON"
                    c:identifier="PHOSH_IDLE_DBUS_IDLE_MONITOR_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="247"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IDLE_MONITOR_SKELETON_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_IDLE_MONITOR_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="248"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IDLE_MONITOR_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_IDLE_MONITOR_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="249"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_IDLE_MONITOR"
                    c:identifier="PHOSH_IDLE_DBUS_IS_IDLE_MONITOR"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_IDLE_MONITOR_PROXY"
                    c:identifier="PHOSH_IDLE_DBUS_IS_IDLE_MONITOR_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="180"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_IDLE_MONITOR_PROXY_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_IS_IDLE_MONITOR_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="181"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_IDLE_MONITOR_SKELETON"
                    c:identifier="PHOSH_IDLE_DBUS_IS_IDLE_MONITOR_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="250"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_IDLE_MONITOR_SKELETON_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_IS_IDLE_MONITOR_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="251"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_OBJECT"
                    c:identifier="PHOSH_IDLE_DBUS_IS_OBJECT"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="282"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_OBJECT_MANAGER_CLIENT"
                    c:identifier="PHOSH_IDLE_DBUS_IS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="372"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_IS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="373"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_OBJECT_PROXY"
                    c:identifier="PHOSH_IDLE_DBUS_IS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="307"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_OBJECT_PROXY_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_IS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="308"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_OBJECT_SKELETON"
                    c:identifier="PHOSH_IDLE_DBUS_IS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="338"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_IS_OBJECT_SKELETON_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_IS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="339"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="281"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT_GET_IFACE"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="283"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT_MANAGER_CLIENT"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="369"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="370"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT_MANAGER_CLIENT_GET_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT_MANAGER_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="371"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT_PROXY"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="304"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT_PROXY_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="305"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT_PROXY_GET_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="306"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT_SKELETON"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="335"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT_SKELETON_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="336"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IDLE_DBUS_OBJECT_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_IDLE_DBUS_OBJECT_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="337"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EMERGENCY_CALLS"
                    c:identifier="PHOSH_IS_EMERGENCY_CALLS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EMERGENCY_CALLS_PROXY"
                    c:identifier="PHOSH_IS_EMERGENCY_CALLS_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="121"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EMERGENCY_CALLS_PROXY_CLASS"
                    c:identifier="PHOSH_IS_EMERGENCY_CALLS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="122"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EMERGENCY_CALLS_SKELETON"
                    c:identifier="PHOSH_IS_EMERGENCY_CALLS_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="191"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EMERGENCY_CALLS_SKELETON_CLASS"
                    c:identifier="PHOSH_IS_EMERGENCY_CALLS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="192"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="IdleDBusIdleMonitor"
               c:symbol-prefix="idle_dbus_idle_monitor"
               c:type="PhoshIdleDBusIdleMonitor"
               glib:type-name="PhoshIdleDBusIdleMonitor"
               glib:get-type="phosh_idle_dbus_idle_monitor_get_type"
               glib:type-struct="IdleDBusIdleMonitorIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="645">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="56"/>
      <function name="interface_info"
                c:identifier="phosh_idle_dbus_idle_monitor_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="549">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="554">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_idle_dbus_idle_monitor_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="562">Overrides all #GObject properties in the #PhoshIdleDBusIdleMonitor interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="570">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="564">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="565">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_add_idle_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="654">Handler for the #PhoshIdleDBusIdleMonitor::handle-add-idle-watch signal.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_interval" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_user_active_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="655">Handler for the #PhoshIdleDBusIdleMonitor::handle-add-user-active-watch signal.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_idletime">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="656">Handler for the #PhoshIdleDBusIdleMonitor::handle-get-idletime signal.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="657">Handler for the #PhoshIdleDBusIdleMonitor::handle-remove-watch signal.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="watch_fired">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="658">Handler for the #PhoshIdleDBusIdleMonitor::watch-fired signal.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_idle_watch"
              c:identifier="phosh_idle_dbus_idle_monitor_call_add_idle_watch"
              glib:finish-func="call_add_idle_watch_finish"
              glib:sync-func="call_add_idle_watch_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="896">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.AddIdleWatch"&gt;AddIdleWatch()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_idle_dbus_idle_monitor_call_add_idle_watch_finish() to get the result of the operation.

See phosh_idle_dbus_idle_monitor_call_add_idle_watch_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="898">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="arg_interval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="899">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="900">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="901">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="902">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_idle_watch_finish"
              c:identifier="phosh_idle_dbus_idle_monitor_call_add_idle_watch_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="929">Finishes an operation started with phosh_idle_dbus_idle_monitor_call_add_idle_watch().</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="123"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="938">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="931">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="out_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="932">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="933">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_idle_dbus_idle_monitor_call_add_idle_watch().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_idle_watch_sync"
              c:identifier="phosh_idle_dbus_idle_monitor_call_add_idle_watch_sync"
              throws="1"
              glib:async-func="call_add_idle_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="959">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.AddIdleWatch"&gt;AddIdleWatch()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_idle_dbus_idle_monitor_call_add_idle_watch() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="129"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="971">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="961">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="arg_interval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="962">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="out_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="963">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="964">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_user_active_watch"
              c:identifier="phosh_idle_dbus_idle_monitor_call_add_user_active_watch"
              glib:finish-func="call_add_user_active_watch_finish"
              glib:sync-func="call_add_user_active_watch_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1000">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.AddUserActiveWatch"&gt;AddUserActiveWatch()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_idle_dbus_idle_monitor_call_add_user_active_watch_finish() to get the result of the operation.

See phosh_idle_dbus_idle_monitor_call_add_user_active_watch_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1002">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1003">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1004">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1005">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_user_active_watch_finish"
              c:identifier="phosh_idle_dbus_idle_monitor_call_add_user_active_watch_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1030">Finishes an operation started with phosh_idle_dbus_idle_monitor_call_add_user_active_watch().</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="142"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="1039">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1032">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="out_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1033">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1034">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_idle_dbus_idle_monitor_call_add_user_active_watch().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_user_active_watch_sync"
              c:identifier="phosh_idle_dbus_idle_monitor_call_add_user_active_watch_sync"
              throws="1"
              glib:async-func="call_add_user_active_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1060">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.AddUserActiveWatch"&gt;AddUserActiveWatch()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_idle_dbus_idle_monitor_call_add_user_active_watch() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="148"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="1071">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1062">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="out_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1063">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1064">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_idletime"
              c:identifier="phosh_idle_dbus_idle_monitor_call_get_idletime"
              glib:finish-func="call_get_idletime_finish"
              glib:sync-func="call_get_idletime_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="798">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.GetIdletime"&gt;GetIdletime()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_idle_dbus_idle_monitor_call_get_idletime_finish() to get the result of the operation.

See phosh_idle_dbus_idle_monitor_call_get_idletime_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="800">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="801">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="802">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="803">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_idletime_finish"
              c:identifier="phosh_idle_dbus_idle_monitor_call_get_idletime_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="828">Finishes an operation started with phosh_idle_dbus_idle_monitor_call_get_idletime().</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="104"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="837">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="830">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="out_idletime"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="831">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint64" c:type="guint64*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="832">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_idle_dbus_idle_monitor_call_get_idletime().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_idletime_sync"
              c:identifier="phosh_idle_dbus_idle_monitor_call_get_idletime_sync"
              throws="1"
              glib:async-func="call_get_idletime">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="858">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.GetIdletime"&gt;GetIdletime()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_idle_dbus_idle_monitor_call_get_idletime() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="110"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="869">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="860">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="out_idletime"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="861">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint64" c:type="guint64*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="862">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_watch"
              c:identifier="phosh_idle_dbus_idle_monitor_call_remove_watch"
              glib:finish-func="call_remove_watch_finish"
              glib:sync-func="call_remove_watch_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1098">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.RemoveWatch"&gt;RemoveWatch()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_idle_dbus_idle_monitor_call_remove_watch_finish() to get the result of the operation.

See phosh_idle_dbus_idle_monitor_call_remove_watch_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1100">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1101">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1102">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1103">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1104">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_watch_finish"
              c:identifier="phosh_idle_dbus_idle_monitor_call_remove_watch_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1131">Finishes an operation started with phosh_idle_dbus_idle_monitor_call_remove_watch().</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="161"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="1139">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1133">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1134">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_idle_dbus_idle_monitor_call_remove_watch().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_watch_sync"
              c:identifier="phosh_idle_dbus_idle_monitor_call_remove_watch_sync"
              throws="1"
              glib:async-func="call_remove_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1158">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.RemoveWatch"&gt;RemoveWatch()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_idle_dbus_idle_monitor_call_remove_watch() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="166"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="1169">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1160">A #PhoshIdleDBusIdleMonitorProxy.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1161">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1162">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_idle_watch"
              c:identifier="phosh_idle_dbus_idle_monitor_complete_add_idle_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1217">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.AddIdleWatch"&gt;AddIdleWatch()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1219">A #PhoshIdleDBusIdleMonitor.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1220">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1221">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_user_active_watch"
              c:identifier="phosh_idle_dbus_idle_monitor_complete_add_user_active_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1238">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.AddUserActiveWatch"&gt;AddUserActiveWatch()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1240">A #PhoshIdleDBusIdleMonitor.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1241">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1242">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_idletime"
              c:identifier="phosh_idle_dbus_idle_monitor_complete_get_idletime">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1196">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.GetIdletime"&gt;GetIdletime()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1198">A #PhoshIdleDBusIdleMonitor.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1199">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="idletime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1200">Parameter to return.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_watch"
              c:identifier="phosh_idle_dbus_idle_monitor_complete_remove_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1259">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.RemoveWatch"&gt;RemoveWatch()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1261">A #PhoshIdleDBusIdleMonitor.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1262">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_watch_fired"
              c:identifier="phosh_idle_dbus_idle_monitor_emit_watch_fired">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="783">Emits the &lt;link linkend="gdbus-signal-org-gnome-Mutter-IdleMonitor.WatchFired"&gt;"WatchFired"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="785">A #PhoshIdleDBusIdleMonitor.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="786">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-add-idle-watch" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="692">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.AddIdleWatch"&gt;AddIdleWatch()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_idle_dbus_idle_monitor_complete_add_idle_watch() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="702">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="695">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_interval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="696">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-add-user-active-watch" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="715">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.AddUserActiveWatch"&gt;AddUserActiveWatch()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_idle_dbus_idle_monitor_complete_add_user_active_watch() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="724">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="718">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-idletime" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="670">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.GetIdletime"&gt;GetIdletime()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_idle_dbus_idle_monitor_complete_get_idletime() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="679">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="673">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-watch" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="737">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-Mutter-IdleMonitor.RemoveWatch"&gt;RemoveWatch()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_idle_dbus_idle_monitor_complete_remove_watch() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="747">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="740">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="741">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="watch-fired" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="761">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-Mutter-IdleMonitor.WatchFired"&gt;"WatchFired"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="764">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="IdleDBusIdleMonitorIface"
            c:type="PhoshIdleDBusIdleMonitorIface"
            glib:is-gtype-struct-for="IdleDBusIdleMonitor">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="651">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="56"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="653">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_idle_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="654">Handler for the #PhoshIdleDBusIdleMonitor::handle-add-idle-watch signal.</doc>
        <callback name="handle_add_idle_watch">
          <source-position filename="src/dbus/phosh-idle-dbus.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="IdleDBusIdleMonitor"
                    c:type="PhoshIdleDBusIdleMonitor*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_interval" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_add_user_active_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="655">Handler for the #PhoshIdleDBusIdleMonitor::handle-add-user-active-watch signal.</doc>
        <callback name="handle_add_user_active_watch">
          <source-position filename="src/dbus/phosh-idle-dbus.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="IdleDBusIdleMonitor"
                    c:type="PhoshIdleDBusIdleMonitor*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_idletime">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="656">Handler for the #PhoshIdleDBusIdleMonitor::handle-get-idletime signal.</doc>
        <callback name="handle_get_idletime">
          <source-position filename="src/dbus/phosh-idle-dbus.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="IdleDBusIdleMonitor"
                    c:type="PhoshIdleDBusIdleMonitor*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_watch">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="657">Handler for the #PhoshIdleDBusIdleMonitor::handle-remove-watch signal.</doc>
        <callback name="handle_remove_watch">
          <source-position filename="src/dbus/phosh-idle-dbus.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="IdleDBusIdleMonitor"
                    c:type="PhoshIdleDBusIdleMonitor*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="watch_fired">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="658">Handler for the #PhoshIdleDBusIdleMonitor::watch-fired signal.</doc>
        <callback name="watch_fired">
          <source-position filename="src/dbus/phosh-idle-dbus.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="IdleDBusIdleMonitor"
                    c:type="PhoshIdleDBusIdleMonitor*"/>
            </parameter>
            <parameter name="arg_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="IdleDBusIdleMonitorProxy"
           c:symbol-prefix="idle_dbus_idle_monitor_proxy"
           c:type="PhoshIdleDBusIdleMonitorProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshIdleDBusIdleMonitorProxy"
           glib:get-type="phosh_idle_dbus_idle_monitor_proxy_get_type"
           glib:type-struct="IdleDBusIdleMonitorProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="1279">The #PhoshIdleDBusIdleMonitorProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="197"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="IdleDBusIdleMonitor"/>
      <constructor name="new_finish"
                   c:identifier="phosh_idle_dbus_idle_monitor_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1470">Finishes an operation started with phosh_idle_dbus_idle_monitor_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="213"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="1477">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="IdleDBusIdleMonitorProxy"
                c:type="PhoshIdleDBusIdleMonitor*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1472">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_idle_dbus_idle_monitor_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_idle_dbus_idle_monitor_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1560">Finishes an operation started with phosh_idle_dbus_idle_monitor_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="1567">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="IdleDBusIdleMonitorProxy"
                c:type="PhoshIdleDBusIdleMonitor*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1562">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_idle_dbus_idle_monitor_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_idle_dbus_idle_monitor_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1585">Like phosh_idle_dbus_idle_monitor_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_idle_dbus_idle_monitor_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="235"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="1600">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="IdleDBusIdleMonitorProxy"
                c:type="PhoshIdleDBusIdleMonitor*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1587">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1588">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1589">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1590">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1591">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_idle_dbus_idle_monitor_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1495">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_idle_dbus_idle_monitor_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="216"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="1510">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="IdleDBusIdleMonitorProxy"
                c:type="PhoshIdleDBusIdleMonitor*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1497">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1498">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1499">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1500">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1501">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_idle_dbus_idle_monitor_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1440">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_idle_dbus_idle_monitor_proxy_new_finish() to get the result of the operation.

See phosh_idle_dbus_idle_monitor_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1442">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1443">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1444">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1445">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1446">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1447">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1448">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_idle_dbus_idle_monitor_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1530">Like phosh_idle_dbus_idle_monitor_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_idle_dbus_idle_monitor_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_idle_dbus_idle_monitor_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1532">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1533">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1534">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1535">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1536">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1537">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1538">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IdleDBusIdleMonitorProxyPrivate"
              c:type="PhoshIdleDBusIdleMonitorProxyPrivate*"/>
      </field>
    </class>
    <record name="IdleDBusIdleMonitorProxyClass"
            c:type="PhoshIdleDBusIdleMonitorProxyClass"
            glib:is-gtype-struct-for="IdleDBusIdleMonitorProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="1285">Class structure for #PhoshIdleDBusIdleMonitorProxy.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="197"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1287">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="IdleDBusIdleMonitorProxyPrivate"
            c:type="PhoshIdleDBusIdleMonitorProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="185"/>
    </record>
    <class name="IdleDBusIdleMonitorSkeleton"
           c:symbol-prefix="idle_dbus_idle_monitor_skeleton"
           c:type="PhoshIdleDBusIdleMonitorSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshIdleDBusIdleMonitorSkeleton"
           glib:get-type="phosh_idle_dbus_idle_monitor_skeleton_get_type"
           glib:type-struct="IdleDBusIdleMonitorSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="1622">The #PhoshIdleDBusIdleMonitorSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="267"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="IdleDBusIdleMonitor"/>
      <constructor name="new"
                   c:identifier="phosh_idle_dbus_idle_monitor_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1918">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="275"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="1923">The skeleton object.</doc>
          <type name="IdleDBusIdleMonitorSkeleton"
                c:type="PhoshIdleDBusIdleMonitor*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IdleDBusIdleMonitorSkeletonPrivate"
              c:type="PhoshIdleDBusIdleMonitorSkeletonPrivate*"/>
      </field>
    </class>
    <record name="IdleDBusIdleMonitorSkeletonClass"
            c:type="PhoshIdleDBusIdleMonitorSkeletonClass"
            glib:is-gtype-struct-for="IdleDBusIdleMonitorSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="1628">Class structure for #PhoshIdleDBusIdleMonitorSkeleton.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="267"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1630">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="IdleDBusIdleMonitorSkeletonPrivate"
            c:type="PhoshIdleDBusIdleMonitorSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="255"/>
    </record>
    <interface name="IdleDBusObject"
               c:symbol-prefix="idle_dbus_object"
               c:type="PhoshIdleDBusObject"
               glib:type-name="PhoshIdleDBusObject"
               glib:get-type="phosh_idle_dbus_object_get_type"
               glib:type-struct="IdleDBusObjectIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="1944">The #PhoshIdleDBusObject type is a specialized container of interfaces.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="292"/>
      <prerequisite name="Gio.DBusObject"/>
      <method name="get_idle_monitor"
              c:identifier="phosh_idle_dbus_object_get_idle_monitor"
              glib:get-property="idle-monitor">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1974">Gets the #PhoshIdleDBusIdleMonitor instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="300"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="1980">A #PhoshIdleDBusIdleMonitor that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="IdleDBusIdleMonitor" c:type="PhoshIdleDBusIdleMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1976">A #PhoshIdleDBusObject.</doc>
            <type name="IdleDBusObject" c:type="PhoshIdleDBusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_idle_monitor"
              c:identifier="phosh_idle_dbus_object_peek_idle_monitor"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1992">Like phosh_idle_dbus_object_get_idle_monitor() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="301"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="2000">A #PhoshIdleDBusIdleMonitor or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="IdleDBusIdleMonitor" c:type="PhoshIdleDBusIdleMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="1994">A #PhoshIdleDBusObject.</doc>
            <type name="IdleDBusObject" c:type="PhoshIdleDBusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="idle-monitor"
                writable="1"
                transfer-ownership="none"
                getter="get_idle_monitor">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1963">The #PhoshIdleDBusIdleMonitor instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="IdleDBusIdleMonitor"/>
      </property>
    </interface>
    <record name="IdleDBusObjectIface"
            c:type="PhoshIdleDBusObjectIface"
            glib:is-gtype-struct-for="IdleDBusObject">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="1950">Virtual table for the #PhoshIdleDBusObject interface.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="292"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="1952">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="IdleDBusObjectManagerClient"
           c:symbol-prefix="idle_dbus_object_manager_client"
           c:type="PhoshIdleDBusObjectManagerClient"
           parent="Gio.DBusObjectManagerClient"
           glib:type-name="PhoshIdleDBusObjectManagerClient"
           glib:get-type="phosh_idle_dbus_object_manager_client_get_type"
           glib:type-struct="IdleDBusObjectManagerClientClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="2258">The #PhoshIdleDBusObjectManagerClient structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="389"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusObjectManager"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="phosh_idle_dbus_object_manager_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2345">Finishes an operation started with phosh_idle_dbus_object_manager_client_new().</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="407"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="2352">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="IdleDBusObjectManagerClient"
                c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2347">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_idle_dbus_object_manager_client_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_idle_dbus_object_manager_client_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2435">Finishes an operation started with phosh_idle_dbus_object_manager_client_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="426"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="2442">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="IdleDBusObjectManagerClient"
                c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2437">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_idle_dbus_object_manager_client_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_idle_dbus_object_manager_client_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2460">Like phosh_idle_dbus_object_manager_client_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_idle_dbus_object_manager_client_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="429"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="2475">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="IdleDBusObjectManagerClient"
                c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2462">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2463">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2464">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2465">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2466">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_idle_dbus_object_manager_client_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2370">Synchronously creates #GDBusObjectManagerClient using phosh_idle_dbus_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_idle_dbus_object_manager_client_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="410"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="2385">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="IdleDBusObjectManagerClient"
                c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2372">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2373">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2374">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2375">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2376">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_proxy_type"
                c:identifier="phosh_idle_dbus_object_manager_client_get_proxy_type">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2283">A #GDBusProxyTypeFunc that maps @interface_name to the generated #GDBusObjectProxy derived and #GDBusProxy derived types.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="397"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="2292">A #GDBusProxy derived #GType if @interface_name is not %NULL, otherwise the #GType for #PhoshIdleDBusObjectProxy.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2285">A #GDBusObjectManagerClient.</doc>
            <type name="Gio.DBusObjectManagerClient"
                  c:type="GDBusObjectManagerClient*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2286">The object path of the remote object (unused).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interface_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2287">Interface name of the remote object or %NULL to get the object proxy #GType.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2288">User data (unused).</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new"
                c:identifier="phosh_idle_dbus_object_manager_client_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2315">Asynchronously creates #GDBusObjectManagerClient using phosh_idle_dbus_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_idle_dbus_object_manager_client_new_finish() to get the result of the operation.

See phosh_idle_dbus_object_manager_client_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="399"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2317">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2318">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2319">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2320">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2321">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2322">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2323">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_idle_dbus_object_manager_client_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2405">Like phosh_idle_dbus_object_manager_client_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_idle_dbus_object_manager_client_new_for_bus_finish() to get the result of the operation.

See phosh_idle_dbus_object_manager_client_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="418"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2407">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2408">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2409">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2410">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2411">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2412">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2413">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectManagerClient"
              c:type="GDBusObjectManagerClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IdleDBusObjectManagerClientPrivate"
              c:type="PhoshIdleDBusObjectManagerClientPrivate*"/>
      </field>
    </class>
    <record name="IdleDBusObjectManagerClientClass"
            c:type="PhoshIdleDBusObjectManagerClientClass"
            glib:is-gtype-struct-for="IdleDBusObjectManagerClient">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="2264">Class structure for #PhoshIdleDBusObjectManagerClient.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="389"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2266">The parent class.</doc>
        <type name="Gio.DBusObjectManagerClientClass"
              c:type="GDBusObjectManagerClientClass"/>
      </field>
    </record>
    <record name="IdleDBusObjectManagerClientPrivate"
            c:type="PhoshIdleDBusObjectManagerClientPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="377"/>
    </record>
    <class name="IdleDBusObjectProxy"
           c:symbol-prefix="idle_dbus_object_proxy"
           c:type="PhoshIdleDBusObjectProxy"
           parent="Gio.DBusObjectProxy"
           glib:type-name="PhoshIdleDBusObjectProxy"
           glib:get-type="phosh_idle_dbus_object_proxy_get_type"
           glib:type-struct="IdleDBusObjectProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="2024">The #PhoshIdleDBusObjectProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="324"/>
      <implements name="Gio.DBusObject"/>
      <implements name="IdleDBusObject"/>
      <constructor name="new" c:identifier="phosh_idle_dbus_object_proxy_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2101">Creates a new proxy object.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="332"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="2108">The proxy object.</doc>
          <type name="IdleDBusObjectProxy" c:type="PhoshIdleDBusObjectProxy*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2103">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2104">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectProxy" c:type="GDBusObjectProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IdleDBusObjectProxyPrivate"
              c:type="PhoshIdleDBusObjectProxyPrivate*"/>
      </field>
    </class>
    <record name="IdleDBusObjectProxyClass"
            c:type="PhoshIdleDBusObjectProxyClass"
            glib:is-gtype-struct-for="IdleDBusObjectProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="2030">Class structure for #PhoshIdleDBusObjectProxy.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="324"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2032">The parent class.</doc>
        <type name="Gio.DBusObjectProxyClass" c:type="GDBusObjectProxyClass"/>
      </field>
    </record>
    <record name="IdleDBusObjectProxyPrivate"
            c:type="PhoshIdleDBusObjectProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="312"/>
    </record>
    <class name="IdleDBusObjectSkeleton"
           c:symbol-prefix="idle_dbus_object_skeleton"
           c:type="PhoshIdleDBusObjectSkeleton"
           parent="Gio.DBusObjectSkeleton"
           glib:type-name="PhoshIdleDBusObjectSkeleton"
           glib:get-type="phosh_idle_dbus_object_skeleton_get_type"
           glib:type-struct="IdleDBusObjectSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="2119">The #PhoshIdleDBusObjectSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="355"/>
      <implements name="Gio.DBusObject"/>
      <implements name="IdleDBusObject"/>
      <constructor name="new"
                   c:identifier="phosh_idle_dbus_object_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2217">Creates a new skeleton object.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="363"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="2223">The skeleton object.</doc>
          <type name="IdleDBusObjectSkeleton"
                c:type="PhoshIdleDBusObjectSkeleton*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2219">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_idle_monitor"
              c:identifier="phosh_idle_dbus_object_skeleton_set_idle_monitor">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2232">Sets the #PhoshIdleDBusIdleMonitor instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt; on @object.</doc>
        <source-position filename="src/dbus/phosh-idle-dbus.h" line="364"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2234">A #PhoshIdleDBusObjectSkeleton.</doc>
            <type name="IdleDBusObjectSkeleton"
                  c:type="PhoshIdleDBusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-idle-dbus.c"
                 line="2235">A #PhoshIdleDBusIdleMonitor or %NULL to clear the interface.</doc>
            <type name="IdleDBusIdleMonitor"
                  c:type="PhoshIdleDBusIdleMonitor*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectSkeleton" c:type="GDBusObjectSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IdleDBusObjectSkeletonPrivate"
              c:type="PhoshIdleDBusObjectSkeletonPrivate*"/>
      </field>
    </class>
    <record name="IdleDBusObjectSkeletonClass"
            c:type="PhoshIdleDBusObjectSkeletonClass"
            glib:is-gtype-struct-for="IdleDBusObjectSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="2125">Class structure for #PhoshIdleDBusObjectSkeleton.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="355"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="2127">The parent class.</doc>
        <type name="Gio.DBusObjectSkeletonClass"
              c:type="GDBusObjectSkeletonClass"/>
      </field>
    </record>
    <record name="IdleDBusObjectSkeletonPrivate"
            c:type="PhoshIdleDBusObjectSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="343"/>
    </record>
    <class name="IdleManager"
           c:symbol-prefix="idle_manager"
           c:type="PhoshIdleManager"
           parent="GObject.Object"
           glib:type-name="PhoshIdleManager"
           glib:get-type="phosh_idle_manager_get_type"
           glib:type-struct="IdleManagerClass">
      <doc xml:space="preserve"
           filename="src/idle-manager.c"
           line="18">The idle manager singleton

This uses ext_idle_notification_v1 Wayland protocol to
implement mutter's org.gnome.Mutter.IdleMonitor DBus
interface. Since we don't have per monitor information we only care
about core.

Each DBus watch either notifies on idle *or* on activity.</doc>
      <source-position filename="src/idle-manager.h" line="14"/>
      <function name="get_default"
                c:identifier="phosh_idle_manager_get_default">
        <doc xml:space="preserve"
             filename="src/idle-manager.c"
             line="438">Get the idle manager singleton</doc>
        <source-position filename="src/idle-manager.h" line="16"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/idle-manager.c"
               line="443">The idle manager</doc>
          <type name="IdleManager" c:type="PhoshIdleManager*"/>
        </return-value>
      </function>
      <method name="reset_timers"
              c:identifier="phosh_idle_manager_reset_timers">
        <source-position filename="src/idle-manager.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="IdleManager" c:type="PhoshIdleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="IdleManagerClass"
            c:type="PhoshIdleManagerClass"
            glib:is-gtype-struct-for="IdleManager">
      <source-position filename="src/idle-manager.h" line="14"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="KeyboardEvents"
           c:symbol-prefix="keyboard_events"
           c:type="PhoshKeyboardEvents"
           parent="Gio.SimpleActionGroup"
           glib:type-name="PhoshKeyboardEvents"
           glib:get-type="phosh_keyboard_events_get_type"
           glib:type-struct="KeyboardEventsClass">
      <doc xml:space="preserve"
           filename="src/keyboard-events.c"
           line="16">Grabs and manages special keyboard events</doc>
      <source-position filename="src/keyboard-events.h" line="16"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="phosh_keyboard_events_new">
        <source-position filename="src/keyboard-events.h" line="22"/>
        <return-value transfer-ownership="full">
          <type name="KeyboardEvents" c:type="PhoshKeyboardEvents*"/>
        </return-value>
      </constructor>
      <glib:signal name="pressed" when="last">
        <doc xml:space="preserve"
             filename="src/keyboard-events.c"
             line="278">Emitted when a subscribed key binding was pressed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="combo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/keyboard-events.c"
                 line="281">The pressed global shortcut as string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="released" when="last">
        <doc xml:space="preserve"
             filename="src/keyboard-events.c"
             line="291">Emitted when a subscribed key binding was released.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="combo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/keyboard-events.c"
                 line="294">The released global shortcut as string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="KeyboardEventsClass"
            c:type="PhoshKeyboardEventsClass"
            glib:is-gtype-struct-for="KeyboardEvents">
      <source-position filename="src/keyboard-events.h" line="16"/>
      <field name="parent_class">
        <type name="Gio.SimpleActionGroupClass"
              c:type="GSimpleActionGroupClass"/>
      </field>
    </record>
    <class name="Keypad"
           c:symbol-prefix="keypad"
           c:type="PhoshKeypad"
           parent="Gtk.Grid"
           glib:type-name="PhoshKeypad"
           glib:get-type="phosh_keypad_get_type"
           glib:type-struct="KeypadClass">
      <doc xml:space="preserve"
           filename="src/keypad.c"
           line="18">A keypad for pin input

The #PhoshKeypad widget mimics a physical keypad for entering
PIN codes on e.g. a #PhoshLockscreen. It can randomly
distribute (shuffle) the digits.

# CSS nodes

#PhoshKeypad has a single CSS node with name phosh-keypad.</doc>
      <source-position filename="src/keypad.h" line="15"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="phosh_keypad_new">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="308">Create a new #PhoshKeypad widget.</doc>
        <source-position filename="src/keypad.h" line="17"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/keypad.c"
               line="313">the newly created #PhoshKeypad widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="distribute" c:identifier="phosh_keypad_distribute">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="495">Redistribute buttons on keypad. If %PhoshKeypad:shuffle is %TRUE buttons
will be reshuffled otherwise they will be ordered.</doc>
        <source-position filename="src/keypad.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/keypad.c"
                 line="497">a #PhoshKeypad</doc>
            <type name="Keypad" c:type="PhoshKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_end_action"
              c:identifier="phosh_keypad_get_end_action"
              glib:get-property="end-action">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="453">Returns the widget for the lower right corner of
@self.</doc>
        <source-position filename="src/keypad.h" line="26"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/keypad.c"
               line="460">the end action widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/keypad.c"
                 line="455">a #PhoshKeypad</doc>
            <type name="Keypad" c:type="PhoshKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_entry"
              c:identifier="phosh_keypad_get_entry"
              glib:get-property="entry">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="354">Get the connected entry. See phosh_keypad_set_entry() for details.</doc>
        <source-position filename="src/keypad.h" line="20"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/keypad.c"
               line="360">the set #GtkEntry or %NULL if no widget was set</doc>
          <type name="Gtk.Entry" c:type="GtkEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/keypad.c"
                 line="356">a #PhoshKeypad</doc>
            <type name="Keypad" c:type="PhoshKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shuffle"
              c:identifier="phosh_keypad_get_shuffle"
              glib:get-property="shuffle">
        <source-position filename="src/keypad.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Keypad" c:type="PhoshKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_action"
              c:identifier="phosh_keypad_get_start_action"
              glib:get-property="start-action">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="403">Returns the widget for the lower left corner of
@self.</doc>
        <source-position filename="src/keypad.h" line="23"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/keypad.c"
               line="410">the start action widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/keypad.c"
                 line="405">a #PhoshKeypad</doc>
            <type name="Keypad" c:type="PhoshKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_end_action"
              c:identifier="phosh_keypad_set_end_action"
              glib:set-property="end-action">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="421">Sets the widget for the lower right corner of
@self.</doc>
        <source-position filename="src/keypad.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/keypad.c"
                 line="423">a #PhoshKeypad</doc>
            <type name="Keypad" c:type="PhoshKeypad*"/>
          </instance-parameter>
          <parameter name="end_action"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/keypad.c"
                 line="424">the end action widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_entry"
              c:identifier="phosh_keypad_set_entry"
              glib:set-property="entry">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="321">Binds @entry to @self and blocks any input which wouldn't be possible to type
with with the keypad.</doc>
        <source-position filename="src/keypad.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/keypad.c"
                 line="323">a #PhoshKeypad</doc>
            <type name="Keypad" c:type="PhoshKeypad*"/>
          </instance-parameter>
          <parameter name="entry"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/keypad.c"
                 line="324">a #GtkEntry</doc>
            <type name="Gtk.Entry" c:type="GtkEntry*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shuffle"
              c:identifier="phosh_keypad_set_shuffle"
              glib:set-property="shuffle">
        <source-position filename="src/keypad.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Keypad" c:type="PhoshKeypad*"/>
          </instance-parameter>
          <parameter name="shuffle" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_action"
              c:identifier="phosh_keypad_set_start_action"
              glib:set-property="start-action">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="371">Sets the widget for the lower left corner of
@self.</doc>
        <source-position filename="src/keypad.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/keypad.c"
                 line="373">a #PhoshKeypad</doc>
            <type name="Keypad" c:type="PhoshKeypad*"/>
          </instance-parameter>
          <parameter name="start_action"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/keypad.c"
                 line="374">the start action widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="end-action"
                writable="1"
                transfer-ownership="none"
                setter="set_end_action"
                getter="get_end_action">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="237">The widget for the lower end corner of @self.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="entry"
                writable="1"
                transfer-ownership="none"
                setter="set_entry"
                getter="get_entry">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="224">The entry widget connected to the keypad. See phosh_keypad_set_entry() for
details.</doc>
        <type name="Gtk.Entry"/>
      </property>
      <property name="shuffle"
                writable="1"
                transfer-ownership="none"
                setter="set_shuffle"
                getter="get_shuffle"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="261">Whether to shuffle digits. Setting this to %TRUE will make
the digits appear at random locations on the keypad.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="start-action"
                writable="1"
                transfer-ownership="none"
                setter="set_start_action"
                getter="get_start_action">
        <doc xml:space="preserve"
             filename="src/keypad.c"
             line="249">The widget for the lower start corner of @self.</doc>
        <type name="Gtk.Widget"/>
      </property>
    </class>
    <record name="KeypadClass"
            c:type="PhoshKeypadClass"
            glib:is-gtype-struct-for="Keypad">
      <source-position filename="src/keypad.h" line="15"/>
      <field name="parent_class">
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
    </record>
    <class name="LauncherEntryManager"
           c:symbol-prefix="launcher_entry_manager"
           c:type="PhoshLauncherEntryManager"
           parent="Manager"
           glib:type-name="PhoshLauncherEntryManager"
           glib:get-type="phosh_launcher_entry_manager_get_type"
           glib:type-struct="LauncherEntryManagerClass">
      <doc xml:space="preserve"
           filename="src/launcher-entry-manager.c"
           line="21">Handles the launcher entry DBus API. See
https://wiki.ubuntu.com/Unity/LauncherAPI

We currently don't own the `com.canonical.Unity` DBus name which is used
by clients to refresh their values as most clients don't seem to care.</doc>
      <source-position filename="src/launcher-entry-manager.h" line="19"/>
      <constructor name="new" c:identifier="phosh_launcher_entry_manager_new">
        <source-position filename="src/launcher-entry-manager.h" line="22"/>
        <return-value transfer-ownership="full">
          <type name="LauncherEntryManager"
                c:type="PhoshLauncherEntryManager*"/>
        </return-value>
      </constructor>
      <glib:signal name="info-updated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="LauncherEntryManagerClass"
            c:type="PhoshLauncherEntryManagerClass"
            glib:is-gtype-struct-for="LauncherEntryManager">
      <source-position filename="src/launcher-entry-manager.h" line="19"/>
      <field name="parent_class">
        <type name="ManagerClass" c:type="PhoshManagerClass"/>
      </field>
    </record>
    <class name="LayerSurface"
           c:symbol-prefix="layer_surface"
           c:type="PhoshLayerSurface"
           parent="Gtk.Window"
           glib:type-name="PhoshLayerSurface"
           glib:get-type="phosh_layer_surface_get_type"
           glib:type-struct="LayerSurfaceClass">
      <doc xml:space="preserve"
           filename="src/layersurface.c"
           line="18">A #GtkWindow rendered as a LayerSurface by the compositor

#PhoshLayerSurface allows to use a Wayland surface backed by the
layer-shell protocol as #GtkWindow. This allows to render e.g. panels and
backgrounds using GTK.</doc>
      <source-position filename="src/layersurface.h" line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_layer_surface_new">
        <source-position filename="src/layersurface.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="layer_shell"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="wl_output"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="configured">
        <doc xml:space="preserve"
             filename="src/layersurface.h"
             line="22">invoked when layer surface is configured</doc>
        <source-position filename="src/layersurface.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_configured_height"
              c:identifier="phosh_layer_surface_get_configured_height"
              glib:get-property="configured-height">
        <source-position filename="src/layersurface.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_configured_width"
              c:identifier="phosh_layer_surface_get_configured_width"
              glib:get-property="configured-width">
        <source-position filename="src/layersurface.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layer_surface"
              c:identifier="phosh_layer_surface_get_layer_surface">
        <source-position filename="src/layersurface.h" line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zwlr_layer_surface_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_margins"
              c:identifier="phosh_layer_surface_get_margins">
        <source-position filename="src/layersurface.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
          <parameter name="top" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="bottom" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="left" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_wl_surface"
              c:identifier="phosh_layer_surface_get_wl_surface">
        <doc xml:space="preserve"
             filename="src/layersurface.c"
             line="599">Get the layer wayland surface or #NULL if the window
is not yet realized.</doc>
        <source-position filename="src/layersurface.h" line="36"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="wl_surface*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="601">The #PhoshLayerSurface</doc>
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_alpha" c:identifier="phosh_layer_surface_has_alpha">
        <source-position filename="src/layersurface.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_alpha" c:identifier="phosh_layer_surface_set_alpha">
        <source-position filename="src/layersurface.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_exclusive_zone"
              c:identifier="phosh_layer_surface_set_exclusive_zone"
              glib:set-property="exclusive-zone">
        <doc xml:space="preserve"
             filename="src/layersurface.c"
             line="704">Set exclusive zone of a layer surface.</doc>
        <source-position filename="src/layersurface.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="706">The #PhoshLayerSurface</doc>
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
          <parameter name="zone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="707">Size of the exclusive zone.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kbd_interactivity"
              c:identifier="phosh_layer_surface_set_kbd_interactivity"
              glib:set-property="kbd-interactivity">
        <source-position filename="src/layersurface.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
          <parameter name="interactivity" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_layer"
              c:identifier="phosh_layer_surface_set_layer"
              glib:set-property="layer">
        <doc xml:space="preserve"
             filename="src/layersurface.c"
             line="761">Sets the layer a layer-surface belongs to `layer`.</doc>
        <source-position filename="src/layersurface.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="763">The #PhoshLayerSurface</doc>
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
          <parameter name="layer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="764">The layer.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_margins"
              c:identifier="phosh_layer_surface_set_margins">
        <doc xml:space="preserve"
             filename="src/layersurface.c"
             line="658">Set anchor margins of a layer surface.</doc>
        <source-position filename="src/layersurface.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="660">The #PhoshLayerSurface</doc>
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
          <parameter name="top" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="661">the top margin in pixels</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="662">the right margin in pixels</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="bottom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="663">the bottom margin in pixels</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="664">the left margin in pixels</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="phosh_layer_surface_set_size">
        <doc xml:space="preserve"
             filename="src/layersurface.c"
             line="617">Set the size of a layer surface. A value of '-1' indicates 'use old value'</doc>
        <source-position filename="src/layersurface.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="619">The #PhoshLayerSurface</doc>
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="620">the height in pixels</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="621">the width in pixels</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="wl_surface_commit"
              c:identifier="phosh_layer_surface_wl_surface_commit">
        <doc xml:space="preserve"
             filename="src/layersurface.c"
             line="788">Forces a commit of layer surface's state.</doc>
        <source-position filename="src/layersurface.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layersurface.c"
                 line="790">The #PhoshLayerSurface</doc>
            <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="anchor"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="configured-height"
                transfer-ownership="none"
                getter="get_configured_height"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="configured-width"
                transfer-ownership="none"
                getter="get_configured_width"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="exclusive-zone"
                writable="1"
                transfer-ownership="none"
                setter="set_exclusive_zone"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="height"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="kbd-interactivity"
                writable="1"
                transfer-ownership="none"
                setter="set_kbd_interactivity"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="layer"
                writable="1"
                transfer-ownership="none"
                setter="set_layer"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="layer-shell" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="margin-bottom"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="margin-left"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="margin-right"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="margin-top"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="namespace" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="wl-output" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <glib:signal name="configured" when="last">
        <doc xml:space="preserve"
             filename="src/layersurface.c"
             line="547">This signal is emitted once we received the configure event from the
compositor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="LayerSurfaceClass"
            c:type="PhoshLayerSurfaceClass"
            glib:is-gtype-struct-for="LayerSurface">
      <source-position filename="src/layersurface.h" line="31"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/layersurface.h"
             line="21">The parent class</doc>
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="configured">
        <doc xml:space="preserve"
             filename="src/layersurface.h"
             line="22">invoked when layer surface is configured</doc>
        <callback name="configured">
          <source-position filename="src/layersurface.h" line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LayerSurface" c:type="PhoshLayerSurface*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="LayoutClockPosition"
                 glib:type-name="PhoshLayoutClockPosition"
                 glib:get-type="phosh_layout_clock_position_get_type"
                 c:type="PhoshLayoutClockPosition">
      <member name="center"
              value="0"
              c:identifier="PHOSH_LAYOUT_CLOCK_POS_CENTER"
              glib:nick="center"
              glib:name="PHOSH_LAYOUT_CLOCK_POS_CENTER">
      </member>
      <member name="left"
              value="1"
              c:identifier="PHOSH_LAYOUT_CLOCK_POS_LEFT"
              glib:nick="left"
              glib:name="PHOSH_LAYOUT_CLOCK_POS_LEFT">
      </member>
      <member name="right"
              value="2"
              c:identifier="PHOSH_LAYOUT_CLOCK_POS_RIGHT"
              glib:nick="right"
              glib:name="PHOSH_LAYOUT_CLOCK_POS_RIGHT">
      </member>
    </enumeration>
    <class name="LayoutManager"
           c:symbol-prefix="layout_manager"
           c:type="PhoshLayoutManager"
           version="0.29.0"
           parent="GObject.Object"
           glib:type-name="PhoshLayoutManager"
           glib:get-type="phosh_layout_manager_get_type"
           glib:type-struct="LayoutManagerClass">
      <doc xml:space="preserve"
           filename="src/layout-manager.c"
           line="27">Provide information on how to layout shell elements.

Calculations are done in GTKs coordinates (thus scaled).</doc>
      <source-position filename="src/layout-manager.h" line="19"/>
      <constructor name="new" c:identifier="phosh_layout_manager_new">
        <source-position filename="src/layout-manager.h" line="21"/>
        <return-value transfer-ownership="full">
          <type name="LayoutManager" c:type="PhoshLayoutManager*"/>
        </return-value>
      </constructor>
      <method name="get_clock_pos"
              c:identifier="phosh_layout_manager_get_clock_pos">
        <doc xml:space="preserve"
             filename="src/layout-manager.c"
             line="328">The top bar's clock position.</doc>
        <source-position filename="src/layout-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/layout-manager.c"
               line="334">The position</doc>
          <type name="LayoutClockPosition" c:type="PhoshLayoutClockPosition"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layout-manager.c"
                 line="330">The layout manager</doc>
            <type name="LayoutManager" c:type="PhoshLayoutManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_clock_shift"
              c:identifier="phosh_layout_manager_get_clock_shift">
        <doc xml:space="preserve"
             filename="src/layout-manager.c"
             line="344">The settings clock position</doc>
        <source-position filename="src/layout-manager.h" line="23"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/layout-manager.c"
               line="350">How far the settings clock is shifted down</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layout-manager.c"
                 line="346">The layout manager</doc>
            <type name="LayoutManager" c:type="PhoshLayoutManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_corner_shift"
              c:identifier="phosh_layout_manager_get_corner_shift">
        <doc xml:space="preserve"
             filename="src/layout-manager.c"
             line="360">Gets the amount of pixels UI elements should be moved to towards the
center because of rounded corners.</doc>
        <source-position filename="src/layout-manager.h" line="24"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/layout-manager.c"
               line="367">Returns the shift in pixels.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/layout-manager.c"
                 line="362">The layout manager</doc>
            <type name="LayoutManager" c:type="PhoshLayoutManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="layout-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="LayoutManagerClass"
            c:type="PhoshLayoutManagerClass"
            glib:is-gtype-struct-for="LayoutManager">
      <source-position filename="src/layout-manager.h" line="19"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="LocationInfo"
           c:symbol-prefix="location_info"
           c:type="PhoshLocationInfo"
           parent="StatusIcon"
           glib:type-name="PhoshLocationInfo"
           glib:get-type="phosh_location_info_get_type"
           glib:type-struct="LocationInfoClass">
      <doc xml:space="preserve"
           filename="src/location-info.c"
           line="18">A widget to display the location service status

#PhoshLocationInfo indicates if the location service is active.
The widgets container should hide the widget if
#PhoshLocationInfo:active is %FALSE.</doc>
      <source-position filename="src/location-info.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_location_info_new">
        <source-position filename="src/location-info.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="active"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="LocationInfoClass"
            c:type="PhoshLocationInfoClass"
            glib:is-gtype-struct-for="LocationInfo">
      <source-position filename="src/location-info.h" line="16"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <class name="LocationManager"
           c:symbol-prefix="location_manager"
           c:type="PhoshLocationManager"
           parent="GeoClueDBusOrgFreedesktopGeoClue2AgentSkeleton"
           glib:type-name="PhoshLocationManager"
           glib:get-type="phosh_location_manager_get_type"
           glib:type-struct="LocationManagerClass">
      <doc xml:space="preserve"
           filename="src/location-manager.c"
           line="21">Provides the org.freedesktop.GeoClue2.Agent DBus interface

The #PhoshLocationManager provides the agent interface and authorizes
clients based on the org.gnome.system.location 'enabled' gsetting. Note
the phosh needs to be enabled as agent in geoclue's config.</doc>
      <source-position filename="src/location-manager.h" line="15"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GeoClueDBusOrgFreedesktopGeoClue2Agent"/>
      <constructor name="new" c:identifier="phosh_location_manager_new">
        <source-position filename="src/location-manager.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="LocationManager" c:type="PhoshLocationManager*"/>
        </return-value>
      </constructor>
      <property name="active" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enabled"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="LocationManagerClass"
            c:type="PhoshLocationManagerClass"
            glib:is-gtype-struct-for="LocationManager">
      <source-position filename="src/location-manager.h" line="15"/>
      <field name="parent_class">
        <type name="GeoClueDBusOrgFreedesktopGeoClue2AgentSkeletonClass"
              c:type="PhoshGeoClueDBusOrgFreedesktopGeoClue2AgentSkeletonClass"/>
      </field>
    </record>
    <class name="Lockscreen"
           c:symbol-prefix="lockscreen"
           c:type="PhoshLockscreen"
           parent="LayerSurface"
           glib:type-name="PhoshLockscreen"
           glib:get-type="phosh_lockscreen_get_type"
           glib:type-struct="LockscreenClass">
      <doc xml:space="preserve"
           filename="src/lockscreen.c"
           line="39">The main lock screen

The lock screen displayed on the primary output featuring the clock
and unlock keypad. It handles displaying ongoing calls when the
shell is locked and can be extended via plugins.

Other outputs are locked via [type@Phosh.Lockshield]s.

# CSS nodes

`PhoshLockscreen` has a CSS name with the name `phosh-lockscreen`.</doc>
      <source-position filename="src/lockscreen.h" line="56"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_lockscreen_new">
        <source-position filename="src/lockscreen.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="lockscreen_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="layer_shell"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="wl_output"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="calls_manager" transfer-ownership="none">
            <type name="CallsManager" c:type="PhoshCallsManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="unlock_submit">
        <doc xml:space="preserve"
             filename="src/lockscreen.h"
             line="37">This function is invoked when a PIN or password is submitted from the lockscreen
    keypad. It allows to implement a custom authentication mechanism. To indicate success the
    `lockscreen-unlock` signal should be emitted.</doc>
        <source-position filename="src/lockscreen.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Lockscreen" c:type="PhoshLockscreen*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_extra_page"
              c:identifier="phosh_lockscreen_add_extra_page">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="1272">Inserts a custom widget into the "extra" page of the lockscreen. This page sits in-between the
info page and the keypad page. By default, this page does not exist and is not used. Once an
extra page is added, it can be navigated to by swiping and also via calls to
[method@Lockscreen.set_default_page].</doc>
        <source-position filename="src/lockscreen.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen.c"
                 line="1274">The `PhoshLockscreen`</doc>
            <type name="Lockscreen" c:type="PhoshLockscreen*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen.c"
                 line="1275">The extra #GtkWidget to insert into the lockscreen carousel</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_pin_entry"
              c:identifier="phosh_lockscreen_clear_pin_entry">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="1232">Clears the current contents of the keypad PIN entry buffer</doc>
        <source-position filename="src/lockscreen.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen.c"
                 line="1234">The `PhoshLockscreen`</doc>
            <type name="Lockscreen" c:type="PhoshLockscreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_page"
              c:identifier="phosh_lockscreen_get_page"
              glib:get-property="page">
        <source-position filename="src/lockscreen.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lockscreen.c"
               line="1132">The #PhoshLockscreenPage that is currently shown</doc>
          <type name="LockscreenPage" c:type="PhoshLockscreenPage"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen.c"
                 line="1130">The `PhoshLockscreen`</doc>
            <type name="Lockscreen" c:type="PhoshLockscreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pin_entry"
              c:identifier="phosh_lockscreen_get_pin_entry">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="1214">Get the current contents of the keypad PIN entry buffer</doc>
        <source-position filename="src/lockscreen.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lockscreen.c"
               line="1220">the contents of the entry buffer</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen.c"
                 line="1216">The `PhoshLockscreen`</doc>
            <type name="Lockscreen" c:type="PhoshLockscreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default_page"
              c:identifier="phosh_lockscreen_set_default_page">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="1196">Specifies which page should be shown by default when the lockscreen is made visible. This will
also be the page that is shown when the keypad idle timer is reached.</doc>
        <source-position filename="src/lockscreen.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen.c"
                 line="1198">The `PhoshLockscreen`
page: the page to show by default</doc>
            <type name="Lockscreen" c:type="PhoshLockscreen*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="LockscreenPage" c:type="PhoshLockscreenPage"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page" c:identifier="phosh_lockscreen_set_page">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="1158">Scrolls to a specific page in the carousel. The state of the deck
isn't changed.</doc>
        <source-position filename="src/lockscreen.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen.c"
                 line="1160">The `PhoshLockscreen`
page: The page to scroll to</doc>
            <type name="Lockscreen" c:type="PhoshLockscreen*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="LockscreenPage" c:type="PhoshLockscreenPage"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_unlock_status"
              c:identifier="phosh_lockscreen_set_unlock_status">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="1293">Sets the text displayed in the unlock status label.</doc>
        <source-position filename="src/lockscreen.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen.c"
                 line="1295">The `PhoshLockscreen`</doc>
            <type name="Lockscreen" c:type="PhoshLockscreen*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen.c"
                 line="1296">The status text</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="shake_pin_entry"
              c:identifier="phosh_lockscreen_shake_pin_entry">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="1247">Triggers an animation that shakes the PIN entry left and right for a brief period.
After the animation is complete, the PIN entry buffer is cleared. Used to visually indicate
authentication errors.</doc>
        <source-position filename="src/lockscreen.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen.c"
                 line="1249">The `PhoshLockscreen`</doc>
            <type name="Lockscreen" c:type="PhoshLockscreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="calls-manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="979">The calls manager handling incoming and active calls.</doc>
        <type name="CallsManager"/>
      </property>
      <property name="page"
                transfer-ownership="none"
                getter="get_page"
                default-value="PHOSH_LOCKSCREEN_PAGE_UNLOCK">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="998">The currently active carousel page</doc>
        <type name="LockscreenPage"/>
      </property>
      <property name="require-unlock"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="989">Require entering PIN or password to unlock. If false, unlock by swiping up.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="LayerSurface" c:type="PhoshLayerSurface"/>
      </field>
      <glib:signal name="lockscreen-unlock" when="last">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="1011">This signal is emitted when authentication was successful and the
session should be unlocked.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="wakeup-output" when="last">
        <doc xml:space="preserve"
             filename="src/lockscreen.c"
             line="1021">Emitted when the output showing the lock screen should be woken
up.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="LockscreenClass"
            c:type="PhoshLockscreenClass"
            glib:is-gtype-struct-for="Lockscreen">
      <source-position filename="src/lockscreen.h" line="56"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/lockscreen.h"
             line="36">The parent class</doc>
        <type name="LayerSurfaceClass" c:type="PhoshLayerSurfaceClass"/>
      </field>
      <field name="unlock_submit">
        <doc xml:space="preserve"
             filename="src/lockscreen.h"
             line="37">This function is invoked when a PIN or password is submitted from the lockscreen
    keypad. It allows to implement a custom authentication mechanism. To indicate success the
    `lockscreen-unlock` signal should be emitted.</doc>
        <callback name="unlock_submit">
          <source-position filename="src/lockscreen.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Lockscreen" c:type="PhoshLockscreen*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_phosh_reserved1" introspectable="0">
        <callback name="_phosh_reserved1">
          <source-position filename="src/lockscreen.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved2" introspectable="0">
        <callback name="_phosh_reserved2">
          <source-position filename="src/lockscreen.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved3" introspectable="0">
        <callback name="_phosh_reserved3">
          <source-position filename="src/lockscreen.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved4" introspectable="0">
        <callback name="_phosh_reserved4">
          <source-position filename="src/lockscreen.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved5" introspectable="0">
        <callback name="_phosh_reserved5">
          <source-position filename="src/lockscreen.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved6" introspectable="0">
        <callback name="_phosh_reserved6">
          <source-position filename="src/lockscreen.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved7" introspectable="0">
        <callback name="_phosh_reserved7">
          <source-position filename="src/lockscreen.h" line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved8" introspectable="0">
        <callback name="_phosh_reserved8">
          <source-position filename="src/lockscreen.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved9" introspectable="0">
        <callback name="_phosh_reserved9">
          <source-position filename="src/lockscreen.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="LockscreenManager"
           c:symbol-prefix="lockscreen_manager"
           c:type="PhoshLockscreenManager"
           parent="GObject.Object"
           glib:type-name="PhoshLockscreenManager"
           glib:get-type="phosh_lockscreen_manager_get_type"
           glib:type-struct="LockscreenManagerClass">
      <doc xml:space="preserve"
           filename="src/lockscreen-manager.c"
           line="21">The singleton that manages screen locking

The #PhoshLockscreenManager is responsible for putting the #PhoshLockscreen
on the primary output and a #PhoshLockshield on other outputs when the session
becomes idle or when invoked explicitly via phosh_lockscreen_manager_set_locked().</doc>
      <source-position filename="src/lockscreen-manager.h" line="15"/>
      <constructor name="new" c:identifier="phosh_lockscreen_manager_new">
        <source-position filename="src/lockscreen-manager.h" line="21"/>
        <return-value transfer-ownership="full">
          <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
        </return-value>
        <parameters>
          <parameter name="calls_manager" transfer-ownership="none">
            <type name="CallsManager" c:type="PhoshCallsManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_active_time"
              c:identifier="phosh_lockscreen_manager_get_active_time">
        <source-position filename="src/lockscreen-manager.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locked"
              c:identifier="phosh_lockscreen_manager_get_locked"
              glib:get-property="locked">
        <source-position filename="src/lockscreen-manager.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lockscreen"
              c:identifier="phosh_lockscreen_manager_get_lockscreen">
        <doc xml:space="preserve"
             filename="src/lockscreen-manager.c"
             line="483">Gets the current [type@Lockscreen], if one exists (NULL otherwise).</doc>
        <source-position filename="src/lockscreen-manager.h" line="32"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/lockscreen-manager.c"
               line="489">The lockscreen</doc>
          <type name="Lockscreen" c:type="PhoshLockscreen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen-manager.c"
                 line="485">The lockscreen manager</doc>
            <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_page" c:identifier="phosh_lockscreen_manager_get_page">
        <source-position filename="src/lockscreen-manager.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lockscreen-manager.c"
               line="447">The currently shown #PhoshLockscreenPage in the #PhoshLockscreen</doc>
          <type name="LockscreenPage" c:type="PhoshLockscreenPage"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lockscreen-manager.c"
                 line="445">The #PhoshLockscreenManager</doc>
            <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timeout"
              c:identifier="phosh_lockscreen_manager_get_timeout">
        <source-position filename="src/lockscreen-manager.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_locked"
              c:identifier="phosh_lockscreen_manager_set_locked"
              glib:set-property="locked">
        <source-position filename="src/lockscreen-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page" c:identifier="phosh_lockscreen_manager_set_page">
        <source-position filename="src/lockscreen-manager.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="LockscreenPage" c:type="PhoshLockscreenPage"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timeout"
              c:identifier="phosh_lockscreen_manager_set_timeout">
        <source-position filename="src/lockscreen-manager.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="calls-manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="CallsManager"/>
      </property>
      <property name="locked"
                writable="1"
                transfer-ownership="none"
                setter="set_locked"
                getter="get_locked"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="wakeup-outputs" when="last">
        <doc xml:space="preserve"
             filename="src/lockscreen-manager.c"
             line="387">Emitted when the outputs should be woken up.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="LockscreenManagerClass"
            c:type="PhoshLockscreenManagerClass"
            glib:is-gtype-struct-for="LockscreenManager">
      <source-position filename="src/lockscreen-manager.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="LockscreenPage"
                 glib:type-name="PhoshLockscreenPage"
                 glib:get-type="phosh_lockscreen_page_get_type"
                 c:type="PhoshLockscreenPage">
      <doc xml:space="preserve"
           filename="src/lockscreen.h"
           line="13">Indicates which page is currently shown on the lockscreen.

This helps `PhoshGnomeShellManager` to decide when to emit
AcceleratorActivated events over DBus</doc>
      <member name="info"
              value="0"
              c:identifier="PHOSH_LOCKSCREEN_PAGE_INFO"
              glib:nick="info"
              glib:name="PHOSH_LOCKSCREEN_PAGE_INFO">
        <doc xml:space="preserve"
             filename="src/lockscreen.h"
             line="15">The info page (clock, notifications, MPRIS, etc)</doc>
      </member>
      <member name="extra"
              value="1"
              c:identifier="PHOSH_LOCKSCREEN_PAGE_EXTRA"
              glib:nick="extra"
              glib:name="PHOSH_LOCKSCREEN_PAGE_EXTRA">
        <doc xml:space="preserve"
             filename="src/lockscreen.h"
             line="16">The extra page (an extension point used by Lockscreen subclasses)</doc>
      </member>
      <member name="unlock"
              value="2"
              c:identifier="PHOSH_LOCKSCREEN_PAGE_UNLOCK"
              glib:nick="unlock"
              glib:name="PHOSH_LOCKSCREEN_PAGE_UNLOCK">
        <doc xml:space="preserve"
             filename="src/lockscreen.h"
             line="17">The unlock page (where PIN is entered)</doc>
      </member>
    </enumeration>
    <class name="Lockshield"
           c:symbol-prefix="lockshield"
           c:type="PhoshLockshield"
           parent="LayerSurface"
           glib:type-name="PhoshLockshield"
           glib:get-type="phosh_lockshield_get_type"
           glib:type-struct="LockshieldClass">
      <doc xml:space="preserve"
           filename="src/lockshield.c"
           line="15">Lock shield for non primary screens

The #PhoshLockshield is displayed on lock screens
which are not the primary one.</doc>
      <source-position filename="src/lockshield.h" line="14"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_lockshield_new">
        <source-position filename="src/lockshield.h" line="16"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="layer_shell"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="zwlr_layer_shell_v1*"/>
          </parameter>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="LockshieldClass"
            c:type="PhoshLockshieldClass"
            glib:is-gtype-struct-for="Lockshield">
      <source-position filename="src/lockshield.h" line="14"/>
      <field name="parent_class">
        <type name="LayerSurfaceClass" c:type="PhoshLayerSurfaceClass"/>
      </field>
    </record>
    <record name="LogicalSize" c:type="PhoshLogicalSize">
      <source-position filename="src/monitor/monitor.h" line="124"/>
      <field name="x" writable="1">
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="y" writable="1">
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="width" writable="1">
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="height" writable="1">
        <type name="gint32" c:type="gint32"/>
      </field>
    </record>
    <enumeration name="LogoutAction" c:type="PhoshLogoutAction">
      <doc xml:space="preserve"
           filename="src/end-session-dialog.h"
           line="19">The requested action the #PhoshEndSessionDialog should display. This matches
the values of the DBus protocols 'open' request..</doc>
      <source-position filename="src/end-session-dialog.h" line="37"/>
      <member name="logout"
              value="0"
              c:identifier="PHOSH_END_SESSION_ACTION_LOGOUT">
        <doc xml:space="preserve"
             filename="src/end-session-dialog.h"
             line="21">Loguout</doc>
      </member>
      <member name="shutdown"
              value="1"
              c:identifier="PHOSH_END_SESSION_ACTION_SHUTDOWN">
        <doc xml:space="preserve"
             filename="src/end-session-dialog.h"
             line="22">Shutdown</doc>
      </member>
      <member name="reboot"
              value="2"
              c:identifier="PHOSH_END_SESSION_ACTION_REBOOT">
        <doc xml:space="preserve"
             filename="src/end-session-dialog.h"
             line="23">Reboot</doc>
      </member>
    </enumeration>
    <constant name="MODE_DOCKED_PHONE_MASK"
              value="10"
              c:type="PHOSH_MODE_DOCKED_PHONE_MASK">
      <source-position filename="src/mode-manager.h" line="53"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MPRIS_DBUS_IS_MEDIA_PLAYER2"
                    c:identifier="PHOSH_MPRIS_DBUS_IS_MEDIA_PLAYER2"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_IS_MEDIA_PLAYER2_PLAYER"
                    c:identifier="PHOSH_MPRIS_DBUS_IS_MEDIA_PLAYER2_PLAYER"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="198"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_IS_MEDIA_PLAYER2_PLAYER_PROXY"
                    c:identifier="PHOSH_MPRIS_DBUS_IS_MEDIA_PLAYER2_PLAYER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="367"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_IS_MEDIA_PLAYER2_PLAYER_PROXY_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_IS_MEDIA_PLAYER2_PLAYER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="368"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_IS_MEDIA_PLAYER2_PLAYER_SKELETON"
                    c:identifier="PHOSH_MPRIS_DBUS_IS_MEDIA_PLAYER2_PLAYER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="437"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_IS_MEDIA_PLAYER2_PLAYER_SKELETON_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_IS_MEDIA_PLAYER2_PLAYER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="438"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_IS_MEDIA_PLAYER2_PROXY"
                    c:identifier="PHOSH_MPRIS_DBUS_IS_MEDIA_PLAYER2_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="95"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_IS_MEDIA_PLAYER2_PROXY_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_IS_MEDIA_PLAYER2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="96"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_IS_MEDIA_PLAYER2_SKELETON"
                    c:identifier="PHOSH_MPRIS_DBUS_IS_MEDIA_PLAYER2_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="165"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_IS_MEDIA_PLAYER2_SKELETON_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_IS_MEDIA_PLAYER2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="166"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_GET_IFACE"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PLAYER"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PLAYER"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="197"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_GET_IFACE"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="199"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_PROXY"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="364"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_PROXY_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="365"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_PROXY_GET_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="366"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_SKELETON"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="434"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_SKELETON_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="435"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PLAYER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="436"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PROXY"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="92"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PROXY_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="93"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_PROXY_GET_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="94"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_SKELETON"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="162"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_SKELETON_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="163"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MPRIS_DBUS_MEDIA_PLAYER2_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_MPRIS_DBUS_MEDIA_PLAYER2_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/mpris-dbus.h" line="164"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Manager"
           c:symbol-prefix="manager"
           c:type="PhoshManager"
           parent="GObject.Object"
           glib:type-name="PhoshManager"
           glib:get-type="phosh_manager_get_type"
           glib:type-struct="ManagerClass">
      <doc xml:space="preserve"
           filename="src/manager.c"
           line="15">Base class for manager objects

Common functionality for manager objects.</doc>
      <source-position filename="src/manager.h" line="27"/>
      <virtual-method name="idle_init">
        <doc xml:space="preserve"
             filename="src/manager.h"
             line="20">a callback to be invoked once on idle</doc>
        <source-position filename="src/manager.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Manager" c:type="PhoshManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ManagerClass"
            c:type="PhoshManagerClass"
            glib:is-gtype-struct-for="Manager">
      <source-position filename="src/manager.h" line="27"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/manager.h"
             line="19">The parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="idle_init">
        <doc xml:space="preserve"
             filename="src/manager.h"
             line="20">a callback to be invoked once on idle</doc>
        <callback name="idle_init">
          <source-position filename="src/manager.h" line="26"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Manager" c:type="PhoshManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="MediaPlayer"
           c:symbol-prefix="media_player"
           c:type="PhoshMediaPlayer"
           parent="Gtk.Grid"
           glib:type-name="PhoshMediaPlayer"
           glib:get-type="phosh_media_player_get_type"
           glib:type-struct="MediaPlayerClass">
      <doc xml:space="preserve"
           filename="src/media-player.c"
           line="31">A simple MPRIS media player widget

The #PhoshMediaPlayer widget interfaces with
[org.mpris.MediaPlayer2](https://specifications.freedesktop.org/mpris-spec/latest/)
based players allowing to skip through music and raising the player.

Whenever a player is found on the bus the #PhoshMediaPlayer:attached
property is set to %TRUE. This can e.g. be used with
#g_object_bind_property() to toggle the widget's visibility.

# Example

|[
&lt;object class="PhoshMediaPlayer" id="media_player"&gt;
  &lt;property name="visible" bind-source="media_player" bind-property="attached" bind-flags="sync-create"/&gt;
&lt;/object&gt;
]|</doc>
      <source-position filename="src/media-player.h" line="29"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="phosh_media_player_new">
        <source-position filename="src/media-player.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_is_playable"
              c:identifier="phosh_media_player_get_is_playable">
        <source-position filename="src/media-player.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MediaPlayer" c:type="PhoshMediaPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status" c:identifier="phosh_media_player_get_status">
        <source-position filename="src/media-player.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="MediaPlayerStatus" c:type="PhoshMediaPlayerStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MediaPlayer" c:type="PhoshMediaPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="toggle_play_pause"
              c:identifier="phosh_media_player_toggle_play_pause">
        <source-position filename="src/media-player.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MediaPlayer" c:type="PhoshMediaPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="attached"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/media-player.c"
             line="628">Whether a player is attacked. This is %TRUE when we
found a suitable player on the session bus.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="playable"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/media-player.c"
             line="641">Whether the player has a playable track. This is mostly
useful to ignore states where the player does not know
about any track and so no sensible information can be
shown.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="player-raised" when="last">
        <doc xml:space="preserve"
             filename="src/media-player.c"
             line="657">The player was raised to the user</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="MediaPlayerClass"
            c:type="PhoshMediaPlayerClass"
            glib:is-gtype-struct-for="MediaPlayer">
      <source-position filename="src/media-player.h" line="29"/>
      <field name="parent_class">
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
    </record>
    <enumeration name="MediaPlayerStatus" c:type="PhoshMediaPlayerStatus">
      <doc xml:space="preserve"
           filename="src/media-player.h"
           line="13">The status of the media player attached to the wigget</doc>
      <source-position filename="src/media-player.h" line="25"/>
      <member name="stopped"
              value="0"
              c:identifier="PHOSH_MEDIA_PLAYER_STATUS_STOPPED">
        <doc xml:space="preserve"
             filename="src/media-player.h"
             line="15">The player is stopped.</doc>
      </member>
      <member name="paused"
              value="1"
              c:identifier="PHOSH_MEDIA_PLAYER_STATUS_PAUSED">
        <doc xml:space="preserve"
             filename="src/media-player.h"
             line="16">The player is paused.</doc>
      </member>
      <member name="playing"
              value="2"
              c:identifier="PHOSH_MEDIA_PLAYER_STATUS_PLAYING">
        <doc xml:space="preserve"
             filename="src/media-player.h"
             line="17">The player is playing.</doc>
      </member>
    </enumeration>
    <enumeration name="ModeDeviceType"
                 glib:type-name="PhoshModeDeviceType"
                 glib:get-type="phosh_mode_device_type_get_type"
                 c:type="PhoshModeDeviceType">
      <doc xml:space="preserve"
           filename="src/mode-manager.h"
           line="16">A type of device</doc>
      <member name="unknown"
              value="0"
              c:identifier="PHOSH_MODE_DEVICE_TYPE_UNKNOWN"
              glib:nick="unknown"
              glib:name="PHOSH_MODE_DEVICE_TYPE_UNKNOWN">
        <doc xml:space="preserve"
             filename="src/mode-manager.h"
             line="18">unknown device type</doc>
      </member>
      <member name="phone"
              value="1"
              c:identifier="PHOSH_MODE_DEVICE_TYPE_PHONE"
              glib:nick="phone"
              glib:name="PHOSH_MODE_DEVICE_TYPE_PHONE">
        <doc xml:space="preserve"
             filename="src/mode-manager.h"
             line="19">a phone/handset</doc>
      </member>
      <member name="laptop"
              value="2"
              c:identifier="PHOSH_MODE_DEVICE_TYPE_LAPTOP"
              glib:nick="laptop"
              glib:name="PHOSH_MODE_DEVICE_TYPE_LAPTOP">
        <doc xml:space="preserve"
             filename="src/mode-manager.h"
             line="20">a laptop</doc>
      </member>
      <member name="desktop"
              value="3"
              c:identifier="PHOSH_MODE_DEVICE_TYPE_DESKTOP"
              glib:nick="desktop"
              glib:name="PHOSH_MODE_DEVICE_TYPE_DESKTOP">
        <doc xml:space="preserve"
             filename="src/mode-manager.h"
             line="21">a desktop computer</doc>
      </member>
      <member name="tablet"
              value="4"
              c:identifier="PHOSH_MODE_DEVICE_TYPE_TABLET"
              glib:nick="tablet"
              glib:name="PHOSH_MODE_DEVICE_TYPE_TABLET">
        <doc xml:space="preserve"
             filename="src/mode-manager.h"
             line="22">a tablet computer</doc>
      </member>
      <member name="convertible"
              value="5"
              c:identifier="PHOSH_MODE_DEVICE_TYPE_CONVERTIBLE"
              glib:nick="convertible"
              glib:name="PHOSH_MODE_DEVICE_TYPE_CONVERTIBLE">
        <doc xml:space="preserve"
             filename="src/mode-manager.h"
             line="23">a convertible</doc>
      </member>
    </enumeration>
    <bitfield name="ModeHwFlags"
              glib:type-name="PhoshModeHwFlags"
              glib:get-type="phosh_mode_hw_flags_get_type"
              c:type="PhoshModeHwFlags">
      <doc xml:space="preserve"
           filename="src/mode-manager.h"
           line="36">Attached external hardware</doc>
      <member name="none"
              value="0"
              c:identifier="PHOSH_MODE_HW_NONE"
              glib:nick="none"
              glib:name="PHOSH_MODE_HW_NONE">
        <doc xml:space="preserve"
             filename="src/mode-manager.h"
             line="38">nothing</doc>
      </member>
      <member name="ext_display"
              value="2"
              c:identifier="PHOSH_MODE_HW_EXT_DISPLAY"
              glib:nick="ext-display"
              glib:name="PHOSH_MODE_HW_EXT_DISPLAY">
        <doc xml:space="preserve"
             filename="src/mode-manager.h"
             line="39">external display</doc>
      </member>
      <member name="keyboard"
              value="4"
              c:identifier="PHOSH_MODE_HW_KEYBOARD"
              glib:nick="keyboard"
              glib:name="PHOSH_MODE_HW_KEYBOARD">
        <doc xml:space="preserve"
             filename="src/mode-manager.h"
             line="40">keyboard</doc>
      </member>
      <member name="pointer"
              value="8"
              c:identifier="PHOSH_MODE_HW_POINTER"
              glib:nick="pointer"
              glib:name="PHOSH_MODE_HW_POINTER">
        <doc xml:space="preserve"
             filename="src/mode-manager.h"
             line="41">pointing device</doc>
      </member>
    </bitfield>
    <class name="ModeManager"
           c:symbol-prefix="mode_manager"
           c:type="PhoshModeManager"
           parent="Manager"
           glib:type-name="PhoshModeManager"
           glib:get-type="phosh_mode_manager_get_type"
           glib:type-struct="ModeManagerClass">
      <doc xml:space="preserve"
           filename="src/mode-manager.c"
           line="25">Determines the device mode

#PhoshModeManager tracks the device mode and attached hardware.</doc>
      <source-position filename="src/mode-manager.h" line="59"/>
      <constructor name="new" c:identifier="phosh_mode_manager_new">
        <source-position filename="src/mode-manager.h" line="61"/>
        <return-value transfer-ownership="full">
          <type name="ModeManager" c:type="PhoshModeManager*"/>
        </return-value>
      </constructor>
      <method name="get_device_type"
              c:identifier="phosh_mode_manager_get_device_type"
              glib:get-property="device-type">
        <source-position filename="src/mode-manager.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="ModeDeviceType" c:type="PhoshModeDeviceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ModeManager" c:type="PhoshModeManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mimicry"
              c:identifier="phosh_mode_manager_get_mimicry"
              glib:get-property="mimicry">
        <source-position filename="src/mode-manager.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="ModeDeviceType" c:type="PhoshModeDeviceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ModeManager" c:type="PhoshModeManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="device-type"
                transfer-ownership="none"
                getter="get_device_type"
                default-value="PHOSH_MODE_DEVICE_TYPE_PHONE">
        <type name="ModeDeviceType"/>
      </property>
      <property name="hw-flags"
                transfer-ownership="none"
                default-value="PHOSH_MODE_HW_NONE">
        <type name="ModeHwFlags"/>
      </property>
      <property name="mimicry"
                transfer-ownership="none"
                getter="get_mimicry"
                default-value="PHOSH_MODE_DEVICE_TYPE_PHONE">
        <type name="ModeDeviceType"/>
      </property>
    </class>
    <record name="ModeManagerClass"
            c:type="PhoshModeManagerClass"
            glib:is-gtype-struct-for="ModeManager">
      <source-position filename="src/mode-manager.h" line="59"/>
      <field name="parent_class">
        <type name="ManagerClass" c:type="PhoshManagerClass"/>
      </field>
    </record>
    <class name="Monitor"
           c:symbol-prefix="monitor"
           c:type="PhoshMonitor"
           parent="GObject.Object"
           glib:type-name="PhoshMonitor"
           glib:get-type="phosh_monitor_get_type"
           glib:type-struct="MonitorClass">
      <doc xml:space="preserve"
           filename="src/monitor/monitor.c"
           line="23">A monitor

A rectangualar area in the compositor space, usually corresponds to
physical monitor using wl_output and xdg_output Wayland protocols.</doc>
      <source-position filename="src/monitor/monitor.h" line="146"/>
      <constructor name="new_from_wl_output"
                   c:identifier="phosh_monitor_new_from_wl_output">
        <source-position filename="src/monitor/monitor.h" line="148"/>
        <return-value transfer-ownership="full">
          <type name="Monitor" c:type="PhoshMonitor*"/>
        </return-value>
        <parameters>
          <parameter name="wl_output"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="connector_is_builtin"
                c:identifier="phosh_monitor_connector_is_builtin">
        <source-position filename="src/monitor/monitor.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="MonitorConnectorType"
                  c:type="PhoshMonitorConnectorType"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_current_mode"
              c:identifier="phosh_monitor_get_current_mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.c"
             line="471">Get the monitor's current mode</doc>
        <source-position filename="src/monitor/monitor.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="477">The mode</doc>
          <type name="MonitorMode" c:type="PhoshMonitorMode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="473">A monitor</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fractional_scale"
              c:identifier="phosh_monitor_get_fractional_scale">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.c"
             line="700">Get the fractinoal scale determined from the output width and the
current logical width.</doc>
        <source-position filename="src/monitor/monitor.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="706">the fractional scale</doc>
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="702">The monitor</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_power_save_mode"
              c:identifier="phosh_monitor_get_power_save_mode">
        <source-position filename="src/monitor/monitor.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="634">The current power save mode</doc>
          <type name="MonitorPowerSaveMode"
                c:type="PhoshMonitorPowerSaveMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="632">A #PhoshMonitor</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transform" c:identifier="phosh_monitor_get_transform">
        <source-position filename="src/monitor/monitor.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="572">The monitor's output transform</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="570">A #PhoshMonitor</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wl_output"
              c:identifier="phosh_monitor_get_wl_output"
              glib:get-property="wl-output">
        <source-position filename="src/monitor/monitor.h" line="162"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="wl_output*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_gamma" c:identifier="phosh_monitor_has_gamma">
        <source-position filename="src/monitor/monitor.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="559">%TRUE if the monitor can modify gamma</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="557">A #PhoshMonitor</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_builtin" c:identifier="phosh_monitor_is_builtin">
        <source-position filename="src/monitor/monitor.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="507">%TRUE if the monitor built in panel (e.g. laptop panel or
phone LCD)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="505">A #PhoshMonitor</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_configured" c:identifier="phosh_monitor_is_configured">
        <source-position filename="src/monitor/monitor.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="492">%TRUE if the monitor fully configured (received all
state updates from the compositor).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="490">A #PhoshMonitor</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_flipped" c:identifier="phosh_monitor_is_flipped">
        <source-position filename="src/monitor/monitor.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="533">%TRUE if the monitor's output is flipped</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="531">A #PhoshMonitor</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_preferred_mode"
              c:identifier="phosh_monitor_is_preferred_mode">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.c"
             line="734">Checks whether the current monitor's mode is the monitor's
preferred mode.</doc>
        <source-position filename="src/monitor/monitor.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="741">%TRUE if the current mode is the display's preferred mode.
    Otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="736">The monitor</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_color_temp"
              c:identifier="phosh_monitor_set_color_temp">
        <source-position filename="src/monitor/monitor.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
          <parameter name="temp" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_power_save_mode"
              c:identifier="phosh_monitor_set_power_save_mode">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.c"
             line="600">Sets monitor's power save mode.</doc>
        <source-position filename="src/monitor/monitor.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="602">A #PhoshMonitor</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="603">The #PhoshMonitorPowerSaveMode</doc>
            <type name="MonitorPowerSaveMode"
                  c:type="PhoshMonitorPowerSaveMode"/>
          </parameter>
        </parameters>
      </method>
      <property name="n-gamma-entries"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="power-mode"
                transfer-ownership="none"
                default-value="PHOSH_MONITOR_POWER_SAVE_MODE_OFF">
        <type name="MonitorPowerSaveMode"/>
      </property>
      <property name="wl-output"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_wl_output">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="wl_output">
        <type name="gpointer" c:type="wl_output*"/>
      </field>
      <field name="xdg_output">
        <type name="gpointer" c:type="zxdg_output_v1*"/>
      </field>
      <field name="wlr_output_power">
        <type name="gpointer" c:type="zwlr_output_power_v1*"/>
      </field>
      <field name="power_mode">
        <type name="MonitorPowerSaveMode" c:type="PhoshMonitorPowerSaveMode"/>
      </field>
      <field name="x">
        <type name="gint" c:type="int"/>
      </field>
      <field name="y">
        <type name="gint" c:type="int"/>
      </field>
      <field name="width">
        <type name="gint" c:type="int"/>
      </field>
      <field name="height">
        <type name="gint" c:type="int"/>
      </field>
      <field name="subpixel">
        <type name="gint" c:type="int"/>
      </field>
      <field name="transform">
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="logical">
        <type name="gpointer" c:type="PhoshLogicalSize"/>
      </field>
      <field name="width_mm">
        <type name="gint" c:type="int"/>
      </field>
      <field name="height_mm">
        <type name="gint" c:type="int"/>
      </field>
      <field name="vendor">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="product">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="description">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="modes">
        <array name="GLib.Array" c:type="GArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="current_mode">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="preferred_mode">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="conn_type">
        <type name="MonitorConnectorType" c:type="PhoshMonitorConnectorType"/>
      </field>
      <field name="wl_output_done">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="gamma_control">
        <type name="gpointer" c:type="zwlr_gamma_control_v1*"/>
      </field>
      <field name="n_gamma_entries">
        <type name="guint32" c:type="guint32"/>
      </field>
      <glib:signal name="configured" when="last">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.c"
             line="442">Emitted whenever a monitor is fully configured (that is it
received all configuration data from the various wayland
protocols).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="MonitorClass"
            c:type="PhoshMonitorClass"
            glib:is-gtype-struct-for="Monitor">
      <source-position filename="src/monitor/monitor.h" line="146"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="MonitorConnectorType"
                 glib:type-name="PhoshMonitorConnectorType"
                 glib:get-type="phosh_monitor_connector_type_get_type"
                 c:type="PhoshMonitorConnectorType">
      <doc xml:space="preserve"
           filename="src/monitor/monitor.h"
           line="19">This matches the values in drm_mode.h</doc>
      <member name="unknown"
              value="0"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_Unknown"
              glib:nick="unknown"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_Unknown">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="21">unknown connector type</doc>
      </member>
      <member name="vga"
              value="1"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_VGA"
              glib:nick="vga"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_VGA">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="22">a VGA connector</doc>
      </member>
      <member name="dvii"
              value="2"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_DVII"
              glib:nick="dvii"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_DVII">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="23">a DVII connector</doc>
      </member>
      <member name="dvid"
              value="3"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_DVID"
              glib:nick="dvid"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_DVID">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="24">a DVID connector</doc>
      </member>
      <member name="dvia"
              value="4"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_DVIA"
              glib:nick="dvia"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_DVIA">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="25">a DVIA connector</doc>
      </member>
      <member name="composite"
              value="5"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_Composite"
              glib:nick="composite"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_Composite">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="26">a Composite connector</doc>
      </member>
      <member name="svideo"
              value="6"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_SVIDEO"
              glib:nick="svideo"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_SVIDEO">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="27">a SVIDEO connector</doc>
      </member>
      <member name="lvds"
              value="7"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_LVDS"
              glib:nick="lvds"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_LVDS">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="28">a LVDS connector</doc>
      </member>
      <member name="component"
              value="8"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_Component"
              glib:nick="component"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_Component">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="29">a Component connector</doc>
      </member>
      <member name="9pindin"
              value="9"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_9PinDIN"
              glib:nick="9pindin"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_9PinDIN">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="30">a 9PinDIN connector</doc>
      </member>
      <member name="displayport"
              value="10"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_DisplayPort"
              glib:nick="displayport"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_DisplayPort">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="31">a DisplayPort connector</doc>
      </member>
      <member name="hdmia"
              value="11"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_HDMIA"
              glib:nick="hdmia"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_HDMIA">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="32">a HDMIA connector</doc>
      </member>
      <member name="hdmib"
              value="12"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_HDMIB"
              glib:nick="hdmib"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_HDMIB">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="33">a HDMIB connector</doc>
      </member>
      <member name="tv"
              value="13"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_TV"
              glib:nick="tv"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_TV">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="34">a TV connector</doc>
      </member>
      <member name="edp"
              value="14"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_eDP"
              glib:nick="edp"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_eDP">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="35">a eDP connector</doc>
      </member>
      <member name="virtual"
              value="15"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_VIRTUAL"
              glib:nick="virtual"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_VIRTUAL">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="36">a Virtual connector</doc>
      </member>
      <member name="dsi"
              value="16"
              c:identifier="PHOSH_MONITOR_CONNECTOR_TYPE_DSI"
              glib:nick="dsi"
              glib:name="PHOSH_MONITOR_CONNECTOR_TYPE_DSI">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="37">a DSI connector</doc>
      </member>
      <function name="from_name"
                c:identifier="phosh_monitor_connector_type_from_name">
        <source-position filename="src/monitor/monitor.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="MonitorConnectorType"
                c:type="PhoshMonitorConnectorType"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="MonitorManager"
           c:symbol-prefix="monitor_manager"
           c:type="PhoshMonitorManager"
           parent="DBusDisplayConfigSkeleton"
           glib:type-name="PhoshMonitorManager"
           glib:get-type="phosh_monitor_manager_get_type"
           glib:type-struct="MonitorManagerClass">
      <doc xml:space="preserve"
           filename="src/monitor-manager.c"
           line="30">The singleton that manages available monitors

This keeps track of all monitors and handles the
org.gnome.Mutter.DisplayConfig DBus interface via
#PhoshDBusDisplayConfig. This includes individual monitor
configuration as well as blanking/power saving.</doc>
      <source-position filename="src/monitor-manager.h" line="35"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusDisplayConfig"/>
      <constructor name="new" c:identifier="phosh_monitor_manager_new">
        <source-position filename="src/monitor-manager.h" line="38"/>
        <return-value transfer-ownership="full">
          <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <type name="SensorProxyManager" c:type="PhoshSensorProxyManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="apply_monitor_config"
              c:identifier="phosh_monitor_manager_apply_monitor_config">
        <doc xml:space="preserve"
             filename="src/monitor-manager.c"
             line="1503">Applies a full output configuration</doc>
        <source-position filename="src/monitor-manager.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1505">a #PhoshMonitorManager</doc>
            <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="enable_fallback"
              c:identifier="phosh_monitor_manager_enable_fallback">
        <doc xml:space="preserve"
             filename="src/monitor-manager.c"
             line="1597">When all heads are disabled look for a fallback to enable. This can be useful
when e.g. only external display is enabled and that gets unplugged.</doc>
        <source-position filename="src/monitor-manager.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor-manager.c"
               line="1604">%TRUE if a new head was enabled, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1599">a #PhoshMonitorManager</doc>
            <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find_monitor"
              c:identifier="phosh_monitor_manager_find_monitor">
        <doc xml:space="preserve"
             filename="src/monitor-manager.c"
             line="1448">Find a monitor by its name</doc>
        <source-position filename="src/monitor-manager.h" line="42"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/monitor-manager.c"
               line="1455">The monitor if found, otherwise %NULL</doc>
          <type name="Monitor" c:type="PhoshMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1450">The monitor manager</doc>
            <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1451">The name of the monitor to find</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_monitor"
              c:identifier="phosh_monitor_manager_get_monitor">
        <doc xml:space="preserve"
             filename="src/monitor-manager.c"
             line="1430">Get the nth monitor in the list of known monitors</doc>
        <source-position filename="src/monitor-manager.h" line="39"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/monitor-manager.c"
               line="1437">The monitor</doc>
          <type name="Monitor" c:type="PhoshMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1432">The monitor manager</doc>
            <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
          </instance-parameter>
          <parameter name="num" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1433">The number of the monitor to get</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_night_light_supported"
              c:identifier="phosh_monitor_manager_get_night_light_supported">
        <doc xml:space="preserve"
             filename="src/monitor-manager.c"
             line="1641">Checks if any output supports night light</doc>
        <source-position filename="src/monitor-manager.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor-manager.c"
               line="1647">%TRUE if night light is supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1643">The monitor manager</doc>
            <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_monitors"
              c:identifier="phosh_monitor_manager_get_num_monitors">
        <source-position filename="src/monitor-manager.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_monitor_transform"
              c:identifier="phosh_monitor_manager_set_monitor_transform">
        <doc xml:space="preserve"
             filename="src/monitor-manager.c"
             line="1475">Sets monitor's transform. This will become active after the next
call to #phosh_monitor_manager_apply_monitor_config().

If necessary other heads will be moved to avoid gaps and
overlapping heads in the layout.</doc>
        <source-position filename="src/monitor-manager.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1477">A #PhoshMonitor</doc>
            <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
          </instance-parameter>
          <parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1478">The #PhoshMonitor to set the tansform on</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
          <parameter name="transform" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1479">The #PhoshMonitorTransform to set</doc>
            <type name="MonitorTransform" c:type="PhoshMonitorTransform"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_power_save_mode"
              c:identifier="phosh_monitor_manager_set_power_save_mode">
        <doc xml:space="preserve"
             filename="src/monitor-manager.c"
             line="1577">Applies a power save mode to all monitors</doc>
        <source-position filename="src/monitor-manager.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1579">a #PhoshMonitorManager</doc>
            <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1580">The power save mode to set</doc>
            <type name="MonitorPowerSaveMode"
                  c:type="PhoshMonitorPowerSaveMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sensor_proxy_manager"
              c:identifier="phosh_monitor_manager_set_sensor_proxy_manager"
              glib:set-property="sensor-proxy-manager">
        <source-position filename="src/monitor-manager.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <type name="SensorProxyManager" c:type="PhoshSensorProxyManager*"/>
          </parameter>
        </parameters>
      </method>
      <property name="n-monitors" transfer-ownership="none" default-value="0">
        <doc xml:space="preserve"
             filename="src/monitor-manager.c"
             line="1372">The number of currently enabled monitors</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="sensor-proxy-manager"
                writable="1"
                transfer-ownership="none"
                setter="set_sensor_proxy_manager">
        <type name="SensorProxyManager"/>
      </property>
      <glib:signal name="monitor-added" when="last">
        <doc xml:space="preserve"
             filename="src/monitor-manager.c"
             line="1384">Emitted whenever a monitor was added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1387">The #PhoshMonitor being added.</doc>
            <type name="Monitor"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="monitor-removed" when="cleanup">
        <doc xml:space="preserve"
             filename="src/monitor-manager.c"
             line="1396">Emitted whenever a monitor is about to be removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor-manager.c"
                 line="1399">The #PhoshMonitor being removed.</doc>
            <type name="Monitor"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="MonitorManagerClass"
            c:type="PhoshMonitorManagerClass"
            glib:is-gtype-struct-for="MonitorManager">
      <source-position filename="src/monitor-manager.h" line="35"/>
      <field name="parent_class">
        <type name="DBusDisplayConfigSkeletonClass"
              c:type="PhoshDBusDisplayConfigSkeletonClass"/>
      </field>
    </record>
    <enumeration name="MonitorManagerConfigMethod"
                 c:type="PhoshMonitorManagerConfigMethod">
      <doc xml:space="preserve"
           filename="src/monitor-manager.h"
           line="19">Equivalent to the 'method' enum in org.gnome.Mutter.DisplayConfig</doc>
      <source-position filename="src/monitor-manager.h" line="32"/>
      <member name="verify"
              value="0"
              c:identifier="PHOSH_MONITOR_MANAGER_CONFIG_METHOD_VERIFY">
        <doc xml:space="preserve"
             filename="src/monitor-manager.h"
             line="21">verify the configuration</doc>
      </member>
      <member name="temporary"
              value="1"
              c:identifier="PHOSH_MONITOR_MANAGER_CONFIG_METHOD_TEMPORARY">
        <doc xml:space="preserve"
             filename="src/monitor-manager.h"
             line="22">configuration is temporary</doc>
      </member>
      <member name="persistent"
              value="2"
              c:identifier="PHOSH_MONITOR_MANAGER_CONFIG_METHOD_PERSISTENT">
        <doc xml:space="preserve"
             filename="src/monitor-manager.h"
             line="23">configuration is permanent</doc>
      </member>
    </enumeration>
    <record name="MonitorMode" c:type="PhoshMonitorMode">
      <source-position filename="src/monitor/monitor.h" line="94"/>
      <field name="width" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="height" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="refresh" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="flags" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
    </record>
    <enumeration name="MonitorPowerSaveMode"
                 glib:type-name="PhoshMonitorPowerSaveMode"
                 glib:get-type="phosh_monitor_power_save_mode_get_type"
                 c:type="PhoshMonitorPowerSaveMode">
      <doc xml:space="preserve"
           filename="src/monitor/monitor.h"
           line="96">The power save mode of a monitor</doc>
      <member name="off"
              value="0"
              c:identifier="PHOSH_MONITOR_POWER_SAVE_MODE_OFF"
              glib:nick="off"
              glib:name="PHOSH_MONITOR_POWER_SAVE_MODE_OFF">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="99">The monitor is off (saving power)</doc>
      </member>
      <member name="on"
              value="1"
              c:identifier="PHOSH_MONITOR_POWER_SAVE_MODE_ON"
              glib:nick="on"
              glib:name="PHOSH_MONITOR_POWER_SAVE_MODE_ON">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="98">The monitor is on</doc>
      </member>
    </enumeration>
    <enumeration name="MonitorTransform"
                 glib:type-name="PhoshMonitorTransform"
                 glib:get-type="phosh_monitor_transform_get_type"
                 c:type="PhoshMonitorTransform">
      <doc xml:space="preserve"
           filename="src/monitor/monitor.h"
           line="62">the monitors rotation. This corresponds to the values in
the org.gnome.Mutter.DisplayConfig DBus protocol.</doc>
      <member name="normal"
              value="0"
              c:identifier="PHOSH_MONITOR_TRANSFORM_NORMAL"
              glib:nick="normal"
              glib:name="PHOSH_MONITOR_TRANSFORM_NORMAL">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="64">normal</doc>
      </member>
      <member name="90"
              value="1"
              c:identifier="PHOSH_MONITOR_TRANSFORM_90"
              glib:nick="90"
              glib:name="PHOSH_MONITOR_TRANSFORM_90">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="65">90 degree clockwise</doc>
      </member>
      <member name="180"
              value="2"
              c:identifier="PHOSH_MONITOR_TRANSFORM_180"
              glib:nick="180"
              glib:name="PHOSH_MONITOR_TRANSFORM_180">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="66">180 degree clockwise</doc>
      </member>
      <member name="270"
              value="3"
              c:identifier="PHOSH_MONITOR_TRANSFORM_270"
              glib:nick="270"
              glib:name="PHOSH_MONITOR_TRANSFORM_270">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="67">270 degree clockwise</doc>
      </member>
      <member name="flipped"
              value="4"
              c:identifier="PHOSH_MONITOR_TRANSFORM_FLIPPED"
              glib:nick="flipped"
              glib:name="PHOSH_MONITOR_TRANSFORM_FLIPPED">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="68">flipped clockwise</doc>
      </member>
      <member name="flipped_90"
              value="5"
              c:identifier="PHOSH_MONITOR_TRANSFORM_FLIPPED_90"
              glib:nick="flipped-90"
              glib:name="PHOSH_MONITOR_TRANSFORM_FLIPPED_90">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="69">flipped and 90 deg</doc>
      </member>
      <member name="flipped_180"
              value="6"
              c:identifier="PHOSH_MONITOR_TRANSFORM_FLIPPED_180"
              glib:nick="flipped-180"
              glib:name="PHOSH_MONITOR_TRANSFORM_FLIPPED_180">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="70">flipped and 180 deg</doc>
      </member>
      <member name="flipped_270"
              value="7"
              c:identifier="PHOSH_MONITOR_TRANSFORM_FLIPPED_270"
              glib:nick="flipped-270"
              glib:name="PHOSH_MONITOR_TRANSFORM_FLIPPED_270">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.h"
             line="71">flipped and 270 deg</doc>
      </member>
      <function name="is_tilted"
                c:identifier="phosh_monitor_transform_is_tilted">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.c"
             line="759">We consider a transform to tilt the display if it changes the
display orientation from portrait to landscape or vice versa.</doc>
        <source-position filename="src/monitor/monitor.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="766">%TRUE for tilted transforms, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="transform" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/monitor/monitor.c"
                 line="761">a #PhoshMonitorTransform</doc>
            <type name="MonitorTransform" c:type="PhoshMonitorTransform"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="MountManager"
           c:symbol-prefix="mount_manager"
           c:type="PhoshMountManager"
           parent="GObject.Object"
           glib:type-name="PhoshMountManager"
           glib:get-type="phosh_mount_manager_get_type"
           glib:type-struct="MountManagerClass">
      <doc xml:space="preserve"
           filename="src/mount-manager.c"
           line="23">Mount devices

The #PhoshMountManager is responsible for auto mounting volumes and
notifying about new devices.</doc>
      <source-position filename="src/mount-manager.h" line="15"/>
      <constructor name="new" c:identifier="phosh_mount_manager_new">
        <source-position filename="src/mount-manager.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="MountManager" c:type="PhoshMountManager*"/>
        </return-value>
      </constructor>
    </class>
    <record name="MountManagerClass"
            c:type="PhoshMountManagerClass"
            glib:is-gtype-struct-for="MountManager">
      <source-position filename="src/mount-manager.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="MountNotification"
           c:symbol-prefix="mount_notification"
           c:type="PhoshMountNotification"
           parent="Notification"
           glib:type-name="PhoshMountNotification"
           glib:get-type="phosh_mount_notification_get_type"
           glib:type-struct="MountNotificationClass">
      <doc xml:space="preserve"
           filename="src/notifications/mount-notification.c"
           line="19">A notifiction shown when a device got mounted

The #PhoshMountNotification is responsible for showing the necessary
information when a device got mounted and providing the open action.</doc>
      <source-position filename="src/notifications/mount-notification.h"
                       line="15"/>
      <constructor name="new_from_mount"
                   c:identifier="phosh_mount_notification_new_from_mount">
        <source-position filename="src/notifications/mount-notification.h"
                         line="18"/>
        <return-value transfer-ownership="full">
          <type name="MountNotification" c:type="PhoshMountNotification*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mount" transfer-ownership="none">
            <type name="Gio.Mount" c:type="GMount*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="MountNotificationClass"
            c:type="PhoshMountNotificationClass"
            glib:is-gtype-struct-for="MountNotification">
      <source-position filename="src/notifications/mount-notification.h"
                       line="15"/>
      <field name="parent_class">
        <type name="NotificationClass" c:type="PhoshNotificationClass"/>
      </field>
    </record>
    <class name="MountOperation"
           c:symbol-prefix="mount_operation"
           c:type="PhoshMountOperation"
           parent="Gio.MountOperation"
           glib:type-name="PhoshMountOperation"
           glib:get-type="phosh_mount_operation_get_type"
           glib:type-struct="MountOperationClass">
      <doc xml:space="preserve"
           filename="src/mount-operation.c"
           line="17">#GMountOperation using UI

A #GMountOperation that uses system modal dialogs for input.</doc>
      <source-position filename="src/mount-operation.h" line="15"/>
      <constructor name="new" c:identifier="phosh_mount_operation_new">
        <source-position filename="src/mount-operation.h" line="17"/>
        <return-value transfer-ownership="full">
          <type name="MountOperation" c:type="PhoshMountOperation*"/>
        </return-value>
      </constructor>
    </class>
    <record name="MountOperationClass"
            c:type="PhoshMountOperationClass"
            glib:is-gtype-struct-for="MountOperation">
      <source-position filename="src/mount-operation.h" line="15"/>
      <field name="parent_class">
        <type name="Gio.MountOperationClass" c:type="GMountOperationClass"/>
      </field>
    </record>
    <interface name="MprisDBusMediaPlayer2"
               c:symbol-prefix="mpris_dbus_media_player2"
               c:type="PhoshMprisDBusMediaPlayer2"
               glib:type-name="PhoshMprisDBusMediaPlayer2"
               glib:get-type="phosh_mpris_dbus_media_player2_get_type"
               glib:type-struct="MprisDBusMediaPlayer2Iface">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="417">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2.top_of_page"&gt;org.mpris.MediaPlayer2&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="42"/>
      <function name="interface_info"
                c:identifier="phosh_mpris_dbus_media_player2_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="371">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2.top_of_page"&gt;org.mpris.MediaPlayer2&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="376">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_mpris_dbus_media_player2_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="384">Overrides all #GObject properties in the #PhoshMprisDBusMediaPlayer2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="392">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="386">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="387">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_can_raise"
                      invoker="get_can_raise"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="483">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2.CanRaise"&gt;"CanRaise"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="491">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="485">A #PhoshMprisDBusMediaPlayer2.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_desktop_entry"
                      invoker="get_desktop_entry"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="516">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2.DesktopEntry"&gt;"DesktopEntry"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_mpris_dbus_media_player2_dup_desktop_entry() if on another thread.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="526">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="518">A #PhoshMprisDBusMediaPlayer2.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_raise">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="426">Handler for the #PhoshMprisDBusMediaPlayer2::handle-raise signal.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_raise"
              c:identifier="phosh_mpris_dbus_media_player2_call_raise"
              glib:finish-func="call_raise_finish"
              glib:sync-func="call_raise_sync">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="569">Asynchronously invokes the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2.Raise"&gt;Raise()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_mpris_dbus_media_player2_call_raise_finish() to get the result of the operation.

See phosh_mpris_dbus_media_player2_call_raise_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="571">A #PhoshMprisDBusMediaPlayer2Proxy.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="572">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="573">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="574">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_raise_finish"
              c:identifier="phosh_mpris_dbus_media_player2_call_raise_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="599">Finishes an operation started with phosh_mpris_dbus_media_player2_call_raise().</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="68"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="607">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="601">A #PhoshMprisDBusMediaPlayer2Proxy.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="602">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_mpris_dbus_media_player2_call_raise().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_raise_sync"
              c:identifier="phosh_mpris_dbus_media_player2_call_raise_sync"
              throws="1"
              glib:async-func="call_raise">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="626">Synchronously invokes the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2.Raise"&gt;Raise()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_mpris_dbus_media_player2_call_raise() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="73"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="636">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="628">A #PhoshMprisDBusMediaPlayer2Proxy.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="629">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_raise"
              c:identifier="phosh_mpris_dbus_media_player2_complete_raise">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="661">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2.Raise"&gt;Raise()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="663">A #PhoshMprisDBusMediaPlayer2.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="664">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_desktop_entry"
              c:identifier="phosh_mpris_dbus_media_player2_dup_desktop_entry"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="536">Gets a copy of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2.DesktopEntry"&gt;"DesktopEntry"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="85"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="544">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="538">A #PhoshMprisDBusMediaPlayer2.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_raise"
              c:identifier="phosh_mpris_dbus_media_player2_get_can_raise"
              glib:get-property="can-raise"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="483">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2.CanRaise"&gt;"CanRaise"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="491">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="485">A #PhoshMprisDBusMediaPlayer2.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desktop_entry"
              c:identifier="phosh_mpris_dbus_media_player2_get_desktop_entry"
              glib:get-property="desktop-entry"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="516">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2.DesktopEntry"&gt;"DesktopEntry"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_mpris_dbus_media_player2_dup_desktop_entry() if on another thread.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="84"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="526">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="518">A #PhoshMprisDBusMediaPlayer2.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_can_raise"
              c:identifier="phosh_mpris_dbus_media_player2_set_can_raise"
              glib:set-property="can-raise"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="501">Sets the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2.CanRaise"&gt;"CanRaise"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="503">A #PhoshMprisDBusMediaPlayer2.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="504">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_desktop_entry"
              c:identifier="phosh_mpris_dbus_media_player2_set_desktop_entry"
              glib:set-property="desktop-entry"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="554">Sets the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2.DesktopEntry"&gt;"DesktopEntry"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="556">A #PhoshMprisDBusMediaPlayer2.</doc>
            <type name="MprisDBusMediaPlayer2"
                  c:type="PhoshMprisDBusMediaPlayer2*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="557">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-raise"
                writable="1"
                transfer-ownership="none"
                setter="set_can_raise"
                getter="get_can_raise"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="463">Represents the D-Bus property &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2.CanRaise"&gt;"CanRaise"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="desktop-entry"
                writable="1"
                transfer-ownership="none"
                setter="set_desktop_entry"
                getter="get_desktop_entry"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="472">Represents the D-Bus property &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2.DesktopEntry"&gt;"DesktopEntry"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-raise" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="440">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2.Raise"&gt;Raise()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_mpris_dbus_media_player2_complete_raise() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="449">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="443">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="MprisDBusMediaPlayer2Iface"
            c:type="PhoshMprisDBusMediaPlayer2Iface"
            glib:is-gtype-struct-for="MprisDBusMediaPlayer2">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="423">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2.top_of_page"&gt;org.mpris.MediaPlayer2&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="42"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="425">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_raise">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="426">Handler for the #PhoshMprisDBusMediaPlayer2::handle-raise signal.</doc>
        <callback name="handle_raise">
          <source-position filename="src/dbus/mpris-dbus.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MprisDBusMediaPlayer2"
                    c:type="PhoshMprisDBusMediaPlayer2*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_raise">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="427">Getter for the #PhoshMprisDBusMediaPlayer2:can-raise property.</doc>
        <callback name="get_can_raise">
          <source-position filename="src/dbus/mpris-dbus.h" line="38"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="491">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/mpris-dbus.c"
                   line="485">A #PhoshMprisDBusMediaPlayer2.</doc>
              <type name="MprisDBusMediaPlayer2"
                    c:type="PhoshMprisDBusMediaPlayer2*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_desktop_entry">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="428">Getter for the #PhoshMprisDBusMediaPlayer2:desktop-entry property.</doc>
        <callback name="get_desktop_entry">
          <source-position filename="src/dbus/mpris-dbus.h" line="40"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="526">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/mpris-dbus.c"
                   line="518">A #PhoshMprisDBusMediaPlayer2.</doc>
              <type name="MprisDBusMediaPlayer2"
                    c:type="PhoshMprisDBusMediaPlayer2*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="MprisDBusMediaPlayer2Player"
               c:symbol-prefix="mpris_dbus_media_player2_player"
               c:type="PhoshMprisDBusMediaPlayer2Player"
               glib:type-name="PhoshMprisDBusMediaPlayer2Player"
               glib:get-type="phosh_mpris_dbus_media_player2_player_get_type"
               glib:type-struct="MprisDBusMediaPlayer2PlayerIface">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="1879">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2-Player.top_of_page"&gt;org.mpris.MediaPlayer2.Player&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="239"/>
      <function name="interface_info"
                c:identifier="phosh_mpris_dbus_media_player2_player_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1790">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2-Player.top_of_page"&gt;org.mpris.MediaPlayer2.Player&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="247"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1795">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_mpris_dbus_media_player2_player_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1803">Overrides all #GObject properties in the #PhoshMprisDBusMediaPlayer2Player interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="248"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1811">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1805">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1806">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_can_go_next"
                      invoker="get_can_go_next"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2055">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanGoNext"&gt;"CanGoNext"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2063">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2057">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_can_go_previous"
                      invoker="get_can_go_previous"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2088">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanGoPrevious"&gt;"CanGoPrevious"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="229"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2096">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2090">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_can_play"
                      invoker="get_can_play"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2121">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanPlay"&gt;"CanPlay"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2129">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2123">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_can_seek"
                      invoker="get_can_seek"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2154">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanSeek"&gt;"CanSeek"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2162">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2156">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metadata"
                      invoker="get_metadata"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2187">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.Metadata"&gt;"Metadata"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_mpris_dbus_media_player2_player_dup_metadata() if on another thread.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="235"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2197">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2189">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_playback_status"
                      invoker="get_playback_status"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2240">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.PlaybackStatus"&gt;"PlaybackStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_mpris_dbus_media_player2_player_dup_playback_status() if on another thread.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="237"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2250">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2242">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_next">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1888">Handler for the #PhoshMprisDBusMediaPlayer2Player::handle-next signal.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_play_pause">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1889">Handler for the #PhoshMprisDBusMediaPlayer2Player::handle-play-pause signal.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="214"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_previous">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1890">Handler for the #PhoshMprisDBusMediaPlayer2Player::handle-previous signal.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="218"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_seek">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1891">Handler for the #PhoshMprisDBusMediaPlayer2Player::handle-seek signal.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="222"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_Offset" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_next"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_next"
              glib:finish-func="call_next_finish"
              glib:sync-func="call_next_sync">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2385">Asynchronously invokes the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Next"&gt;Next()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_mpris_dbus_media_player2_player_call_next_finish() to get the result of the operation.

See phosh_mpris_dbus_media_player2_player_call_next_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="287"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2387">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2388">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2389">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2390">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_next_finish"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_next_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2415">Finishes an operation started with phosh_mpris_dbus_media_player2_player_call_next().</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="293"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2423">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2417">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2418">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_mpris_dbus_media_player2_player_call_next().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_next_sync"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_next_sync"
              throws="1"
              glib:async-func="call_next">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2442">Synchronously invokes the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Next"&gt;Next()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_mpris_dbus_media_player2_player_call_next() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="298"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2452">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2444">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2445">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_play_pause"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_play_pause"
              glib:finish-func="call_play_pause_finish"
              glib:sync-func="call_play_pause_sync">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2293">Asynchronously invokes the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.PlayPause"&gt;PlayPause()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_mpris_dbus_media_player2_player_call_play_pause_finish() to get the result of the operation.

See phosh_mpris_dbus_media_player2_player_call_play_pause_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2295">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2296">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2297">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2298">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_play_pause_finish"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_play_pause_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2323">Finishes an operation started with phosh_mpris_dbus_media_player2_player_call_play_pause().</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="277"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2331">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2325">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2326">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_mpris_dbus_media_player2_player_call_play_pause().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_play_pause_sync"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_play_pause_sync"
              throws="1"
              glib:async-func="call_play_pause">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2350">Synchronously invokes the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.PlayPause"&gt;PlayPause()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_mpris_dbus_media_player2_player_call_play_pause() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="282"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2360">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2352">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2353">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_previous"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_previous"
              glib:finish-func="call_previous_finish"
              glib:sync-func="call_previous_sync">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2477">Asynchronously invokes the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Previous"&gt;Previous()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_mpris_dbus_media_player2_player_call_previous_finish() to get the result of the operation.

See phosh_mpris_dbus_media_player2_player_call_previous_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="303"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2479">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2480">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2481">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2482">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_previous_finish"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_previous_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2507">Finishes an operation started with phosh_mpris_dbus_media_player2_player_call_previous().</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="309"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2515">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2509">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2510">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_mpris_dbus_media_player2_player_call_previous().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_previous_sync"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_previous_sync"
              throws="1"
              glib:async-func="call_previous">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2534">Synchronously invokes the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Previous"&gt;Previous()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_mpris_dbus_media_player2_player_call_previous() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="314"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2544">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2536">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2537">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_seek"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_seek"
              glib:finish-func="call_seek_finish"
              glib:sync-func="call_seek_sync">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2569">Asynchronously invokes the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Seek"&gt;Seek()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_mpris_dbus_media_player2_player_call_seek_finish() to get the result of the operation.

See phosh_mpris_dbus_media_player2_player_call_seek_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="319"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2571">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="arg_Offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2572">Argument to pass with the method invocation.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2573">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2574">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2575">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_seek_finish"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_seek_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2602">Finishes an operation started with phosh_mpris_dbus_media_player2_player_call_seek().</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="326"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2610">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2604">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2605">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_mpris_dbus_media_player2_player_call_seek().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_seek_sync"
              c:identifier="phosh_mpris_dbus_media_player2_player_call_seek_sync"
              throws="1"
              glib:async-func="call_seek">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2629">Synchronously invokes the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Seek"&gt;Seek()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_mpris_dbus_media_player2_player_call_seek() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="331"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2640">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2631">A #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="arg_Offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2632">Argument to pass with the method invocation.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2633">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_next"
              c:identifier="phosh_mpris_dbus_media_player2_player_complete_next">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2685">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Next"&gt;Next()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="256"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2687">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2688">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_play_pause"
              c:identifier="phosh_mpris_dbus_media_player2_player_complete_play_pause">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2667">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.PlayPause"&gt;PlayPause()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2669">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2670">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_previous"
              c:identifier="phosh_mpris_dbus_media_player2_player_complete_previous">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2703">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Previous"&gt;Previous()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="260"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2705">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2706">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_seek"
              c:identifier="phosh_mpris_dbus_media_player2_player_complete_seek">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2721">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Seek"&gt;Seek()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="264"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2723">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2724">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_metadata"
              c:identifier="phosh_mpris_dbus_media_player2_player_dup_metadata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2207">Gets a copy of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.Metadata"&gt;"Metadata"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="353"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2215">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2209">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_playback_status"
              c:identifier="phosh_mpris_dbus_media_player2_player_dup_playback_status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2260">Gets a copy of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.PlaybackStatus"&gt;"PlaybackStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="357"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2268">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2262">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_go_next"
              c:identifier="phosh_mpris_dbus_media_player2_player_get_can_go_next"
              glib:get-property="can-go-next"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2055">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanGoNext"&gt;"CanGoNext"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="340"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2063">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2057">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_go_previous"
              c:identifier="phosh_mpris_dbus_media_player2_player_get_can_go_previous"
              glib:get-property="can-go-previous"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2088">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanGoPrevious"&gt;"CanGoPrevious"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="343"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2096">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2090">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_play"
              c:identifier="phosh_mpris_dbus_media_player2_player_get_can_play"
              glib:get-property="can-play"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2121">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanPlay"&gt;"CanPlay"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="346"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2129">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2123">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_seek"
              c:identifier="phosh_mpris_dbus_media_player2_player_get_can_seek"
              glib:get-property="can-seek"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2154">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanSeek"&gt;"CanSeek"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="349"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2162">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2156">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="phosh_mpris_dbus_media_player2_player_get_metadata"
              glib:get-property="metadata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2187">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.Metadata"&gt;"Metadata"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_mpris_dbus_media_player2_player_dup_metadata() if on another thread.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="352"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2197">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2189">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_playback_status"
              c:identifier="phosh_mpris_dbus_media_player2_player_get_playback_status"
              glib:get-property="playback-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2240">Gets the value of the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.PlaybackStatus"&gt;"PlaybackStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use phosh_mpris_dbus_media_player2_player_dup_playback_status() if on another thread.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="356"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="2250">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2242">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_can_go_next"
              c:identifier="phosh_mpris_dbus_media_player2_player_set_can_go_next"
              glib:set-property="can-go-next"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2073">Sets the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanGoNext"&gt;"CanGoNext"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="341"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2075">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2076">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_go_previous"
              c:identifier="phosh_mpris_dbus_media_player2_player_set_can_go_previous"
              glib:set-property="can-go-previous"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2106">Sets the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanGoPrevious"&gt;"CanGoPrevious"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="344"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2108">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2109">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_play"
              c:identifier="phosh_mpris_dbus_media_player2_player_set_can_play"
              glib:set-property="can-play"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2139">Sets the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanPlay"&gt;"CanPlay"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="347"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2141">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2142">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_seek"
              c:identifier="phosh_mpris_dbus_media_player2_player_set_can_seek"
              glib:set-property="can-seek"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2172">Sets the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanSeek"&gt;"CanSeek"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="350"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2174">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2175">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata"
              c:identifier="phosh_mpris_dbus_media_player2_player_set_metadata"
              glib:set-property="metadata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2225">Sets the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.Metadata"&gt;"Metadata"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="354"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2227">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2228">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_playback_status"
              c:identifier="phosh_mpris_dbus_media_player2_player_set_playback_status"
              glib:set-property="playback-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2278">Sets the &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.PlaybackStatus"&gt;"PlaybackStatus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="358"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2280">A #PhoshMprisDBusMediaPlayer2Player.</doc>
            <type name="MprisDBusMediaPlayer2Player"
                  c:type="PhoshMprisDBusMediaPlayer2Player*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2281">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-go-next"
                writable="1"
                transfer-ownership="none"
                setter="set_can_go_next"
                getter="get_can_go_next"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1999">Represents the D-Bus property &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanGoNext"&gt;"CanGoNext"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-go-previous"
                writable="1"
                transfer-ownership="none"
                setter="set_can_go_previous"
                getter="get_can_go_previous"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2008">Represents the D-Bus property &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanGoPrevious"&gt;"CanGoPrevious"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-play"
                writable="1"
                transfer-ownership="none"
                setter="set_can_play"
                getter="get_can_play"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2017">Represents the D-Bus property &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanPlay"&gt;"CanPlay"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-seek"
                writable="1"
                transfer-ownership="none"
                setter="set_can_seek"
                getter="get_can_seek"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2026">Represents the D-Bus property &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.CanSeek"&gt;"CanSeek"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="metadata"
                writable="1"
                transfer-ownership="none"
                setter="set_metadata"
                getter="get_metadata">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2035">Represents the D-Bus property &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.Metadata"&gt;"Metadata"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="playback-status"
                writable="1"
                transfer-ownership="none"
                setter="set_playback_status"
                getter="get_playback_status"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2044">Represents the D-Bus property &lt;link linkend="gdbus-property-org-mpris-MediaPlayer2-Player.PlaybackStatus"&gt;"PlaybackStatus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-next" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1931">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Next"&gt;Next()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_mpris_dbus_media_player2_player_complete_next() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1940">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1934">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-play-pause" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1909">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.PlayPause"&gt;PlayPause()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_mpris_dbus_media_player2_player_complete_play_pause() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1918">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1912">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-previous" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1953">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Previous"&gt;Previous()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_mpris_dbus_media_player2_player_complete_previous() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1962">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1956">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-seek" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1975">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-mpris-MediaPlayer2-Player.Seek"&gt;Seek()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_mpris_dbus_media_player2_player_complete_seek() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1985">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1978">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_Offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1979">Argument passed by remote caller.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="MprisDBusMediaPlayer2PlayerIface"
            c:type="PhoshMprisDBusMediaPlayer2PlayerIface"
            glib:is-gtype-struct-for="MprisDBusMediaPlayer2Player">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="1885">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2-Player.top_of_page"&gt;org.mpris.MediaPlayer2.Player&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="239"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1887">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_next">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1888">Handler for the #PhoshMprisDBusMediaPlayer2Player::handle-next signal.</doc>
        <callback name="handle_next">
          <source-position filename="src/dbus/mpris-dbus.h" line="210"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MprisDBusMediaPlayer2Player"
                    c:type="PhoshMprisDBusMediaPlayer2Player*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_play_pause">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1889">Handler for the #PhoshMprisDBusMediaPlayer2Player::handle-play-pause signal.</doc>
        <callback name="handle_play_pause">
          <source-position filename="src/dbus/mpris-dbus.h" line="214"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MprisDBusMediaPlayer2Player"
                    c:type="PhoshMprisDBusMediaPlayer2Player*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_previous">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1890">Handler for the #PhoshMprisDBusMediaPlayer2Player::handle-previous signal.</doc>
        <callback name="handle_previous">
          <source-position filename="src/dbus/mpris-dbus.h" line="218"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MprisDBusMediaPlayer2Player"
                    c:type="PhoshMprisDBusMediaPlayer2Player*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_seek">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1891">Handler for the #PhoshMprisDBusMediaPlayer2Player::handle-seek signal.</doc>
        <callback name="handle_seek">
          <source-position filename="src/dbus/mpris-dbus.h" line="222"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MprisDBusMediaPlayer2Player"
                    c:type="PhoshMprisDBusMediaPlayer2Player*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_Offset" transfer-ownership="none">
              <type name="gint64" c:type="gint64"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_go_next">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1892">Getter for the #PhoshMprisDBusMediaPlayer2Player:can-go-next property.</doc>
        <callback name="get_can_go_next">
          <source-position filename="src/dbus/mpris-dbus.h" line="227"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2063">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/mpris-dbus.c"
                   line="2057">A #PhoshMprisDBusMediaPlayer2Player.</doc>
              <type name="MprisDBusMediaPlayer2Player"
                    c:type="PhoshMprisDBusMediaPlayer2Player*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_go_previous">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1893">Getter for the #PhoshMprisDBusMediaPlayer2Player:can-go-previous property.</doc>
        <callback name="get_can_go_previous">
          <source-position filename="src/dbus/mpris-dbus.h" line="229"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2096">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/mpris-dbus.c"
                   line="2090">A #PhoshMprisDBusMediaPlayer2Player.</doc>
              <type name="MprisDBusMediaPlayer2Player"
                    c:type="PhoshMprisDBusMediaPlayer2Player*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_play">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1894">Getter for the #PhoshMprisDBusMediaPlayer2Player:can-play property.</doc>
        <callback name="get_can_play">
          <source-position filename="src/dbus/mpris-dbus.h" line="231"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2129">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/mpris-dbus.c"
                   line="2123">A #PhoshMprisDBusMediaPlayer2Player.</doc>
              <type name="MprisDBusMediaPlayer2Player"
                    c:type="PhoshMprisDBusMediaPlayer2Player*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_seek">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1895">Getter for the #PhoshMprisDBusMediaPlayer2Player:can-seek property.</doc>
        <callback name="get_can_seek">
          <source-position filename="src/dbus/mpris-dbus.h" line="233"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2162">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/mpris-dbus.c"
                   line="2156">A #PhoshMprisDBusMediaPlayer2Player.</doc>
              <type name="MprisDBusMediaPlayer2Player"
                    c:type="PhoshMprisDBusMediaPlayer2Player*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metadata">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1896">Getter for the #PhoshMprisDBusMediaPlayer2Player:metadata property.</doc>
        <callback name="get_metadata">
          <source-position filename="src/dbus/mpris-dbus.h" line="235"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2197">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/mpris-dbus.c"
                   line="2189">A #PhoshMprisDBusMediaPlayer2Player.</doc>
              <type name="MprisDBusMediaPlayer2Player"
                    c:type="PhoshMprisDBusMediaPlayer2Player*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_playback_status">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1897">Getter for the #PhoshMprisDBusMediaPlayer2Player:playback-status property.</doc>
        <callback name="get_playback_status">
          <source-position filename="src/dbus/mpris-dbus.h" line="237"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="2250">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/mpris-dbus.c"
                   line="2242">A #PhoshMprisDBusMediaPlayer2Player.</doc>
              <type name="MprisDBusMediaPlayer2Player"
                    c:type="PhoshMprisDBusMediaPlayer2Player*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="MprisDBusMediaPlayer2PlayerProxy"
           c:symbol-prefix="mpris_dbus_media_player2_player_proxy"
           c:type="PhoshMprisDBusMediaPlayer2PlayerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshMprisDBusMediaPlayer2PlayerProxy"
           glib:get-type="phosh_mpris_dbus_media_player2_player_proxy_get_type"
           glib:type-struct="MprisDBusMediaPlayer2PlayerProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="2741">The #PhoshMprisDBusMediaPlayer2PlayerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="384"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="MprisDBusMediaPlayer2Player"/>
      <constructor name="new_finish"
                   c:identifier="phosh_mpris_dbus_media_player2_player_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="3079">Finishes an operation started with phosh_mpris_dbus_media_player2_player_proxy_new().</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="400"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="3086">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MprisDBusMediaPlayer2PlayerProxy"
                c:type="PhoshMprisDBusMediaPlayer2Player*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3081">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_mpris_dbus_media_player2_player_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_mpris_dbus_media_player2_player_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="3169">Finishes an operation started with phosh_mpris_dbus_media_player2_player_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="419"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="3176">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MprisDBusMediaPlayer2PlayerProxy"
                c:type="PhoshMprisDBusMediaPlayer2Player*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3171">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_mpris_dbus_media_player2_player_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_mpris_dbus_media_player2_player_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="3194">Like phosh_mpris_dbus_media_player2_player_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_mpris_dbus_media_player2_player_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="422"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="3209">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MprisDBusMediaPlayer2PlayerProxy"
                c:type="PhoshMprisDBusMediaPlayer2Player*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3196">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3197">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3198">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3199">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3200">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_mpris_dbus_media_player2_player_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="3104">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2-Player.top_of_page"&gt;org.mpris.MediaPlayer2.Player&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_mpris_dbus_media_player2_player_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="403"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="3119">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MprisDBusMediaPlayer2PlayerProxy"
                c:type="PhoshMprisDBusMediaPlayer2Player*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3106">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3107">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3108">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3109">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3110">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_mpris_dbus_media_player2_player_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="3049">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2-Player.top_of_page"&gt;org.mpris.MediaPlayer2.Player&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_mpris_dbus_media_player2_player_proxy_new_finish() to get the result of the operation.

See phosh_mpris_dbus_media_player2_player_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="392"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3051">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3052">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3053">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3054">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3055">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3056">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3057">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_mpris_dbus_media_player2_player_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="3139">Like phosh_mpris_dbus_media_player2_player_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_mpris_dbus_media_player2_player_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_mpris_dbus_media_player2_player_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="411"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3141">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3142">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3143">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3144">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3145">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3146">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="3147">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MprisDBusMediaPlayer2PlayerProxyPrivate"
              c:type="PhoshMprisDBusMediaPlayer2PlayerProxyPrivate*"/>
      </field>
    </class>
    <record name="MprisDBusMediaPlayer2PlayerProxyClass"
            c:type="PhoshMprisDBusMediaPlayer2PlayerProxyClass"
            glib:is-gtype-struct-for="MprisDBusMediaPlayer2PlayerProxy">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="2747">Class structure for #PhoshMprisDBusMediaPlayer2PlayerProxy.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="384"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="2749">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="MprisDBusMediaPlayer2PlayerProxyPrivate"
            c:type="PhoshMprisDBusMediaPlayer2PlayerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/mpris-dbus.h" line="372"/>
    </record>
    <class name="MprisDBusMediaPlayer2PlayerSkeleton"
           c:symbol-prefix="mpris_dbus_media_player2_player_skeleton"
           c:type="PhoshMprisDBusMediaPlayer2PlayerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshMprisDBusMediaPlayer2PlayerSkeleton"
           glib:get-type="phosh_mpris_dbus_media_player2_player_skeleton_get_type"
           glib:type-struct="MprisDBusMediaPlayer2PlayerSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="3231">The #PhoshMprisDBusMediaPlayer2PlayerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="454"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="MprisDBusMediaPlayer2Player"/>
      <constructor name="new"
                   c:identifier="phosh_mpris_dbus_media_player2_player_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="3749">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2-Player.top_of_page"&gt;org.mpris.MediaPlayer2.Player&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="462"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="3754">The skeleton object.</doc>
          <type name="MprisDBusMediaPlayer2PlayerSkeleton"
                c:type="PhoshMprisDBusMediaPlayer2Player*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MprisDBusMediaPlayer2PlayerSkeletonPrivate"
              c:type="PhoshMprisDBusMediaPlayer2PlayerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="MprisDBusMediaPlayer2PlayerSkeletonClass"
            c:type="PhoshMprisDBusMediaPlayer2PlayerSkeletonClass"
            glib:is-gtype-struct-for="MprisDBusMediaPlayer2PlayerSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="3237">Class structure for #PhoshMprisDBusMediaPlayer2PlayerSkeleton.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="454"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="3239">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="MprisDBusMediaPlayer2PlayerSkeletonPrivate"
            c:type="PhoshMprisDBusMediaPlayer2PlayerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/mpris-dbus.h" line="442"/>
    </record>
    <class name="MprisDBusMediaPlayer2Proxy"
           c:symbol-prefix="mpris_dbus_media_player2_proxy"
           c:type="PhoshMprisDBusMediaPlayer2Proxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshMprisDBusMediaPlayer2Proxy"
           glib:get-type="phosh_mpris_dbus_media_player2_proxy_get_type"
           glib:type-struct="MprisDBusMediaPlayer2ProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="681">The #PhoshMprisDBusMediaPlayer2Proxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="112"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="MprisDBusMediaPlayer2"/>
      <constructor name="new_finish"
                   c:identifier="phosh_mpris_dbus_media_player2_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="957">Finishes an operation started with phosh_mpris_dbus_media_player2_proxy_new().</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="964">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MprisDBusMediaPlayer2Proxy"
                c:type="PhoshMprisDBusMediaPlayer2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="959">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_mpris_dbus_media_player2_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_mpris_dbus_media_player2_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1047">Finishes an operation started with phosh_mpris_dbus_media_player2_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="147"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1054">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MprisDBusMediaPlayer2Proxy"
                c:type="PhoshMprisDBusMediaPlayer2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1049">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_mpris_dbus_media_player2_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_mpris_dbus_media_player2_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1072">Like phosh_mpris_dbus_media_player2_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_mpris_dbus_media_player2_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1087">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MprisDBusMediaPlayer2Proxy"
                c:type="PhoshMprisDBusMediaPlayer2*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1074">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1075">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1076">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1077">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1078">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_mpris_dbus_media_player2_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="982">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2.top_of_page"&gt;org.mpris.MediaPlayer2&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_mpris_dbus_media_player2_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="997">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MprisDBusMediaPlayer2Proxy"
                c:type="PhoshMprisDBusMediaPlayer2*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="984">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="985">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="986">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="987">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="988">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_mpris_dbus_media_player2_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="927">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2.top_of_page"&gt;org.mpris.MediaPlayer2&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_mpris_dbus_media_player2_proxy_new_finish() to get the result of the operation.

See phosh_mpris_dbus_media_player2_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="929">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="930">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="931">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="932">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="933">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="934">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="935">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_mpris_dbus_media_player2_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1017">Like phosh_mpris_dbus_media_player2_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_mpris_dbus_media_player2_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_mpris_dbus_media_player2_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1019">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1020">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1021">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1022">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1023">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1024">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/mpris-dbus.c"
                 line="1025">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MprisDBusMediaPlayer2ProxyPrivate"
              c:type="PhoshMprisDBusMediaPlayer2ProxyPrivate*"/>
      </field>
    </class>
    <record name="MprisDBusMediaPlayer2ProxyClass"
            c:type="PhoshMprisDBusMediaPlayer2ProxyClass"
            glib:is-gtype-struct-for="MprisDBusMediaPlayer2Proxy">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="687">Class structure for #PhoshMprisDBusMediaPlayer2Proxy.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="112"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="689">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="MprisDBusMediaPlayer2ProxyPrivate"
            c:type="PhoshMprisDBusMediaPlayer2ProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/mpris-dbus.h" line="100"/>
    </record>
    <class name="MprisDBusMediaPlayer2Skeleton"
           c:symbol-prefix="mpris_dbus_media_player2_skeleton"
           c:type="PhoshMprisDBusMediaPlayer2Skeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshMprisDBusMediaPlayer2Skeleton"
           glib:get-type="phosh_mpris_dbus_media_player2_skeleton_get_type"
           glib:type-struct="MprisDBusMediaPlayer2SkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="1109">The #PhoshMprisDBusMediaPlayer2Skeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="182"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="MprisDBusMediaPlayer2"/>
      <constructor name="new"
                   c:identifier="phosh_mpris_dbus_media_player2_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1575">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2.top_of_page"&gt;org.mpris.MediaPlayer2&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/mpris-dbus.h" line="190"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1580">The skeleton object.</doc>
          <type name="MprisDBusMediaPlayer2Skeleton"
                c:type="PhoshMprisDBusMediaPlayer2*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MprisDBusMediaPlayer2SkeletonPrivate"
              c:type="PhoshMprisDBusMediaPlayer2SkeletonPrivate*"/>
      </field>
    </class>
    <record name="MprisDBusMediaPlayer2SkeletonClass"
            c:type="PhoshMprisDBusMediaPlayer2SkeletonClass"
            glib:is-gtype-struct-for="MprisDBusMediaPlayer2Skeleton">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="1115">Class structure for #PhoshMprisDBusMediaPlayer2Skeleton.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="182"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1117">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="MprisDBusMediaPlayer2SkeletonPrivate"
            c:type="PhoshMprisDBusMediaPlayer2SkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/mpris-dbus.h" line="170"/>
    </record>
    <constant name="NOTIFICATIONS_SCHEMA_ID"
              value="org.gnome.desktop.notifications"
              c:type="PHOSH_NOTIFICATIONS_SCHEMA_ID">
      <source-position filename="src/notifications/notify-manager.h"
                       line="17"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="NOTIFICATION_DEFAULT_ACTION"
              value="default"
              c:type="PHOSH_NOTIFICATION_DEFAULT_ACTION">
      <source-position filename="src/notifications/notification.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="NOTIFICATION_DEFAULT_TIMEOUT"
              value="5000"
              c:type="PHOSH_NOTIFICATION_DEFAULT_TIMEOUT">
      <source-position filename="src/notifications/notification.h" line="41"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="NOTIFY_DBUS_IS_NOTIFICATIONS"
                    c:identifier="PHOSH_NOTIFY_DBUS_IS_NOTIFICATIONS"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_IS_NOTIFICATIONS_PROXY"
                    c:identifier="PHOSH_NOTIFY_DBUS_IS_NOTIFICATIONS_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="222"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_IS_NOTIFICATIONS_PROXY_CLASS"
                    c:identifier="PHOSH_NOTIFY_DBUS_IS_NOTIFICATIONS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="223"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_IS_NOTIFICATIONS_SKELETON"
                    c:identifier="PHOSH_NOTIFY_DBUS_IS_NOTIFICATIONS_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="292"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_IS_NOTIFICATIONS_SKELETON_CLASS"
                    c:identifier="PHOSH_NOTIFY_DBUS_IS_NOTIFICATIONS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="293"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_NOTIFICATIONS"
                    c:identifier="PHOSH_NOTIFY_DBUS_NOTIFICATIONS"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_NOTIFICATIONS_GET_IFACE"
                    c:identifier="PHOSH_NOTIFY_DBUS_NOTIFICATIONS_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_NOTIFICATIONS_PROXY"
                    c:identifier="PHOSH_NOTIFY_DBUS_NOTIFICATIONS_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="219"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_NOTIFICATIONS_PROXY_CLASS"
                    c:identifier="PHOSH_NOTIFY_DBUS_NOTIFICATIONS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="220"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_NOTIFICATIONS_PROXY_GET_CLASS"
                    c:identifier="PHOSH_NOTIFY_DBUS_NOTIFICATIONS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="221"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_NOTIFICATIONS_SKELETON"
                    c:identifier="PHOSH_NOTIFY_DBUS_NOTIFICATIONS_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="289"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_NOTIFICATIONS_SKELETON_CLASS"
                    c:identifier="PHOSH_NOTIFY_DBUS_NOTIFICATIONS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="290"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFY_DBUS_NOTIFICATIONS_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_NOTIFY_DBUS_NOTIFICATIONS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/notify-dbus.h" line="291"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="NetworkAuthManager"
           c:symbol-prefix="network_auth_manager"
           c:type="PhoshNetworkAuthManager"
           parent="GObject.Object"
           glib:type-name="PhoshNetworkAuthManager"
           glib:get-type="phosh_network_auth_manager_get_type"
           glib:type-struct="NetworkAuthManagerClass">
      <doc xml:space="preserve"
           filename="src/network-auth-manager.c"
           line="25">Handles the interaction between networkmanager and the auth prompts

Wi-Fi and other credentials are handled with #ShellNetworkAgent which implements
#NMSecretAgentOld to interface with NetworkManager. When a credential for a connection are requested,
a new #PhoshNetworkAuthPrompt is created, which asks the user various
credentials depending on the connection type and details (e.g. access point security method).

For VPN prompts the plugins auth helper is being run and the the list of secrets to request
is fed to #PhoshNetworkAuthPrompt.

TODO: Support more connection types</doc>
      <source-position filename="src/network-auth-manager.h" line="15"/>
      <constructor name="new" c:identifier="phosh_network_auth_manager_new">
        <source-position filename="src/network-auth-manager.h" line="17"/>
        <return-value transfer-ownership="full">
          <type name="NetworkAuthManager" c:type="PhoshNetworkAuthManager*"/>
        </return-value>
      </constructor>
    </class>
    <record name="NetworkAuthManagerClass"
            c:type="PhoshNetworkAuthManagerClass"
            glib:is-gtype-struct-for="NetworkAuthManager">
      <source-position filename="src/network-auth-manager.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Notification"
           c:symbol-prefix="notification"
           c:type="PhoshNotification"
           parent="GObject.Object"
           glib:type-name="PhoshNotification"
           glib:get-type="phosh_notification_get_type"
           glib:type-struct="NotificationClass">
      <doc xml:space="preserve"
           filename="src/notifications/notification.c"
           line="18">A notification displayed to the user

A notification usually consists of a summary, a body (the content)
and an icon.</doc>
      <source-position filename="src/notifications/notification.h" line="61"/>
      <constructor name="new" c:identifier="phosh_notification_new">
        <source-position filename="src/notifications/notification.h"
                         line="64"/>
        <return-value transfer-ownership="full">
          <type name="Notification" c:type="PhoshNotification*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="app_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
          <parameter name="summary" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="body" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="image" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="urgency" transfer-ownership="none">
            <type name="NotificationUrgency"
                  c:type="PhoshNotificationUrgency"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="transient" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="resident" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="category" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="profile" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="do_action" invoker="do_action">
        <doc xml:space="preserve"
             filename="src/notifications/notification.h"
             line="53">This function allows the notification to implement their own
  action behaviour instead of the default DBus interface.</doc>
        <source-position filename="src/notifications/notification.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="phosh_notification_activate">
        <source-position filename="src/notifications/notification.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="phosh_notification_close">
        <source-position filename="src/notifications/notification.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="1041">the #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="1042">Why the notification is closing</doc>
            <type name="NotificationReason" c:type="PhoshNotificationReason"/>
          </parameter>
        </parameters>
      </method>
      <method name="do_action" c:identifier="phosh_notification_do_action">
        <source-position filename="src/notifications/notification.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="expires" c:identifier="phosh_notification_expires">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="1015">Set @self to expire after @timeout (from this call)

Note: doesn't close the notification, for that call
[method@Notification.close] in response to [signal@Notification::expired].</doc>
        <source-position filename="src/notifications/notification.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="1017">the #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="1018">delay (in milliseconds)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_actions"
              c:identifier="phosh_notification_get_actions"
              glib:get-property="actions">
        <source-position filename="src/notifications/notification.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notification.c"
               line="762">The notification's actions</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="760">The #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_icon"
              c:identifier="phosh_notification_get_app_icon"
              glib:get-property="app-icon">
        <source-position filename="src/notifications/notification.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notification.c"
               line="498">The notification's icon</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="496">The notification:</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_info"
              c:identifier="phosh_notification_get_app_info"
              glib:get-property="app-info">
        <source-position filename="src/notifications/notification.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notification.c"
               line="547">The notification's app info</doc>
          <type name="Gio.AppInfo" c:type="GAppInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="545">The notification:</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_name"
              c:identifier="phosh_notification_get_app_name"
              glib:get-property="app-name">
        <source-position filename="src/notifications/notification.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_body"
              c:identifier="phosh_notification_get_body"
              glib:get-property="body">
        <source-position filename="src/notifications/notification.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_category"
              c:identifier="phosh_notification_get_category"
              glib:get-property="category">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="917">Get the category hint the notification was sent with

See &lt;https://specifications.freedesktop.org/notification-spec/notification-spec-latest.html&gt;</doc>
        <source-position filename="src/notifications/notification.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notification.c"
               line="925">the category or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="919">the #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="phosh_notification_get_id"
              glib:get-property="id">
        <source-position filename="src/notifications/notification.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image"
              c:identifier="phosh_notification_get_image"
              glib:get-property="image">
        <source-position filename="src/notifications/notification.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notification.c"
               line="579">The notification's image</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="577">The notification:</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_profile"
              c:identifier="phosh_notification_get_profile"
              glib:get-property="profile">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="964">Get the intended feedback profile for the event related to this
notification

See the Feedback Theme Specification for details.</doc>
        <source-position filename="src/notifications/notification.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notification.c"
               line="973">the profile or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="966">the #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resident"
              c:identifier="phosh_notification_get_resident"
              glib:get-property="resident">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="873">When %TRUE invoking an action _doesn't_ dismiss the notification</doc>
        <source-position filename="src/notifications/notification.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notification.c"
               line="879">%TRUE when resident, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="875">the #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="phosh_notification_get_summary"
              glib:get-property="summary">
        <source-position filename="src/notifications/notification.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timestamp"
              c:identifier="phosh_notification_get_timestamp"
              glib:get-property="timestamp">
        <source-position filename="src/notifications/notification.h"
                         line="90"/>
        <return-value transfer-ownership="full">
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transient"
              c:identifier="phosh_notification_get_transient"
              glib:get-property="transient">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="830">Transient notifications don't go to the message tray</doc>
        <source-position filename="src/notifications/notification.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notification.c"
               line="836">%TRUE when transient, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="832">the #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_urgency"
              c:identifier="phosh_notification_get_urgency"
              glib:get-property="urgency">
        <source-position filename="src/notifications/notification.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <type name="NotificationUrgency" c:type="PhoshNotificationUrgency"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_actions"
              c:identifier="phosh_notification_set_actions"
              glib:set-property="actions">
        <source-position filename="src/notifications/notification.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="actions" transfer-ownership="none">
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_app_icon"
              c:identifier="phosh_notification_set_app_icon"
              glib:set-property="app-icon">
        <source-position filename="src/notifications/notification.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_app_info"
              c:identifier="phosh_notification_set_app_info"
              glib:set-property="app-info">
        <source-position filename="src/notifications/notification.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="Gio.AppInfo" c:type="GAppInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_app_name"
              c:identifier="phosh_notification_set_app_name"
              glib:set-property="app-name">
        <source-position filename="src/notifications/notification.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="app_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_body"
              c:identifier="phosh_notification_set_body"
              glib:set-property="body">
        <source-position filename="src/notifications/notification.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="body" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_category"
              c:identifier="phosh_notification_set_category"
              glib:set-property="category">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="892">Set the category of the notification, such as `email.arrived`</doc>
        <source-position filename="src/notifications/notification.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="894">the #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="895">the new category</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="phosh_notification_set_id"
              glib:set-property="id">
        <source-position filename="src/notifications/notification.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_image"
              c:identifier="phosh_notification_set_image"
              glib:set-property="image">
        <source-position filename="src/notifications/notification.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_profile"
              c:identifier="phosh_notification_set_profile"
              glib:set-property="profile">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="938">Set the feedback profile (constrained by feedbackd's
global policy) for the event related to this notification.</doc>
        <source-position filename="src/notifications/notification.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="940">the #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="941">the feedback profile to use</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resident"
              c:identifier="phosh_notification_set_resident"
              glib:set-property="resident">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="849">Set whether or not invoking actions dismiss @self</doc>
        <source-position filename="src/notifications/notification.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="851">the #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="resident" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="852">is the notification resident</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_summary"
              c:identifier="phosh_notification_set_summary"
              glib:set-property="summary">
        <source-position filename="src/notifications/notification.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="summary" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timestamp"
              c:identifier="phosh_notification_set_timestamp"
              glib:set-property="timestamp">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="699">Sets the timestamp of a notification. If %NULL is passed it's set
to the current date and time.</doc>
        <source-position filename="src/notifications/notification.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="701">A #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="timestamp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="702">A timestamp or %NULL</doc>
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transient"
              c:identifier="phosh_notification_set_transient"
              glib:set-property="transient">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="806">Set if @self should go to the message tray</doc>
        <source-position filename="src/notifications/notification.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="808">the #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="transient" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="809">if @self is transient</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_urgency"
              c:identifier="phosh_notification_set_urgency"
              glib:set-property="urgency">
        <source-position filename="src/notifications/notification.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </instance-parameter>
          <parameter name="urgency" transfer-ownership="none">
            <type name="NotificationUrgency"
                  c:type="PhoshNotificationUrgency"/>
          </parameter>
        </parameters>
      </method>
      <property name="actions"
                writable="1"
                transfer-ownership="none"
                setter="set_actions"
                getter="get_actions">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="app-icon"
                writable="1"
                transfer-ownership="none"
                setter="set_app_icon"
                getter="get_app_icon">
        <type name="Gio.Icon"/>
      </property>
      <property name="app-info"
                writable="1"
                transfer-ownership="none"
                setter="set_app_info"
                getter="get_app_info">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="279">When non-%NULL this overrides the values of [property@Notification:app-name]
and [property@Notification:app-icon] with those from the `GAppInfo`.</doc>
        <type name="Gio.AppInfo"/>
      </property>
      <property name="app-name"
                writable="1"
                transfer-ownership="none"
                setter="set_app_name"
                getter="get_app_name">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="body"
                writable="1"
                transfer-ownership="none"
                setter="set_body"
                getter="get_body">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="category"
                writable="1"
                transfer-ownership="none"
                setter="set_category"
                getter="get_category">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="image"
                writable="1"
                transfer-ownership="none"
                setter="set_image"
                getter="get_image">
        <type name="Gio.Icon"/>
      </property>
      <property name="profile"
                writable="1"
                transfer-ownership="none"
                setter="set_profile"
                getter="get_profile"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="338">The feedback profile to use for the event triggered by this
notification. Valid values from Feedbackd's Feedback Theme
Specification as well as the value `none` meaning: don't trigger
any feedback for this event. If `NULL` (the default) the decision
is left to feedbackd.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="resident"
                writable="1"
                transfer-ownership="none"
                setter="set_resident"
                getter="get_resident"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="summary"
                writable="1"
                transfer-ownership="none"
                setter="set_summary"
                getter="get_summary">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="timestamp"
                writable="1"
                transfer-ownership="none"
                setter="set_timestamp"
                getter="get_timestamp">
        <type name="GLib.DateTime"/>
      </property>
      <property name="transient"
                writable="1"
                transfer-ownership="none"
                setter="set_transient"
                getter="get_transient"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="urgency"
                writable="1"
                transfer-ownership="none"
                setter="set_urgency"
                getter="get_urgency"
                default-value="PHOSH_NOTIFICATION_URGENCY_NORMAL">
        <type name="NotificationUrgency"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="actioned" when="last">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="354">Emitted when the user activates one of the provided actions

This includes the default action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="357">The name of the activated action</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="closed" when="last">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="382">Emitted when the notification has been closed</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification.c"
                 line="385">Why @self was closed</doc>
            <type name="NotificationReason"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="expired" when="last">
        <doc xml:space="preserve"
             filename="src/notifications/notification.c"
             line="370">Emitted when the timeout set by [method@Notification.expires] has expired</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="NotificationBanner"
           c:symbol-prefix="notification_banner"
           c:type="PhoshNotificationBanner"
           parent="LayerSurface"
           glib:type-name="PhoshNotificationBanner"
           glib:get-type="phosh_notification_banner_get_type"
           glib:type-struct="NotificationBannerClass">
      <doc xml:space="preserve"
           filename="src/notifications/notification-banner.c"
           line="19">A floating notification</doc>
      <source-position filename="src/notifications/notification-banner.h"
                       line="18"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_notification_banner_new">
        <source-position filename="src/notifications/notification-banner.h"
                         line="21"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="notification" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_notification"
              c:identifier="phosh_notification_banner_get_notification"
              glib:get-property="notification">
        <doc xml:space="preserve"
             filename="src/notifications/notification-banner.c"
             line="279">Get the notification.</doc>
        <source-position filename="src/notifications/notification-banner.h"
                         line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notification-banner.c"
               line="285">The notification</doc>
          <type name="Notification" c:type="PhoshNotification*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification-banner.c"
                 line="281">The banner</doc>
            <type name="NotificationBanner" c:type="PhoshNotificationBanner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="notification"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_notification">
        <doc xml:space="preserve"
             filename="src/notifications/notification-banner.c"
             line="232">The #PhoshNotification shown</doc>
        <type name="Notification"/>
      </property>
    </class>
    <record name="NotificationBannerClass"
            c:type="PhoshNotificationBannerClass"
            glib:is-gtype-struct-for="NotificationBanner">
      <source-position filename="src/notifications/notification-banner.h"
                       line="18"/>
      <field name="parent_class">
        <type name="LayerSurfaceClass" c:type="PhoshLayerSurfaceClass"/>
      </field>
    </record>
    <record name="NotificationClass"
            c:type="PhoshNotificationClass"
            glib:is-gtype-struct-for="Notification">
      <source-position filename="src/notifications/notification.h" line="61"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/notifications/notification.h"
             line="49">The object class structure needs to be the first
  element in the widget class structure in order for the class mechanism
  to work correctly. This allows a PhoshNotificationClass pointer to be cast to
  a GObjectClass pointer.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="do_action">
        <doc xml:space="preserve"
             filename="src/notifications/notification.h"
             line="53">This function allows the notification to implement their own
  action behaviour instead of the default DBus interface.</doc>
        <callback name="do_action">
          <source-position filename="src/notifications/notification.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Notification" c:type="PhoshNotification*"/>
            </parameter>
            <parameter name="id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="NotificationContent"
           c:symbol-prefix="notification_content"
           c:type="PhoshNotificationContent"
           parent="Gtk.ListBoxRow"
           glib:type-name="PhoshNotificationContent"
           glib:get-type="phosh_notification_content_get_type"
           glib:type-struct="NotificationContentClass">
      <doc xml:space="preserve"
           filename="src/notifications/notification-content.c"
           line="16">Content of a notification</doc>
      <source-position filename="src/notifications/notification-content.h"
                       line="21"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_notification_content_new">
        <source-position filename="src/notifications/notification-content.h"
                         line="24"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="notification" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </parameter>
          <parameter name="show_body" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="action_filters" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_notification"
              c:identifier="phosh_notification_content_get_notification"
              glib:get-property="notification">
        <doc xml:space="preserve"
             filename="src/notifications/notification-content.c"
             line="458">Get the notification.</doc>
        <source-position filename="src/notifications/notification-content.h"
                         line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notification-content.c"
               line="464">The notification</doc>
          <type name="Notification" c:type="PhoshNotification*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification-content.c"
                 line="460">The notification content</doc>
            <type name="NotificationContent"
                  c:type="PhoshNotificationContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="action-filter-keys"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="notification"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_notification">
        <doc xml:space="preserve"
             filename="src/notifications/notification-content.c"
             line="338">The #PhoshNotification shown in @self</doc>
        <type name="Notification"/>
      </property>
      <property name="show-body"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/notifications/notification-content.c"
             line="352">Whether the body of the notification is shown</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="NotificationContentClass"
            c:type="PhoshNotificationContentClass"
            glib:is-gtype-struct-for="NotificationContent">
      <source-position filename="src/notifications/notification-content.h"
                       line="21"/>
      <field name="parent_class">
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
    </record>
    <class name="NotificationFrame"
           c:symbol-prefix="notification_frame"
           c:type="PhoshNotificationFrame"
           parent="Gtk.EventBox"
           glib:type-name="PhoshNotificationFrame"
           glib:get-type="phosh_notification_frame_get_type"
           glib:type-struct="NotificationFrameClass">
      <doc xml:space="preserve"
           filename="src/notifications/notification-frame.c"
           line="22">A frame containing one or more notifications</doc>
      <source-position filename="src/notifications/notification-frame.h"
                       line="21"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_notification_frame_new">
        <source-position filename="src/notifications/notification-frame.h"
                         line="24"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="show_body" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="action_filters" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="bind_model"
              c:identifier="phosh_notification_frame_bind_model">
        <source-position filename="src/notifications/notification-frame.h"
                         line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NotificationFrame" c:type="PhoshNotificationFrame*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_notification"
              c:identifier="phosh_notification_frame_bind_notification">
        <doc xml:space="preserve"
             filename="src/notifications/notification-frame.c"
             line="518">Helper function for frames that only need to contain a single notification

Wraps phosh_notification_frame_bind_model() by placing @notification in
a #PhoshNotificationSource</doc>
        <source-position filename="src/notifications/notification-frame.h"
                         line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification-frame.c"
                 line="520">the #PhoshNotificationFrame</doc>
            <type name="NotificationFrame" c:type="PhoshNotificationFrame*"/>
          </instance-parameter>
          <parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification-frame.c"
                 line="521">a #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_action_filter_keys"
              c:identifier="phosh_notification_frame_get_action_filter_keys"
              glib:get-property="action-filter-keys">
        <source-position filename="src/notifications/notification-frame.h"
                         line="30"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NotificationFrame" c:type="PhoshNotificationFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="action-filter-keys"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_action_filter_keys">
        <doc xml:space="preserve"
             filename="src/notifications/notification-frame.c"
             line="355">The keys will be used to look up filter values in the
applications desktop file. Actions starting with those values
will be used on the lock screen.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="show-body"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/notifications/notification-frame.c"
             line="341">Whether notificaions in this frame should show the notification body</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="empty" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="NotificationFrameClass"
            c:type="PhoshNotificationFrameClass"
            glib:is-gtype-struct-for="NotificationFrame">
      <source-position filename="src/notifications/notification-frame.h"
                       line="21"/>
      <field name="parent_class">
        <type name="Gtk.EventBoxClass" c:type="GtkEventBoxClass"/>
      </field>
    </record>
    <class name="NotificationList"
           c:symbol-prefix="notification_list"
           c:type="PhoshNotificationList"
           parent="GObject.Object"
           glib:type-name="PhoshNotificationList"
           glib:get-type="phosh_notification_list_get_type"
           glib:type-struct="NotificationListClass">
      <doc xml:space="preserve"
           filename="src/notifications/notification-list.c"
           line="15">A list containing one or more #PhoshNotificationSource

#PhoshNotificationList maps between #PhoshNotificationSource objects and their
notifications creating and removing sources on the fly.</doc>
      <source-position filename="src/notifications/notification-list.h"
                       line="21"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="phosh_notification_list_new">
        <doc xml:space="preserve"
             filename="src/notifications/notification-list.c"
             line="147">Create an empty #PhoshNotificationList, generally used via
phosh_notify_manager_get_list()</doc>
        <source-position filename="src/notifications/notification-list.h"
                         line="24"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/notifications/notification-list.c"
               line="153">the new #PhoshNotificationList</doc>
          <type name="NotificationList" c:type="PhoshNotificationList*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="phosh_notification_list_add">
        <doc xml:space="preserve"
             filename="src/notifications/notification-list.c"
             line="225">Registers a new notification with @self adding to (or creating) the relevant
#PhoshNotificationSource</doc>
        <source-position filename="src/notifications/notification-list.h"
                         line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification-list.c"
                 line="227">the #PhoshNotificationList</doc>
            <type name="NotificationList" c:type="PhoshNotificationList*"/>
          </instance-parameter>
          <parameter name="source_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification-list.c"
                 line="228">id of the #PhoshNotificationSource @notification belongs to
            (may not currently exist)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification-list.c"
                 line="230">the new #PhoshNotification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_by_id"
              c:identifier="phosh_notification_list_get_by_id">
        <doc xml:space="preserve"
             filename="src/notifications/notification-list.c"
             line="301">Find a #PhoshNotification in @self by it's @id</doc>
        <source-position filename="src/notifications/notification-list.h"
                         line="28"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/notifications/notification-list.c"
               line="308">the #PhoshNotification or %NULL</doc>
          <type name="Notification" c:type="PhoshNotification*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification-list.c"
                 line="303">the #PhoshNotificationList</doc>
            <type name="NotificationList" c:type="PhoshNotificationList*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notification-list.c"
                 line="304">the #PhoshNotification:id to lookup</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="NotificationListClass"
            c:type="PhoshNotificationListClass"
            glib:is-gtype-struct-for="NotificationList">
      <source-position filename="src/notifications/notification-list.h"
                       line="21"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="NotificationReason"
                 glib:type-name="PhoshNotificationReason"
                 glib:get-type="phosh_notification_reason_get_type"
                 c:type="PhoshNotificationReason">
      <member name="expired"
              value="1"
              c:identifier="PHOSH_NOTIFICATION_REASON_EXPIRED"
              glib:nick="expired"
              glib:name="PHOSH_NOTIFICATION_REASON_EXPIRED">
        <doc xml:space="preserve"
             filename="src/notifications/notification.h"
             line="27">notification expired</doc>
      </member>
      <member name="dismissed"
              value="2"
              c:identifier="PHOSH_NOTIFICATION_REASON_DISMISSED"
              glib:nick="dismissed"
              glib:name="PHOSH_NOTIFICATION_REASON_DISMISSED">
        <doc xml:space="preserve"
             filename="src/notifications/notification.h"
             line="28">notification was dismissed</doc>
      </member>
      <member name="closed"
              value="3"
              c:identifier="PHOSH_NOTIFICATION_REASON_CLOSED"
              glib:nick="closed"
              glib:name="PHOSH_NOTIFICATION_REASON_CLOSED">
        <doc xml:space="preserve"
             filename="src/notifications/notification.h"
             line="29">notification was closed</doc>
      </member>
      <member name="undefined"
              value="4"
              c:identifier="PHOSH_NOTIFICATION_REASON_UNDEFINED"
              glib:nick="undefined"
              glib:name="PHOSH_NOTIFICATION_REASON_UNDEFINED">
        <doc xml:space="preserve"
             filename="src/notifications/notification.h"
             line="30">undefined reason</doc>
      </member>
    </enumeration>
    <class name="NotificationSource"
           c:symbol-prefix="notification_source"
           c:type="PhoshNotificationSource"
           parent="GObject.Object"
           glib:type-name="PhoshNotificationSource"
           glib:get-type="phosh_notification_source_get_type"
           glib:type-struct="NotificationSourceClass">
      <doc xml:space="preserve"
           filename="src/notifications/notification-source.c"
           line="14">A #GListModel containing one or more notifications

A #PhoshNotificationSource groups notifications. A source has a name
which is usually the app_id of the sending application.</doc>
      <source-position filename="src/notifications/notification-source.h"
                       line="21"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="phosh_notification_source_new">
        <source-position filename="src/notifications/notification-source.h"
                         line="24"/>
        <return-value transfer-ownership="full">
          <type name="NotificationSource" c:type="PhoshNotificationSource*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="phosh_notification_source_add">
        <source-position filename="src/notifications/notification-source.h"
                         line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NotificationSource" c:type="PhoshNotificationSource*"/>
          </instance-parameter>
          <parameter name="notification" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="phosh_notification_source_get_name"
              glib:get-property="name">
        <source-position filename="src/notifications/notification-source.h"
                         line="27"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NotificationSource" c:type="PhoshNotificationSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="empty" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="NotificationSourceClass"
            c:type="PhoshNotificationSourceClass"
            glib:is-gtype-struct-for="NotificationSource">
      <source-position filename="src/notifications/notification-source.h"
                       line="21"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="NotificationUrgency"
                 glib:type-name="PhoshNotificationUrgency"
                 glib:get-type="phosh_notification_urgency_get_type"
                 c:type="PhoshNotificationUrgency">
      <member name="low"
              value="0"
              c:identifier="PHOSH_NOTIFICATION_URGENCY_LOW"
              glib:nick="low"
              glib:name="PHOSH_NOTIFICATION_URGENCY_LOW">
        <doc xml:space="preserve"
             filename="src/notifications/notification.h"
             line="15">low urgency</doc>
      </member>
      <member name="normal"
              value="1"
              c:identifier="PHOSH_NOTIFICATION_URGENCY_NORMAL"
              glib:nick="normal"
              glib:name="PHOSH_NOTIFICATION_URGENCY_NORMAL">
        <doc xml:space="preserve"
             filename="src/notifications/notification.h"
             line="16">normal urgency</doc>
      </member>
      <member name="critical"
              value="2"
              c:identifier="PHOSH_NOTIFICATION_URGENCY_CRITICAL"
              glib:nick="critical"
              glib:name="PHOSH_NOTIFICATION_URGENCY_CRITICAL">
        <doc xml:space="preserve"
             filename="src/notifications/notification.h"
             line="17">critical urgency</doc>
      </member>
    </enumeration>
    <interface name="NotifyDBusNotifications"
               c:symbol-prefix="notify_dbus_notifications"
               c:type="PhoshNotifyDBusNotifications"
               glib:type-name="PhoshNotifyDBusNotifications"
               glib:get-type="phosh_notify_dbus_notifications_get_type"
               glib:type-struct="NotifyDBusNotificationsIface">
      <doc xml:space="preserve"
           filename="src/dbus/notify-dbus.c"
           line="926">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-Notifications.top_of_page"&gt;org.freedesktop.Notifications&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/notify-dbus.h" line="69"/>
      <function name="interface_info"
                c:identifier="phosh_notify_dbus_notifications_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="817">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-Notifications.top_of_page"&gt;org.freedesktop.Notifications&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="822">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_notify_dbus_notifications_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="830">Overrides all #GObject properties in the #PhoshNotifyDBusNotifications interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="838">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="832">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="833">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="action_invoked">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="939">Handler for the #PhoshNotifyDBusNotifications::action-invoked signal.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_action_key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_close_notification">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="935">Handler for the #PhoshNotifyDBusNotifications::handle-close-notification signal.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_capabilities">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="936">Handler for the #PhoshNotifyDBusNotifications::handle-get-capabilities signal.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_server_information">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="937">Handler for the #PhoshNotifyDBusNotifications::handle-get-server-information signal.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_notify">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="938">Handler for the #PhoshNotifyDBusNotifications::handle-notify signal.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_app_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_replaces_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_app_icon" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_summary" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_body" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_actions" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_hints" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_expire_timeout" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="notification_closed">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="940">Handler for the #PhoshNotifyDBusNotifications::notification-closed signal.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_close_notification"
              c:identifier="phosh_notify_dbus_notifications_call_close_notification"
              glib:finish-func="call_close_notification_finish"
              glib:sync-func="call_close_notification_sync">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1372">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.CloseNotification"&gt;CloseNotification()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_notify_dbus_notifications_call_close_notification_finish() to get the result of the operation.

See phosh_notify_dbus_notifications_call_close_notification_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1374">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1375">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1376">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1377">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1378">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_close_notification_finish"
              c:identifier="phosh_notify_dbus_notifications_call_close_notification_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1405">Finishes an operation started with phosh_notify_dbus_notifications_call_close_notification().</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="179"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1413">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1407">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1408">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_notify_dbus_notifications_call_close_notification().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_close_notification_sync"
              c:identifier="phosh_notify_dbus_notifications_call_close_notification_sync"
              throws="1"
              glib:async-func="call_close_notification">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1432">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.CloseNotification"&gt;CloseNotification()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_notify_dbus_notifications_call_close_notification() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="184"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1443">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1434">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1435">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1436">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_capabilities"
              c:identifier="phosh_notify_dbus_notifications_call_get_capabilities"
              glib:finish-func="call_get_capabilities_finish"
              glib:sync-func="call_get_capabilities_sync">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1128">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.GetCapabilities"&gt;GetCapabilities()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_notify_dbus_notifications_call_get_capabilities_finish() to get the result of the operation.

See phosh_notify_dbus_notifications_call_get_capabilities_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1130">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1131">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1132">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1133">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_capabilities_finish"
              c:identifier="phosh_notify_dbus_notifications_call_get_capabilities_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1158">Finishes an operation started with phosh_notify_dbus_notifications_call_get_capabilities().</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="126"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1167">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1160">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="out_capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1161">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1162">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_notify_dbus_notifications_call_get_capabilities().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_capabilities_sync"
              c:identifier="phosh_notify_dbus_notifications_call_get_capabilities_sync"
              throws="1"
              glib:async-func="call_get_capabilities">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1188">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.GetCapabilities"&gt;GetCapabilities()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_notify_dbus_notifications_call_get_capabilities() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="132"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1199">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1190">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="out_capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1191">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1192">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_server_information"
              c:identifier="phosh_notify_dbus_notifications_call_get_server_information"
              glib:finish-func="call_get_server_information_finish"
              glib:sync-func="call_get_server_information_sync">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1470">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.GetServerInformation"&gt;GetServerInformation()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_notify_dbus_notifications_call_get_server_information_finish() to get the result of the operation.

See phosh_notify_dbus_notifications_call_get_server_information_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1472">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1473">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1474">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1475">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_server_information_finish"
              c:identifier="phosh_notify_dbus_notifications_call_get_server_information_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1500">Finishes an operation started with phosh_notify_dbus_notifications_call_get_server_information().</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="196"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1512">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1502">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="out_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1503">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_vendor"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1504">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_version"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1505">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_spec_version"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1506">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1507">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_notify_dbus_notifications_call_get_server_information().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_server_information_sync"
              c:identifier="phosh_notify_dbus_notifications_call_get_server_information_sync"
              throws="1"
              glib:async-func="call_get_server_information">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1539">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.GetServerInformation"&gt;GetServerInformation()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_notify_dbus_notifications_call_get_server_information() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="205"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1553">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1541">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="out_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1542">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_vendor"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1543">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_version"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1544">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_spec_version"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1545">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1546">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_notify"
              c:identifier="phosh_notify_dbus_notifications_call_notify"
              glib:finish-func="call_notify_finish"
              glib:sync-func="call_notify_sync">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1226">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.Notify"&gt;Notify()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_notify_dbus_notifications_call_notify_finish() to get the result of the operation.

See phosh_notify_dbus_notifications_call_notify_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1228">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="arg_app_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1229">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_replaces_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1230">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_app_icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1231">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1232">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1233">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_actions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1234">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1235">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_expire_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1236">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1237">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="10">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1238">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1239">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_notify_finish"
              c:identifier="phosh_notify_dbus_notifications_call_notify_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1280">Finishes an operation started with phosh_notify_dbus_notifications_call_notify().</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="152"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1289">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1282">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="out_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1283">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1284">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_notify_dbus_notifications_call_notify().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_notify_sync"
              c:identifier="phosh_notify_dbus_notifications_call_notify_sync"
              throws="1"
              glib:async-func="call_notify">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1310">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.Notify"&gt;Notify()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_notify_dbus_notifications_call_notify() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="158"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1329">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1312">A #PhoshNotifyDBusNotificationsProxy.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="arg_app_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1313">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_replaces_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1314">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_app_icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1315">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1316">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1317">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_actions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1318">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1319">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_expire_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1320">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="out_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1321">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1322">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_close_notification"
              c:identifier="phosh_notify_dbus_notifications_complete_close_notification">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1628">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.CloseNotification"&gt;CloseNotification()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1630">A #PhoshNotifyDBusNotifications.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1631">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_capabilities"
              c:identifier="phosh_notify_dbus_notifications_complete_get_capabilities">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1586">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.GetCapabilities"&gt;GetCapabilities()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1588">A #PhoshNotifyDBusNotifications.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1589">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="capabilities" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1590">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_server_information"
              c:identifier="phosh_notify_dbus_notifications_complete_get_server_information">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1646">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.GetServerInformation"&gt;GetServerInformation()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1648">A #PhoshNotifyDBusNotifications.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1649">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1650">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="vendor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1651">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1652">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="spec_version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1653">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_notify"
              c:identifier="phosh_notify_dbus_notifications_complete_notify">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1607">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.Notify"&gt;Notify()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1609">A #PhoshNotifyDBusNotifications.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1610">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1611">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_action_invoked"
              c:identifier="phosh_notify_dbus_notifications_emit_action_invoked">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1111">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-Notifications.ActionInvoked"&gt;"ActionInvoked"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1113">A #PhoshNotifyDBusNotifications.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1114">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_action_key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1115">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_notification_closed"
              c:identifier="phosh_notify_dbus_notifications_emit_notification_closed">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1094">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-Notifications.NotificationClosed"&gt;"NotificationClosed"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1096">A #PhoshNotifyDBusNotifications.</doc>
            <type name="NotifyDBusNotifications"
                  c:type="PhoshNotifyDBusNotifications*"/>
          </instance-parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1097">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1098">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="action-invoked" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1071">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-Notifications.ActionInvoked"&gt;"ActionInvoked"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1074">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_action_key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1075">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-close-notification" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1004">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.CloseNotification"&gt;CloseNotification()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_notify_dbus_notifications_complete_close_notification() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1014">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1007">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1008">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-capabilities" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="952">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.GetCapabilities"&gt;GetCapabilities()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_notify_dbus_notifications_complete_get_capabilities() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="961">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="955">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-server-information" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1027">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.GetServerInformation"&gt;GetServerInformation()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_notify_dbus_notifications_complete_get_server_information() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1036">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1030">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-notify" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="974">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-Notifications.Notify"&gt;Notify()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_notify_dbus_notifications_complete_notify() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="991">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="977">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_app_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="978">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_replaces_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="979">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_app_icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="980">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="981">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_body" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="982">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_actions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="983">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="984">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_expire_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="985">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="notification-closed" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1050">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-Notifications.NotificationClosed"&gt;"NotificationClosed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1053">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1054">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="NotifyDBusNotificationsIface"
            c:type="PhoshNotifyDBusNotificationsIface"
            glib:is-gtype-struct-for="NotifyDBusNotifications">
      <doc xml:space="preserve"
           filename="src/dbus/notify-dbus.c"
           line="932">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-Notifications.top_of_page"&gt;org.freedesktop.Notifications&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/notify-dbus.h" line="69"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="934">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_close_notification">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="935">Handler for the #PhoshNotifyDBusNotifications::handle-close-notification signal.</doc>
        <callback name="handle_close_notification">
          <source-position filename="src/dbus/notify-dbus.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NotifyDBusNotifications"
                    c:type="PhoshNotifyDBusNotifications*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_capabilities">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="936">Handler for the #PhoshNotifyDBusNotifications::handle-get-capabilities signal.</doc>
        <callback name="handle_get_capabilities">
          <source-position filename="src/dbus/notify-dbus.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NotifyDBusNotifications"
                    c:type="PhoshNotifyDBusNotifications*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_server_information">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="937">Handler for the #PhoshNotifyDBusNotifications::handle-get-server-information signal.</doc>
        <callback name="handle_get_server_information">
          <source-position filename="src/dbus/notify-dbus.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NotifyDBusNotifications"
                    c:type="PhoshNotifyDBusNotifications*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_notify">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="938">Handler for the #PhoshNotifyDBusNotifications::handle-notify signal.</doc>
        <callback name="handle_notify">
          <source-position filename="src/dbus/notify-dbus.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NotifyDBusNotifications"
                    c:type="PhoshNotifyDBusNotifications*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_app_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_replaces_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_app_icon" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_summary" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_body" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_actions" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_hints" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_expire_timeout" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="action_invoked">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="939">Handler for the #PhoshNotifyDBusNotifications::action-invoked signal.</doc>
        <callback name="action_invoked">
          <source-position filename="src/dbus/notify-dbus.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NotifyDBusNotifications"
                    c:type="PhoshNotifyDBusNotifications*"/>
            </parameter>
            <parameter name="arg_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_action_key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notification_closed">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="940">Handler for the #PhoshNotifyDBusNotifications::notification-closed signal.</doc>
        <callback name="notification_closed">
          <source-position filename="src/dbus/notify-dbus.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NotifyDBusNotifications"
                    c:type="PhoshNotifyDBusNotifications*"/>
            </parameter>
            <parameter name="arg_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_reason" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="NotifyDBusNotificationsProxy"
           c:symbol-prefix="notify_dbus_notifications_proxy"
           c:type="PhoshNotifyDBusNotificationsProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshNotifyDBusNotificationsProxy"
           glib:get-type="phosh_notify_dbus_notifications_proxy_get_type"
           glib:type-struct="NotifyDBusNotificationsProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/notify-dbus.c"
           line="1678">The #PhoshNotifyDBusNotificationsProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/notify-dbus.h" line="239"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="NotifyDBusNotifications"/>
      <constructor name="new_finish"
                   c:identifier="phosh_notify_dbus_notifications_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1869">Finishes an operation started with phosh_notify_dbus_notifications_proxy_new().</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="255"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1876">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NotifyDBusNotificationsProxy"
                c:type="PhoshNotifyDBusNotifications*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1871">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_notify_dbus_notifications_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_notify_dbus_notifications_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1959">Finishes an operation started with phosh_notify_dbus_notifications_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="274"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1966">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NotifyDBusNotificationsProxy"
                c:type="PhoshNotifyDBusNotifications*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1961">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_notify_dbus_notifications_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_notify_dbus_notifications_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1984">Like phosh_notify_dbus_notifications_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_notify_dbus_notifications_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="277"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1999">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NotifyDBusNotificationsProxy"
                c:type="PhoshNotifyDBusNotifications*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1986">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1987">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1988">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1989">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1990">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_notify_dbus_notifications_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1894">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-Notifications.top_of_page"&gt;org.freedesktop.Notifications&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_notify_dbus_notifications_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="258"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="1909">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NotifyDBusNotificationsProxy"
                c:type="PhoshNotifyDBusNotifications*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1896">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1897">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1898">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1899">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1900">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_notify_dbus_notifications_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1839">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-Notifications.top_of_page"&gt;org.freedesktop.Notifications&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_notify_dbus_notifications_proxy_new_finish() to get the result of the operation.

See phosh_notify_dbus_notifications_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="247"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1841">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1842">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1843">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1844">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1845">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1846">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1847">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_notify_dbus_notifications_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1929">Like phosh_notify_dbus_notifications_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_notify_dbus_notifications_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_notify_dbus_notifications_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1931">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1932">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1933">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1934">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1935">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1936">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/notify-dbus.c"
                 line="1937">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NotifyDBusNotificationsProxyPrivate"
              c:type="PhoshNotifyDBusNotificationsProxyPrivate*"/>
      </field>
    </class>
    <record name="NotifyDBusNotificationsProxyClass"
            c:type="PhoshNotifyDBusNotificationsProxyClass"
            glib:is-gtype-struct-for="NotifyDBusNotificationsProxy">
      <doc xml:space="preserve"
           filename="src/dbus/notify-dbus.c"
           line="1684">Class structure for #PhoshNotifyDBusNotificationsProxy.</doc>
      <source-position filename="src/dbus/notify-dbus.h" line="239"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="1686">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="NotifyDBusNotificationsProxyPrivate"
            c:type="PhoshNotifyDBusNotificationsProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/notify-dbus.h" line="227"/>
    </record>
    <class name="NotifyDBusNotificationsSkeleton"
           c:symbol-prefix="notify_dbus_notifications_skeleton"
           c:type="PhoshNotifyDBusNotificationsSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshNotifyDBusNotificationsSkeleton"
           glib:get-type="phosh_notify_dbus_notifications_skeleton_get_type"
           glib:type-struct="NotifyDBusNotificationsSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/notify-dbus.c"
           line="2021">The #PhoshNotifyDBusNotificationsSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/notify-dbus.h" line="309"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="NotifyDBusNotifications"/>
      <constructor name="new"
                   c:identifier="phosh_notify_dbus_notifications_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="2346">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-Notifications.top_of_page"&gt;org.freedesktop.Notifications&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/notify-dbus.h" line="317"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="2351">The skeleton object.</doc>
          <type name="NotifyDBusNotificationsSkeleton"
                c:type="PhoshNotifyDBusNotifications*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NotifyDBusNotificationsSkeletonPrivate"
              c:type="PhoshNotifyDBusNotificationsSkeletonPrivate*"/>
      </field>
    </class>
    <record name="NotifyDBusNotificationsSkeletonClass"
            c:type="PhoshNotifyDBusNotificationsSkeletonClass"
            glib:is-gtype-struct-for="NotifyDBusNotificationsSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/notify-dbus.c"
           line="2027">Class structure for #PhoshNotifyDBusNotificationsSkeleton.</doc>
      <source-position filename="src/dbus/notify-dbus.h" line="309"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="2029">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="NotifyDBusNotificationsSkeletonPrivate"
            c:type="PhoshNotifyDBusNotificationsSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/notify-dbus.h" line="297"/>
    </record>
    <class name="NotifyFeedback"
           c:symbol-prefix="notify_feedback"
           c:type="PhoshNotifyFeedback"
           parent="GObject.Object"
           glib:type-name="PhoshNotifyFeedback"
           glib:get-type="phosh_notify_feedback_get_type"
           glib:type-struct="NotifyFeedbackClass">
      <doc xml:space="preserve"
           filename="src/notifications/notify-feedback.c"
           line="22">Provide feedback on notifications

#PhoshNotifyFeedback is the manager object responsible to provide
proper feedback on new notifications or when notifications are
being closed.</doc>
      <source-position filename="src/notifications/notify-feedback.h"
                       line="20"/>
      <constructor name="new" c:identifier="phosh_notify_feedback_new">
        <source-position filename="src/notifications/notify-feedback.h"
                         line="22"/>
        <return-value transfer-ownership="full">
          <type name="NotifyFeedback" c:type="PhoshNotifyFeedback*"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <type name="NotificationList" c:type="PhoshNotificationList*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="check_screen_wakeup"
              c:identifier="phosh_notify_feedback_check_screen_wakeup">
        <doc xml:space="preserve"
             filename="src/notifications/notify-feedback.c"
             line="453">Checks if the given notification should trigger screeen wakeup</doc>
        <source-position filename="src/notifications/notify-feedback.h"
                         line="23"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notify-feedback.c"
               line="460">%TRUE if the notification should trigger the screen wakeup.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-feedback.c"
                 line="455">The notification feedback manager</doc>
            <type name="NotifyFeedback" c:type="PhoshNotifyFeedback*"/>
          </instance-parameter>
          <parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-feedback.c"
                 line="456">The notification to check</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </parameter>
        </parameters>
      </method>
      <property name="notification-list"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/notifications/notify-feedback.c"
             line="418">The list of notifications that drives the feedback emission</doc>
        <type name="NotificationList"/>
      </property>
    </class>
    <record name="NotifyFeedbackClass"
            c:type="PhoshNotifyFeedbackClass"
            glib:is-gtype-struct-for="NotifyFeedback">
      <source-position filename="src/notifications/notify-feedback.h"
                       line="20"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="NotifyManager"
           c:symbol-prefix="notify_manager"
           c:type="PhoshNotifyManager"
           parent="NotifyDBusNotificationsSkeleton"
           glib:type-name="PhoshNotifyManager"
           glib:get-type="phosh_notify_manager_get_type"
           glib:type-struct="NotifyManagerClass">
      <doc xml:space="preserve"
           filename="src/notifications/notify-manager.c"
           line="37">Manages notifications

#PhoshNotifyManager manages notifications sent from the shell
itself and via the org.freedesktop.Notification DBus interface.
See https://developer.gnome.org/notification-spec/

It maintains a list of notifications via a #PhoshNotificationList.</doc>
      <source-position filename="src/notifications/notify-manager.h"
                       line="20"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="NotifyDBusNotifications"/>
      <function name="get_default"
                c:identifier="phosh_notify_manager_get_default">
        <doc xml:space="preserve"
             filename="src/notifications/notify-manager.c"
             line="762">Get the notify manager singleton</doc>
        <source-position filename="src/notifications/notify-manager.h"
                         line="23"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notify-manager.c"
               line="767">The notify manager singleton</doc>
          <type name="NotifyManager" c:type="PhoshNotifyManager*"/>
        </return-value>
      </function>
      <method name="add_notification"
              c:identifier="phosh_notify_manager_add_notification">
        <doc xml:space="preserve"
             filename="src/notifications/notify-manager.c"
             line="831">Adds @notification to the current list of notifications. This is the single
entry point to submit notifications.</doc>
        <source-position filename="src/notifications/notify-manager.h"
                         line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="833">the #PhoshNotifyManager</doc>
            <type name="NotifyManager" c:type="PhoshNotifyManager*"/>
          </instance-parameter>
          <parameter name="source_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="834">The notification source's app_id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="expire_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="835">When the notification should expire</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="836">The notification</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_shell_notification"
              c:identifier="phosh_notify_manager_add_shell_notification">
        <doc xml:space="preserve"
             filename="src/notifications/notify-manager.c"
             line="965">Adds a notification to the list of notifications. If `id` is not `0`
an existing notification is replaced.

If the notification has no `app-name` or `app-icon` set then a shell
default is filled in.

If the expire_timeout is greater than `0` the notification is
marked as transient.

The returned `id` can be used at a later point to retract or
replace the notification.</doc>
        <source-position filename="src/notifications/notify-manager.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notify-manager.c"
               line="984">The id of the notification</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="967">The #PhoshNotifyManager</doc>
            <type name="NotifyManager" c:type="PhoshNotifyManager*"/>
          </instance-parameter>
          <parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="968">The notification to add</doc>
            <type name="Notification" c:type="PhoshNotification*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="969">The id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="expire_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="970">The expiration timeout</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_all_notifications"
              c:identifier="phosh_notify_manager_close_all_notifications">
        <source-position filename="src/notifications/notify-manager.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NotifyManager" c:type="PhoshNotifyManager*"/>
          </instance-parameter>
          <parameter name="reaseon" transfer-ownership="none">
            <type name="NotificationReason" c:type="PhoshNotificationReason"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_notification_by_id"
              c:identifier="phosh_notify_manager_close_notification_by_id">
        <source-position filename="src/notifications/notify-manager.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NotifyManager" c:type="PhoshNotifyManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="NotificationReason" c:type="PhoshNotificationReason"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_list" c:identifier="phosh_notify_manager_get_list">
        <doc xml:space="preserve"
             filename="src/notifications/notify-manager.c"
             line="782">Get the #PhoshNotificationList of current notifications</doc>
        <source-position filename="src/notifications/notify-manager.h"
                         line="24"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notify-manager.c"
               line="788">The #PhoshNotificationList</doc>
          <type name="NotificationList" c:type="PhoshNotificationList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="784">the #PhoshNotifyManager</doc>
            <type name="NotifyManager" c:type="PhoshNotifyManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_notification_id"
              c:identifier="phosh_notify_manager_get_notification_id">
        <doc xml:space="preserve"
             filename="src/notifications/notify-manager.c"
             line="814">Get a notification id</doc>
        <source-position filename="src/notifications/notify-manager.h"
                         line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notify-manager.c"
               line="820">a notification id that can be used to create new
notifications.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="816">the #PhoshNotifyManager</doc>
            <type name="NotifyManager" c:type="PhoshNotifyManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_banners"
              c:identifier="phosh_notify_manager_get_show_banners">
        <doc xml:space="preserve"
             filename="src/notifications/notify-manager.c"
             line="798">Are notififcation banners enabled</doc>
        <source-position filename="src/notifications/notify-manager.h"
                         line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/notifications/notify-manager.c"
               line="804">%TRUE if banners should be shown, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="800">the #PhoshNotifyManager</doc>
            <type name="NotifyManager" c:type="PhoshNotifyManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_notification_banner"
              c:identifier="phosh_notify_manager_get_show_notification_banner">
        <source-position filename="src/notifications/notify-manager.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NotifyManager" c:type="PhoshNotifyManager*"/>
          </instance-parameter>
          <parameter name="notification" transfer-ownership="none">
            <type name="Notification" c:type="PhoshNotification*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="new-notification" when="last">
        <doc xml:space="preserve"
             filename="src/notifications/notify-manager.c"
             line="715">Emitted when a new notification is received and a banner should (possibly)
be shown</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="718">the new #PhoshNotification</doc>
            <type name="Notification"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="notification-activated" when="last">
        <doc xml:space="preserve"
             filename="src/notifications/notify-manager.c"
             line="734">Emitted when the action on a notification gets activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/notifications/notify-manager.c"
                 line="737">the #PhoshNotification</doc>
            <type name="Notification"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="NotifyManagerClass"
            c:type="PhoshNotifyManagerClass"
            glib:is-gtype-struct-for="NotifyManager">
      <source-position filename="src/notifications/notify-manager.h"
                       line="20"/>
      <field name="parent_class">
        <type name="NotifyDBusNotificationsSkeletonClass"
              c:type="PhoshNotifyDBusNotificationsSkeletonClass"/>
      </field>
    </record>
    <bitfield name="NotifyScreenWakeupFlags"
              glib:type-name="PhoshNotifyScreenWakeupFlags"
              glib:get-type="phosh_notify_screen_wakeup_flags_get_type"
              c:type="PhoshNotifyScreenWakeupFlags">
      <doc xml:space="preserve"
           filename="src/phosh-settings-enums.h"
           line="43">What notification properties trigger screen wakeup</doc>
      <member name="any"
              value="1"
              c:identifier="PHOSH_NOTIFY_SCREEN_WAKEUP_FLAG_ANY"
              glib:nick="any"
              glib:name="PHOSH_NOTIFY_SCREEN_WAKEUP_FLAG_ANY">
        <doc xml:space="preserve"
             filename="src/phosh-settings-enums.h"
             line="48">Wakeup screen on any notification</doc>
      </member>
      <member name="urgency"
              value="2"
              c:identifier="PHOSH_NOTIFY_SCREEN_WAKEUP_FLAG_URGENCY"
              glib:nick="urgency"
              glib:name="PHOSH_NOTIFY_SCREEN_WAKEUP_FLAG_URGENCY">
        <doc xml:space="preserve"
             filename="src/phosh-settings-enums.h"
             line="46">Wakeup screen based on notification urgency</doc>
      </member>
      <member name="category"
              value="4"
              c:identifier="PHOSH_NOTIFY_SCREEN_WAKEUP_FLAG_CATEGORY"
              glib:nick="category"
              glib:name="PHOSH_NOTIFY_SCREEN_WAKEUP_FLAG_CATEGORY">
      </member>
    </bitfield>
    <function-macro name="OFONO_DBUS_IS_MANAGER"
                    c:identifier="PHOSH_OFONO_DBUS_IS_MANAGER"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="380"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_MANAGER_PROXY"
                    c:identifier="PHOSH_OFONO_DBUS_IS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="464"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_MANAGER_PROXY_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_IS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="465"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_MANAGER_SKELETON"
                    c:identifier="PHOSH_OFONO_DBUS_IS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="534"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_MANAGER_SKELETON_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_IS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="535"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_NETWORK_REGISTRATION"
                    c:identifier="PHOSH_OFONO_DBUS_IS_NETWORK_REGISTRATION"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="201"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_NETWORK_REGISTRATION_PROXY"
                    c:identifier="PHOSH_OFONO_DBUS_IS_NETWORK_REGISTRATION_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="277"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_NETWORK_REGISTRATION_PROXY_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_IS_NETWORK_REGISTRATION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="278"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_NETWORK_REGISTRATION_SKELETON"
                    c:identifier="PHOSH_OFONO_DBUS_IS_NETWORK_REGISTRATION_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="347"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_NETWORK_REGISTRATION_SKELETON_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_IS_NETWORK_REGISTRATION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="348"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_SIM_MANAGER"
                    c:identifier="PHOSH_OFONO_DBUS_IS_SIM_MANAGER"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_SIM_MANAGER_PROXY"
                    c:identifier="PHOSH_OFONO_DBUS_IS_SIM_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="98"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_SIM_MANAGER_PROXY_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_IS_SIM_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="99"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_SIM_MANAGER_SKELETON"
                    c:identifier="PHOSH_OFONO_DBUS_IS_SIM_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="168"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_IS_SIM_MANAGER_SKELETON_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_IS_SIM_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="169"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_MANAGER"
                    c:identifier="PHOSH_OFONO_DBUS_MANAGER"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="379"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_MANAGER_GET_IFACE"
                    c:identifier="PHOSH_OFONO_DBUS_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="381"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_MANAGER_PROXY"
                    c:identifier="PHOSH_OFONO_DBUS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="461"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_MANAGER_PROXY_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="462"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_MANAGER_PROXY_GET_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="463"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_MANAGER_SKELETON"
                    c:identifier="PHOSH_OFONO_DBUS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="531"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_MANAGER_SKELETON_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="532"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_MANAGER_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="533"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_NETWORK_REGISTRATION"
                    c:identifier="PHOSH_OFONO_DBUS_NETWORK_REGISTRATION"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="200"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_NETWORK_REGISTRATION_GET_IFACE"
                    c:identifier="PHOSH_OFONO_DBUS_NETWORK_REGISTRATION_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="202"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_NETWORK_REGISTRATION_PROXY"
                    c:identifier="PHOSH_OFONO_DBUS_NETWORK_REGISTRATION_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="274"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_NETWORK_REGISTRATION_PROXY_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_NETWORK_REGISTRATION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="275"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_NETWORK_REGISTRATION_PROXY_GET_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_NETWORK_REGISTRATION_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="276"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_NETWORK_REGISTRATION_SKELETON"
                    c:identifier="PHOSH_OFONO_DBUS_NETWORK_REGISTRATION_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="344"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_NETWORK_REGISTRATION_SKELETON_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_NETWORK_REGISTRATION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="345"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_NETWORK_REGISTRATION_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_NETWORK_REGISTRATION_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="346"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_SIM_MANAGER"
                    c:identifier="PHOSH_OFONO_DBUS_SIM_MANAGER"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_SIM_MANAGER_GET_IFACE"
                    c:identifier="PHOSH_OFONO_DBUS_SIM_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_SIM_MANAGER_PROXY"
                    c:identifier="PHOSH_OFONO_DBUS_SIM_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="95"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_SIM_MANAGER_PROXY_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_SIM_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="96"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_SIM_MANAGER_PROXY_GET_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_SIM_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="97"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_SIM_MANAGER_SKELETON"
                    c:identifier="PHOSH_OFONO_DBUS_SIM_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="165"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_SIM_MANAGER_SKELETON_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_SIM_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="166"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OFONO_DBUS_SIM_MANAGER_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_OFONO_DBUS_SIM_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="167"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_IS_SM_PURI_OSK0"
                    c:identifier="PHOSH_OSK0_IS_SM_PURI_OSK0"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_IS_SM_PURI_OSK0_PROXY"
                    c:identifier="PHOSH_OSK0_IS_SM_PURI_OSK0_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="92"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_IS_SM_PURI_OSK0_PROXY_CLASS"
                    c:identifier="PHOSH_OSK0_IS_SM_PURI_OSK0_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="93"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_IS_SM_PURI_OSK0_SKELETON"
                    c:identifier="PHOSH_OSK0_IS_SM_PURI_OSK0_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="162"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_IS_SM_PURI_OSK0_SKELETON_CLASS"
                    c:identifier="PHOSH_OSK0_IS_SM_PURI_OSK0_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="163"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_SM_PURI_OSK0"
                    c:identifier="PHOSH_OSK0_SM_PURI_OSK0"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_SM_PURI_OSK0_GET_IFACE"
                    c:identifier="PHOSH_OSK0_SM_PURI_OSK0_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_SM_PURI_OSK0_PROXY"
                    c:identifier="PHOSH_OSK0_SM_PURI_OSK0_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="89"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_SM_PURI_OSK0_PROXY_CLASS"
                    c:identifier="PHOSH_OSK0_SM_PURI_OSK0_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="90"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_SM_PURI_OSK0_PROXY_GET_CLASS"
                    c:identifier="PHOSH_OSK0_SM_PURI_OSK0_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="91"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_SM_PURI_OSK0_SKELETON"
                    c:identifier="PHOSH_OSK0_SM_PURI_OSK0_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="159"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_SM_PURI_OSK0_SKELETON_CLASS"
                    c:identifier="PHOSH_OSK0_SM_PURI_OSK0_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="160"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OSK0_SM_PURI_OSK0_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_OSK0_SM_PURI_OSK0_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="161"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="OfonoDBusManager"
               c:symbol-prefix="ofono_dbus_manager"
               c:type="PhoshOfonoDBusManager"
               glib:type-name="PhoshOfonoDBusManager"
               glib:get-type="phosh_ofono_dbus_manager_get_type"
               glib:type-struct="OfonoDBusManagerIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="2571">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-Manager.top_of_page"&gt;org.ofono.Manager&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="405"/>
      <function name="interface_info"
                c:identifier="phosh_ofono_dbus_manager_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2501">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-ofono-Manager.top_of_page"&gt;org.ofono.Manager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="413"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="2506">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_ofono_dbus_manager_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2514">Overrides all #GObject properties in the #PhoshOfonoDBusManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="414"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="2522">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2516">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2517">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_get_modems">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2580">Handler for the #PhoshOfonoDBusManager::handle-get-modems signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="392"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="modem_added">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2581">Handler for the #PhoshOfonoDBusManager::modem-added signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="396"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_unnamed_arg1" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="modem_removed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2582">Handler for the #PhoshOfonoDBusManager::modem-removed signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="401"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_get_modems"
              c:identifier="phosh_ofono_dbus_manager_call_get_modems"
              glib:finish-func="call_get_modems_finish"
              glib:sync-func="call_get_modems_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2692">Asynchronously invokes the &lt;link linkend="gdbus-method-org-ofono-Manager.GetModems"&gt;GetModems()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_ofono_dbus_manager_call_get_modems_finish() to get the result of the operation.

See phosh_ofono_dbus_manager_call_get_modems_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="438"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2694">A #PhoshOfonoDBusManagerProxy.</doc>
            <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2695">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2696">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2697">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_modems_finish"
              c:identifier="phosh_ofono_dbus_manager_call_get_modems_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2722">Finishes an operation started with phosh_ofono_dbus_manager_call_get_modems().</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="444"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="2731">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2724">A #PhoshOfonoDBusManagerProxy.</doc>
            <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
          </instance-parameter>
          <parameter name="out_unnamed_arg0"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2725">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2726">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_ofono_dbus_manager_call_get_modems().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_modems_sync"
              c:identifier="phosh_ofono_dbus_manager_call_get_modems_sync"
              throws="1"
              glib:async-func="call_get_modems">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2752">Synchronously invokes the &lt;link linkend="gdbus-method-org-ofono-Manager.GetModems"&gt;GetModems()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_ofono_dbus_manager_call_get_modems() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="450"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="2763">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2754">A #PhoshOfonoDBusManagerProxy.</doc>
            <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
          </instance-parameter>
          <parameter name="out_unnamed_arg0"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2755">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2756">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_modems"
              c:identifier="phosh_ofono_dbus_manager_complete_get_modems">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2790">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-ofono-Manager.GetModems"&gt;GetModems()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="418"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2792">A #PhoshOfonoDBusManager.</doc>
            <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2793">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2794">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_modem_added"
              c:identifier="phosh_ofono_dbus_manager_emit_modem_added">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2660">Emits the &lt;link linkend="gdbus-signal-org-ofono-Manager.ModemAdded"&gt;"ModemAdded"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="426"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2662">A #PhoshOfonoDBusManager.</doc>
            <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2663">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_unnamed_arg1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2664">Argument to pass with the signal.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_modem_removed"
              c:identifier="phosh_ofono_dbus_manager_emit_modem_removed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2677">Emits the &lt;link linkend="gdbus-signal-org-ofono-Manager.ModemRemoved"&gt;"ModemRemoved"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="431"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2679">A #PhoshOfonoDBusManager.</doc>
            <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2680">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-get-modems" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2594">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-ofono-Manager.GetModems"&gt;GetModems()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_ofono_dbus_manager_complete_get_modems() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="2603">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2597">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="modem-added" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2617">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-ofono-Manager.ModemAdded"&gt;"ModemAdded"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2620">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_unnamed_arg1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2621">Argument.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="modem-removed" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2638">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-ofono-Manager.ModemRemoved"&gt;"ModemRemoved"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2641">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="OfonoDBusManagerIface"
            c:type="PhoshOfonoDBusManagerIface"
            glib:is-gtype-struct-for="OfonoDBusManager">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="2577">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-Manager.top_of_page"&gt;org.ofono.Manager&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="405"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2579">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_modems">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2580">Handler for the #PhoshOfonoDBusManager::handle-get-modems signal.</doc>
        <callback name="handle_get_modems">
          <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                           line="392"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="modem_added">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2581">Handler for the #PhoshOfonoDBusManager::modem-added signal.</doc>
        <callback name="modem_added">
          <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                           line="396"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
            </parameter>
            <parameter name="arg_unnamed_arg0" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_unnamed_arg1" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="modem_removed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2582">Handler for the #PhoshOfonoDBusManager::modem-removed signal.</doc>
        <callback name="modem_removed">
          <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                           line="401"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="OfonoDBusManager" c:type="PhoshOfonoDBusManager*"/>
            </parameter>
            <parameter name="arg_unnamed_arg0" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="OfonoDBusManagerProxy"
           c:symbol-prefix="ofono_dbus_manager_proxy"
           c:type="PhoshOfonoDBusManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshOfonoDBusManagerProxy"
           glib:get-type="phosh_ofono_dbus_manager_proxy_get_type"
           glib:type-struct="OfonoDBusManagerProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="2813">The #PhoshOfonoDBusManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="481"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="OfonoDBusManager"/>
      <constructor name="new_finish"
                   c:identifier="phosh_ofono_dbus_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="3004">Finishes an operation started with phosh_ofono_dbus_manager_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="497"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="3011">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusManagerProxy" c:type="PhoshOfonoDBusManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3006">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_ofono_dbus_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_ofono_dbus_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="3094">Finishes an operation started with phosh_ofono_dbus_manager_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="516"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="3101">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusManagerProxy" c:type="PhoshOfonoDBusManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3096">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_ofono_dbus_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_ofono_dbus_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="3119">Like phosh_ofono_dbus_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_ofono_dbus_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="519"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="3134">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusManagerProxy" c:type="PhoshOfonoDBusManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3121">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3122">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3123">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3124">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3125">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_ofono_dbus_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="3029">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-Manager.top_of_page"&gt;org.ofono.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_ofono_dbus_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="500"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="3044">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusManagerProxy" c:type="PhoshOfonoDBusManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3031">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3032">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3033">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3034">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3035">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_ofono_dbus_manager_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2974">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-Manager.top_of_page"&gt;org.ofono.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_ofono_dbus_manager_proxy_new_finish() to get the result of the operation.

See phosh_ofono_dbus_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="489"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2976">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2977">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2978">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2979">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2980">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2981">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2982">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_ofono_dbus_manager_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="3064">Like phosh_ofono_dbus_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_ofono_dbus_manager_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_ofono_dbus_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="508"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3066">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3067">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3068">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3069">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3070">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3071">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="3072">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="OfonoDBusManagerProxyPrivate"
              c:type="PhoshOfonoDBusManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="OfonoDBusManagerProxyClass"
            c:type="PhoshOfonoDBusManagerProxyClass"
            glib:is-gtype-struct-for="OfonoDBusManagerProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="2819">Class structure for #PhoshOfonoDBusManagerProxy.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="481"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2821">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="OfonoDBusManagerProxyPrivate"
            c:type="PhoshOfonoDBusManagerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="469"/>
    </record>
    <class name="OfonoDBusManagerSkeleton"
           c:symbol-prefix="ofono_dbus_manager_skeleton"
           c:type="PhoshOfonoDBusManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshOfonoDBusManagerSkeleton"
           glib:get-type="phosh_ofono_dbus_manager_skeleton_get_type"
           glib:type-struct="OfonoDBusManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="3156">The #PhoshOfonoDBusManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="551"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="OfonoDBusManager"/>
      <constructor name="new"
                   c:identifier="phosh_ofono_dbus_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="3479">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-Manager.top_of_page"&gt;org.ofono.Manager&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="559"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="3484">The skeleton object.</doc>
          <type name="OfonoDBusManagerSkeleton"
                c:type="PhoshOfonoDBusManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="OfonoDBusManagerSkeletonPrivate"
              c:type="PhoshOfonoDBusManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="OfonoDBusManagerSkeletonClass"
            c:type="PhoshOfonoDBusManagerSkeletonClass"
            glib:is-gtype-struct-for="OfonoDBusManagerSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="3162">Class structure for #PhoshOfonoDBusManagerSkeleton.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="551"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="3164">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="OfonoDBusManagerSkeletonPrivate"
            c:type="PhoshOfonoDBusManagerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="539"/>
    </record>
    <interface name="OfonoDBusNetworkRegistration"
               c:symbol-prefix="ofono_dbus_network_registration"
               c:type="PhoshOfonoDBusNetworkRegistration"
               glib:type-name="PhoshOfonoDBusNetworkRegistration"
               glib:get-type="phosh_ofono_dbus_network_registration_get_type"
               glib:type-struct="OfonoDBusNetworkRegistrationIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="1493">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-NetworkRegistration.top_of_page"&gt;org.ofono.NetworkRegistration&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="222"/>
      <function name="interface_info"
                c:identifier="phosh_ofono_dbus_network_registration_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1436">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-ofono-NetworkRegistration.top_of_page"&gt;org.ofono.NetworkRegistration&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="230"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1441">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_ofono_dbus_network_registration_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1449">Overrides all #GObject properties in the #PhoshOfonoDBusNetworkRegistration interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1457">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1451">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1452">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_get_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1502">Handler for the #PhoshOfonoDBusNetworkRegistration::handle-get-properties signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="213"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="OfonoDBusNetworkRegistration"
                  c:type="PhoshOfonoDBusNetworkRegistration*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="property_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1503">Handler for the #PhoshOfonoDBusNetworkRegistration::property-changed signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="OfonoDBusNetworkRegistration"
                  c:type="PhoshOfonoDBusNetworkRegistration*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_unnamed_arg1" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_get_properties"
              c:identifier="phosh_ofono_dbus_network_registration_call_get_properties"
              glib:finish-func="call_get_properties_finish"
              glib:sync-func="call_get_properties_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1578">Asynchronously invokes the &lt;link linkend="gdbus-method-org-ofono-NetworkRegistration.GetProperties"&gt;GetProperties()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_ofono_dbus_network_registration_call_get_properties_finish() to get the result of the operation.

See phosh_ofono_dbus_network_registration_call_get_properties_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="251"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1580">A #PhoshOfonoDBusNetworkRegistrationProxy.</doc>
            <type name="OfonoDBusNetworkRegistration"
                  c:type="PhoshOfonoDBusNetworkRegistration*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1581">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1582">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1583">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_properties_finish"
              c:identifier="phosh_ofono_dbus_network_registration_call_get_properties_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1608">Finishes an operation started with phosh_ofono_dbus_network_registration_call_get_properties().</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="257"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1617">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1610">A #PhoshOfonoDBusNetworkRegistrationProxy.</doc>
            <type name="OfonoDBusNetworkRegistration"
                  c:type="PhoshOfonoDBusNetworkRegistration*"/>
          </instance-parameter>
          <parameter name="out_properties"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1611">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1612">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_ofono_dbus_network_registration_call_get_properties().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_properties_sync"
              c:identifier="phosh_ofono_dbus_network_registration_call_get_properties_sync"
              throws="1"
              glib:async-func="call_get_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1638">Synchronously invokes the &lt;link linkend="gdbus-method-org-ofono-NetworkRegistration.GetProperties"&gt;GetProperties()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_ofono_dbus_network_registration_call_get_properties() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="263"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1649">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1640">A #PhoshOfonoDBusNetworkRegistrationProxy.</doc>
            <type name="OfonoDBusNetworkRegistration"
                  c:type="PhoshOfonoDBusNetworkRegistration*"/>
          </instance-parameter>
          <parameter name="out_properties"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1641">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1642">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_properties"
              c:identifier="phosh_ofono_dbus_network_registration_complete_get_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1676">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-ofono-NetworkRegistration.GetProperties"&gt;GetProperties()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1678">A #PhoshOfonoDBusNetworkRegistration.</doc>
            <type name="OfonoDBusNetworkRegistration"
                  c:type="PhoshOfonoDBusNetworkRegistration*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1679">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1680">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_property_changed"
              c:identifier="phosh_ofono_dbus_network_registration_emit_property_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1561">Emits the &lt;link linkend="gdbus-signal-org-ofono-NetworkRegistration.PropertyChanged"&gt;"PropertyChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1563">A #PhoshOfonoDBusNetworkRegistration.</doc>
            <type name="OfonoDBusNetworkRegistration"
                  c:type="PhoshOfonoDBusNetworkRegistration*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1564">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_unnamed_arg1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1565">Argument to pass with the signal.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-get-properties" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1515">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-ofono-NetworkRegistration.GetProperties"&gt;GetProperties()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_ofono_dbus_network_registration_complete_get_properties() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1524">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1518">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="property-changed" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1538">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-ofono-NetworkRegistration.PropertyChanged"&gt;"PropertyChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1541">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_unnamed_arg1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1542">Argument.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="OfonoDBusNetworkRegistrationIface"
            c:type="PhoshOfonoDBusNetworkRegistrationIface"
            glib:is-gtype-struct-for="OfonoDBusNetworkRegistration">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="1499">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-NetworkRegistration.top_of_page"&gt;org.ofono.NetworkRegistration&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="222"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1501">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1502">Handler for the #PhoshOfonoDBusNetworkRegistration::handle-get-properties signal.</doc>
        <callback name="handle_get_properties">
          <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                           line="213"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="OfonoDBusNetworkRegistration"
                    c:type="PhoshOfonoDBusNetworkRegistration*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="property_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1503">Handler for the #PhoshOfonoDBusNetworkRegistration::property-changed signal.</doc>
        <callback name="property_changed">
          <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                           line="217"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="OfonoDBusNetworkRegistration"
                    c:type="PhoshOfonoDBusNetworkRegistration*"/>
            </parameter>
            <parameter name="arg_unnamed_arg0" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_unnamed_arg1" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="OfonoDBusNetworkRegistrationProxy"
           c:symbol-prefix="ofono_dbus_network_registration_proxy"
           c:type="PhoshOfonoDBusNetworkRegistrationProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshOfonoDBusNetworkRegistrationProxy"
           glib:get-type="phosh_ofono_dbus_network_registration_proxy_get_type"
           glib:type-struct="OfonoDBusNetworkRegistrationProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="1699">The #PhoshOfonoDBusNetworkRegistrationProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="294"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="OfonoDBusNetworkRegistration"/>
      <constructor name="new_finish"
                   c:identifier="phosh_ofono_dbus_network_registration_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1890">Finishes an operation started with phosh_ofono_dbus_network_registration_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="310"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1897">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusNetworkRegistrationProxy"
                c:type="PhoshOfonoDBusNetworkRegistration*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1892">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_ofono_dbus_network_registration_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_ofono_dbus_network_registration_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1980">Finishes an operation started with phosh_ofono_dbus_network_registration_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="329"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1987">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusNetworkRegistrationProxy"
                c:type="PhoshOfonoDBusNetworkRegistration*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1982">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_ofono_dbus_network_registration_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_ofono_dbus_network_registration_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2005">Like phosh_ofono_dbus_network_registration_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_ofono_dbus_network_registration_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="332"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="2020">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusNetworkRegistrationProxy"
                c:type="PhoshOfonoDBusNetworkRegistration*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2007">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2008">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2009">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2010">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="2011">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_ofono_dbus_network_registration_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1915">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-NetworkRegistration.top_of_page"&gt;org.ofono.NetworkRegistration&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_ofono_dbus_network_registration_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="313"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1930">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusNetworkRegistrationProxy"
                c:type="PhoshOfonoDBusNetworkRegistration*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1917">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1918">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1919">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1920">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1921">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_ofono_dbus_network_registration_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1860">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-NetworkRegistration.top_of_page"&gt;org.ofono.NetworkRegistration&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_ofono_dbus_network_registration_proxy_new_finish() to get the result of the operation.

See phosh_ofono_dbus_network_registration_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="302"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1862">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1863">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1864">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1865">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1866">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1867">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1868">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_ofono_dbus_network_registration_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1950">Like phosh_ofono_dbus_network_registration_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_ofono_dbus_network_registration_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_ofono_dbus_network_registration_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="321"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1952">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1953">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1954">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1955">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1956">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1957">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="1958">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="OfonoDBusNetworkRegistrationProxyPrivate"
              c:type="PhoshOfonoDBusNetworkRegistrationProxyPrivate*"/>
      </field>
    </class>
    <record name="OfonoDBusNetworkRegistrationProxyClass"
            c:type="PhoshOfonoDBusNetworkRegistrationProxyClass"
            glib:is-gtype-struct-for="OfonoDBusNetworkRegistrationProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="1705">Class structure for #PhoshOfonoDBusNetworkRegistrationProxy.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="294"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1707">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="OfonoDBusNetworkRegistrationProxyPrivate"
            c:type="PhoshOfonoDBusNetworkRegistrationProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="282"/>
    </record>
    <class name="OfonoDBusNetworkRegistrationSkeleton"
           c:symbol-prefix="ofono_dbus_network_registration_skeleton"
           c:type="PhoshOfonoDBusNetworkRegistrationSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshOfonoDBusNetworkRegistrationSkeleton"
           glib:get-type="phosh_ofono_dbus_network_registration_skeleton_get_type"
           glib:type-struct="OfonoDBusNetworkRegistrationSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="2042">The #PhoshOfonoDBusNetworkRegistrationSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="364"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="OfonoDBusNetworkRegistration"/>
      <constructor name="new"
                   c:identifier="phosh_ofono_dbus_network_registration_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2340">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-NetworkRegistration.top_of_page"&gt;org.ofono.NetworkRegistration&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="372"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="2345">The skeleton object.</doc>
          <type name="OfonoDBusNetworkRegistrationSkeleton"
                c:type="PhoshOfonoDBusNetworkRegistration*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="OfonoDBusNetworkRegistrationSkeletonPrivate"
              c:type="PhoshOfonoDBusNetworkRegistrationSkeletonPrivate*"/>
      </field>
    </class>
    <record name="OfonoDBusNetworkRegistrationSkeletonClass"
            c:type="PhoshOfonoDBusNetworkRegistrationSkeletonClass"
            glib:is-gtype-struct-for="OfonoDBusNetworkRegistrationSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="2048">Class structure for #PhoshOfonoDBusNetworkRegistrationSkeleton.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="364"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2050">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="OfonoDBusNetworkRegistrationSkeletonPrivate"
            c:type="PhoshOfonoDBusNetworkRegistrationSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="352"/>
    </record>
    <interface name="OfonoDBusSimManager"
               c:symbol-prefix="ofono_dbus_sim_manager"
               c:type="PhoshOfonoDBusSimManager"
               glib:type-name="PhoshOfonoDBusSimManager"
               glib:get-type="phosh_ofono_dbus_sim_manager_get_type"
               glib:type-struct="OfonoDBusSimManagerIface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="458">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-SimManager.top_of_page"&gt;org.ofono.SimManager&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="43"/>
      <function name="interface_info"
                c:identifier="phosh_ofono_dbus_sim_manager_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="401">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-ofono-SimManager.top_of_page"&gt;org.ofono.SimManager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="406">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_ofono_dbus_sim_manager_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="414">Overrides all #GObject properties in the #PhoshOfonoDBusSimManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="422">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="416">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="417">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_get_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="467">Handler for the #PhoshOfonoDBusSimManager::handle-get-properties signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="OfonoDBusSimManager"
                  c:type="PhoshOfonoDBusSimManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="property_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="468">Handler for the #PhoshOfonoDBusSimManager::property-changed signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="OfonoDBusSimManager"
                  c:type="PhoshOfonoDBusSimManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_unnamed_arg1" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_get_properties"
              c:identifier="phosh_ofono_dbus_sim_manager_call_get_properties"
              glib:finish-func="call_get_properties_finish"
              glib:sync-func="call_get_properties_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="543">Asynchronously invokes the &lt;link linkend="gdbus-method-org-ofono-SimManager.GetProperties"&gt;GetProperties()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_ofono_dbus_sim_manager_call_get_properties_finish() to get the result of the operation.

See phosh_ofono_dbus_sim_manager_call_get_properties_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="545">A #PhoshOfonoDBusSimManagerProxy.</doc>
            <type name="OfonoDBusSimManager"
                  c:type="PhoshOfonoDBusSimManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="546">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="547">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="548">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_properties_finish"
              c:identifier="phosh_ofono_dbus_sim_manager_call_get_properties_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="573">Finishes an operation started with phosh_ofono_dbus_sim_manager_call_get_properties().</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="78"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="582">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="575">A #PhoshOfonoDBusSimManagerProxy.</doc>
            <type name="OfonoDBusSimManager"
                  c:type="PhoshOfonoDBusSimManager*"/>
          </instance-parameter>
          <parameter name="out_properties"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="576">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="577">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_ofono_dbus_sim_manager_call_get_properties().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_properties_sync"
              c:identifier="phosh_ofono_dbus_sim_manager_call_get_properties_sync"
              throws="1"
              glib:async-func="call_get_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="603">Synchronously invokes the &lt;link linkend="gdbus-method-org-ofono-SimManager.GetProperties"&gt;GetProperties()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_ofono_dbus_sim_manager_call_get_properties() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="84"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="614">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="605">A #PhoshOfonoDBusSimManagerProxy.</doc>
            <type name="OfonoDBusSimManager"
                  c:type="PhoshOfonoDBusSimManager*"/>
          </instance-parameter>
          <parameter name="out_properties"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="606">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="607">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_properties"
              c:identifier="phosh_ofono_dbus_sim_manager_complete_get_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="641">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-ofono-SimManager.GetProperties"&gt;GetProperties()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="643">A #PhoshOfonoDBusSimManager.</doc>
            <type name="OfonoDBusSimManager"
                  c:type="PhoshOfonoDBusSimManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="644">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="645">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_property_changed"
              c:identifier="phosh_ofono_dbus_sim_manager_emit_property_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="526">Emits the &lt;link linkend="gdbus-signal-org-ofono-SimManager.PropertyChanged"&gt;"PropertyChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="528">A #PhoshOfonoDBusSimManager.</doc>
            <type name="OfonoDBusSimManager"
                  c:type="PhoshOfonoDBusSimManager*"/>
          </instance-parameter>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="529">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_unnamed_arg1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="530">Argument to pass with the signal.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-get-properties" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="480">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-ofono-SimManager.GetProperties"&gt;GetProperties()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_ofono_dbus_sim_manager_complete_get_properties() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="489">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="483">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="property-changed" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="503">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-ofono-SimManager.PropertyChanged"&gt;"PropertyChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_unnamed_arg0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="506">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_unnamed_arg1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="507">Argument.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="OfonoDBusSimManagerIface"
            c:type="PhoshOfonoDBusSimManagerIface"
            glib:is-gtype-struct-for="OfonoDBusSimManager">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="464">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-SimManager.top_of_page"&gt;org.ofono.SimManager&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="43"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="466">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="467">Handler for the #PhoshOfonoDBusSimManager::handle-get-properties signal.</doc>
        <callback name="handle_get_properties">
          <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="OfonoDBusSimManager"
                    c:type="PhoshOfonoDBusSimManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="property_changed">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="468">Handler for the #PhoshOfonoDBusSimManager::property-changed signal.</doc>
        <callback name="property_changed">
          <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                           line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="OfonoDBusSimManager"
                    c:type="PhoshOfonoDBusSimManager*"/>
            </parameter>
            <parameter name="arg_unnamed_arg0" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_unnamed_arg1" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="OfonoDBusSimManagerProxy"
           c:symbol-prefix="ofono_dbus_sim_manager_proxy"
           c:type="PhoshOfonoDBusSimManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshOfonoDBusSimManagerProxy"
           glib:get-type="phosh_ofono_dbus_sim_manager_proxy_get_type"
           glib:type-struct="OfonoDBusSimManagerProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="664">The #PhoshOfonoDBusSimManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="115"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="OfonoDBusSimManager"/>
      <constructor name="new_finish"
                   c:identifier="phosh_ofono_dbus_sim_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="855">Finishes an operation started with phosh_ofono_dbus_sim_manager_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="862">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusSimManagerProxy"
                c:type="PhoshOfonoDBusSimManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="857">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_ofono_dbus_sim_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_ofono_dbus_sim_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="945">Finishes an operation started with phosh_ofono_dbus_sim_manager_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="952">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusSimManagerProxy"
                c:type="PhoshOfonoDBusSimManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="947">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_ofono_dbus_sim_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_ofono_dbus_sim_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="970">Like phosh_ofono_dbus_sim_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_ofono_dbus_sim_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="153"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="985">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusSimManagerProxy"
                c:type="PhoshOfonoDBusSimManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="972">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="973">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="974">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="975">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="976">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_ofono_dbus_sim_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="880">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-SimManager.top_of_page"&gt;org.ofono.SimManager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_ofono_dbus_sim_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="134"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="895">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="OfonoDBusSimManagerProxy"
                c:type="PhoshOfonoDBusSimManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="882">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="883">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="884">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="885">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="886">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_ofono_dbus_sim_manager_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="825">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-SimManager.top_of_page"&gt;org.ofono.SimManager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_ofono_dbus_sim_manager_proxy_new_finish() to get the result of the operation.

See phosh_ofono_dbus_sim_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="827">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="828">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="829">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="830">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="831">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="832">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="833">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_ofono_dbus_sim_manager_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="915">Like phosh_ofono_dbus_sim_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_ofono_dbus_sim_manager_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_ofono_dbus_sim_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="917">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="918">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="919">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="920">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="921">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="922">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-wwan-ofono-dbus.c"
                 line="923">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="OfonoDBusSimManagerProxyPrivate"
              c:type="PhoshOfonoDBusSimManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="OfonoDBusSimManagerProxyClass"
            c:type="PhoshOfonoDBusSimManagerProxyClass"
            glib:is-gtype-struct-for="OfonoDBusSimManagerProxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="670">Class structure for #PhoshOfonoDBusSimManagerProxy.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="115"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="672">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="OfonoDBusSimManagerProxyPrivate"
            c:type="PhoshOfonoDBusSimManagerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="103"/>
    </record>
    <class name="OfonoDBusSimManagerSkeleton"
           c:symbol-prefix="ofono_dbus_sim_manager_skeleton"
           c:type="PhoshOfonoDBusSimManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshOfonoDBusSimManagerSkeleton"
           glib:get-type="phosh_ofono_dbus_sim_manager_skeleton_get_type"
           glib:type-struct="OfonoDBusSimManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="1007">The #PhoshOfonoDBusSimManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="185"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="OfonoDBusSimManager"/>
      <constructor name="new"
                   c:identifier="phosh_ofono_dbus_sim_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1305">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-ofono-SimManager.top_of_page"&gt;org.ofono.SimManager&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h"
                         line="193"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1310">The skeleton object.</doc>
          <type name="OfonoDBusSimManagerSkeleton"
                c:type="PhoshOfonoDBusSimManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="OfonoDBusSimManagerSkeletonPrivate"
              c:type="PhoshOfonoDBusSimManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="OfonoDBusSimManagerSkeletonClass"
            c:type="PhoshOfonoDBusSimManagerSkeletonClass"
            glib:is-gtype-struct-for="OfonoDBusSimManagerSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="1013">Class structure for #PhoshOfonoDBusSimManagerSkeleton.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="185"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1015">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="OfonoDBusSimManagerSkeletonPrivate"
            c:type="PhoshOfonoDBusSimManagerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="173"/>
    </record>
    <class name="OsdWindow"
           c:symbol-prefix="osd_window"
           c:type="PhoshOsdWindow"
           parent="SystemModal"
           glib:type-name="PhoshOsdWindow"
           glib:get-type="phosh_osd_window_get_type"
           glib:type-struct="OsdWindowClass">
      <doc xml:space="preserve"
           filename="src/osd-window.c"
           line="18">A OSD Window

The #PhoshOsdWindow displays contents fed via the
OSD (on screen display) DBus interface.</doc>
      <source-position filename="src/osd-window.h" line="14"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_osd_window_new">
        <source-position filename="src/osd-window.h" line="16"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="connector" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="level" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="max_level" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="connector"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="level"
                writable="1"
                transfer-ownership="none"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="max-level"
                writable="1"
                transfer-ownership="none"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="OsdWindowClass"
            c:type="PhoshOsdWindowClass"
            glib:is-gtype-struct-for="OsdWindow">
      <source-position filename="src/osd-window.h" line="14"/>
      <field name="parent_class">
        <type name="SystemModalClass" c:type="PhoshSystemModalClass"/>
      </field>
    </record>
    <interface name="Osk0SmPuriOSK0"
               c:symbol-prefix="osk0_sm_puri_osk0"
               c:type="PhoshOsk0SmPuriOSK0"
               glib:type-name="PhoshOsk0SmPuriOSK0"
               glib:get-type="phosh_osk0_sm_puri_osk0_get_type"
               glib:type-struct="Osk0SmPuriOSK0Iface">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-osk0-dbus.c"
           line="375">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-sm-puri-OSK0.top_of_page"&gt;sm.puri.OSK0&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="41"/>
      <function name="interface_info"
                c:identifier="phosh_osk0_sm_puri_osk0_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="330">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-sm-puri-OSK0.top_of_page"&gt;sm.puri.OSK0&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="335">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_osk0_sm_puri_osk0_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="343">Overrides all #GObject properties in the #PhoshOsk0SmPuriOSK0 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="351">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="345">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="346">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_visible"
                      invoker="get_visible"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="432">Gets the value of the &lt;link linkend="gdbus-property-sm-puri-OSK0.Visible"&gt;"Visible"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="440">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="434">A #PhoshOsk0SmPuriOSK0.</doc>
            <type name="Osk0SmPuriOSK0" c:type="PhoshOsk0SmPuriOSK0*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_visible">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="384">Handler for the #PhoshOsk0SmPuriOSK0::handle-set-visible signal.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Osk0SmPuriOSK0" c:type="PhoshOsk0SmPuriOSK0*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_visible" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_set_visible"
              c:identifier="phosh_osk0_sm_puri_osk0_call_set_visible"
              glib:finish-func="call_set_visible_finish"
              glib:sync-func="call_set_visible_sync">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="465">Asynchronously invokes the &lt;link linkend="gdbus-method-sm-puri-OSK0.SetVisible"&gt;SetVisible()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_osk0_sm_puri_osk0_call_set_visible_finish() to get the result of the operation.

See phosh_osk0_sm_puri_osk0_call_set_visible_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="467">A #PhoshOsk0SmPuriOSK0Proxy.</doc>
            <type name="Osk0SmPuriOSK0" c:type="PhoshOsk0SmPuriOSK0*"/>
          </instance-parameter>
          <parameter name="arg_visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="468">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="469">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="470">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="471">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_visible_finish"
              c:identifier="phosh_osk0_sm_puri_osk0_call_set_visible_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="498">Finishes an operation started with phosh_osk0_sm_puri_osk0_call_set_visible().</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="68"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="506">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="500">A #PhoshOsk0SmPuriOSK0Proxy.</doc>
            <type name="Osk0SmPuriOSK0" c:type="PhoshOsk0SmPuriOSK0*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="501">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_osk0_sm_puri_osk0_call_set_visible().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_visible_sync"
              c:identifier="phosh_osk0_sm_puri_osk0_call_set_visible_sync"
              throws="1"
              glib:async-func="call_set_visible">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="525">Synchronously invokes the &lt;link linkend="gdbus-method-sm-puri-OSK0.SetVisible"&gt;SetVisible()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_osk0_sm_puri_osk0_call_set_visible() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="73"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="536">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="527">A #PhoshOsk0SmPuriOSK0Proxy.</doc>
            <type name="Osk0SmPuriOSK0" c:type="PhoshOsk0SmPuriOSK0*"/>
          </instance-parameter>
          <parameter name="arg_visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="528">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="529">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_visible"
              c:identifier="phosh_osk0_sm_puri_osk0_complete_set_visible">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="563">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-sm-puri-OSK0.SetVisible"&gt;SetVisible()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="565">A #PhoshOsk0SmPuriOSK0.</doc>
            <type name="Osk0SmPuriOSK0" c:type="PhoshOsk0SmPuriOSK0*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="566">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visible"
              c:identifier="phosh_osk0_sm_puri_osk0_get_visible"
              glib:get-property="visible"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="432">Gets the value of the &lt;link linkend="gdbus-property-sm-puri-OSK0.Visible"&gt;"Visible"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="440">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="434">A #PhoshOsk0SmPuriOSK0.</doc>
            <type name="Osk0SmPuriOSK0" c:type="PhoshOsk0SmPuriOSK0*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_visible"
              c:identifier="phosh_osk0_sm_puri_osk0_set_visible"
              glib:set-property="visible"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="450">Sets the &lt;link linkend="gdbus-property-sm-puri-OSK0.Visible"&gt;"Visible"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="452">A #PhoshOsk0SmPuriOSK0.</doc>
            <type name="Osk0SmPuriOSK0" c:type="PhoshOsk0SmPuriOSK0*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="453">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="visible"
                writable="1"
                transfer-ownership="none"
                setter="set_visible"
                getter="get_visible"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="421">Represents the D-Bus property &lt;link linkend="gdbus-property-sm-puri-OSK0.Visible"&gt;"Visible"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-set-visible" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="397">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-sm-puri-OSK0.SetVisible"&gt;SetVisible()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_osk0_sm_puri_osk0_complete_set_visible() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="407">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="400">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="401">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="Osk0SmPuriOSK0Iface"
            c:type="PhoshOsk0SmPuriOSK0Iface"
            glib:is-gtype-struct-for="Osk0SmPuriOSK0">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-osk0-dbus.c"
           line="381">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-sm-puri-OSK0.top_of_page"&gt;sm.puri.OSK0&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="41"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="383">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_set_visible">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="384">Handler for the #PhoshOsk0SmPuriOSK0::handle-set-visible signal.</doc>
        <callback name="handle_set_visible">
          <source-position filename="src/dbus/phosh-osk0-dbus.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Osk0SmPuriOSK0" c:type="PhoshOsk0SmPuriOSK0*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_visible" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_visible">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="385">Getter for the #PhoshOsk0SmPuriOSK0:visible property.</doc>
        <callback name="get_visible">
          <source-position filename="src/dbus/phosh-osk0-dbus.h" line="39"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="440">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/phosh-osk0-dbus.c"
                   line="434">A #PhoshOsk0SmPuriOSK0.</doc>
              <type name="Osk0SmPuriOSK0" c:type="PhoshOsk0SmPuriOSK0*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Osk0SmPuriOSK0Proxy"
           c:symbol-prefix="osk0_sm_puri_osk0_proxy"
           c:type="PhoshOsk0SmPuriOSK0Proxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshOsk0SmPuriOSK0Proxy"
           glib:get-type="phosh_osk0_sm_puri_osk0_proxy_get_type"
           glib:type-struct="Osk0SmPuriOSK0ProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-osk0-dbus.c"
           line="583">The #PhoshOsk0SmPuriOSK0Proxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="109"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Osk0SmPuriOSK0"/>
      <constructor name="new_finish"
                   c:identifier="phosh_osk0_sm_puri_osk0_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="843">Finishes an operation started with phosh_osk0_sm_puri_osk0_proxy_new().</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="850">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="Osk0SmPuriOSK0Proxy" c:type="PhoshOsk0SmPuriOSK0*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="845">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_osk0_sm_puri_osk0_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_osk0_sm_puri_osk0_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="933">Finishes an operation started with phosh_osk0_sm_puri_osk0_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="144"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="940">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="Osk0SmPuriOSK0Proxy" c:type="PhoshOsk0SmPuriOSK0*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="935">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_osk0_sm_puri_osk0_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_osk0_sm_puri_osk0_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="958">Like phosh_osk0_sm_puri_osk0_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_osk0_sm_puri_osk0_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="147"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="973">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="Osk0SmPuriOSK0Proxy" c:type="PhoshOsk0SmPuriOSK0*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="960">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="961">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="962">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="963">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="964">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_osk0_sm_puri_osk0_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="868">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-sm-puri-OSK0.top_of_page"&gt;sm.puri.OSK0&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_osk0_sm_puri_osk0_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="883">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="Osk0SmPuriOSK0Proxy" c:type="PhoshOsk0SmPuriOSK0*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="870">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="871">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="872">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="873">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="874">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_osk0_sm_puri_osk0_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="813">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-sm-puri-OSK0.top_of_page"&gt;sm.puri.OSK0&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_osk0_sm_puri_osk0_proxy_new_finish() to get the result of the operation.

See phosh_osk0_sm_puri_osk0_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="815">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="816">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="817">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="818">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="819">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="820">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="821">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_osk0_sm_puri_osk0_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="903">Like phosh_osk0_sm_puri_osk0_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_osk0_sm_puri_osk0_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_osk0_sm_puri_osk0_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="905">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="906">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="907">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="908">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="909">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="910">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/phosh-osk0-dbus.c"
                 line="911">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="Osk0SmPuriOSK0ProxyPrivate"
              c:type="PhoshOsk0SmPuriOSK0ProxyPrivate*"/>
      </field>
    </class>
    <record name="Osk0SmPuriOSK0ProxyClass"
            c:type="PhoshOsk0SmPuriOSK0ProxyClass"
            glib:is-gtype-struct-for="Osk0SmPuriOSK0Proxy">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-osk0-dbus.c"
           line="589">Class structure for #PhoshOsk0SmPuriOSK0Proxy.</doc>
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="109"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="591">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="Osk0SmPuriOSK0ProxyPrivate"
            c:type="PhoshOsk0SmPuriOSK0ProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="97"/>
    </record>
    <class name="Osk0SmPuriOSK0Skeleton"
           c:symbol-prefix="osk0_sm_puri_osk0_skeleton"
           c:type="PhoshOsk0SmPuriOSK0Skeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshOsk0SmPuriOSK0Skeleton"
           glib:get-type="phosh_osk0_sm_puri_osk0_skeleton_get_type"
           glib:type-struct="Osk0SmPuriOSK0SkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-osk0-dbus.c"
           line="995">The #PhoshOsk0SmPuriOSK0Skeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="179"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Osk0SmPuriOSK0"/>
      <constructor name="new"
                   c:identifier="phosh_osk0_sm_puri_osk0_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="1448">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-sm-puri-OSK0.top_of_page"&gt;sm.puri.OSK0&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/phosh-osk0-dbus.h" line="187"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="1453">The skeleton object.</doc>
          <type name="Osk0SmPuriOSK0Skeleton" c:type="PhoshOsk0SmPuriOSK0*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="Osk0SmPuriOSK0SkeletonPrivate"
              c:type="PhoshOsk0SmPuriOSK0SkeletonPrivate*"/>
      </field>
    </class>
    <record name="Osk0SmPuriOSK0SkeletonClass"
            c:type="PhoshOsk0SmPuriOSK0SkeletonClass"
            glib:is-gtype-struct-for="Osk0SmPuriOSK0Skeleton">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-osk0-dbus.c"
           line="1001">Class structure for #PhoshOsk0SmPuriOSK0Skeleton.</doc>
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="179"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="1003">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="Osk0SmPuriOSK0SkeletonPrivate"
            c:type="PhoshOsk0SmPuriOSK0SkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="167"/>
    </record>
    <class name="OskButton"
           c:symbol-prefix="osk_button"
           c:type="PhoshOskButton"
           parent="Gtk.ToggleButton"
           glib:type-name="PhoshOskButton"
           glib:get-type="phosh_osk_button_get_type"
           glib:type-struct="OskButtonClass">
      <doc xml:space="preserve"
           filename="src/osk-button.c"
           line="18">A button that toggles the OSK

The #PhoshOskButton is responsible for toggling the on screen keyboard</doc>
      <source-position filename="src/osk-button.h" line="17"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_osk_button_new">
        <source-position filename="src/osk-button.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="OskButtonClass"
            c:type="PhoshOskButtonClass"
            glib:is-gtype-struct-for="OskButton">
      <source-position filename="src/osk-button.h" line="17"/>
      <field name="parent_class">
        <type name="Gtk.ToggleButtonClass" c:type="GtkToggleButtonClass"/>
      </field>
    </record>
    <class name="OskManager"
           c:symbol-prefix="osk_manager"
           c:type="PhoshOskManager"
           parent="GObject.Object"
           glib:type-name="PhoshOskManager"
           glib:get-type="phosh_osk_manager_get_type"
           glib:type-struct="OskManagerClass">
      <doc xml:space="preserve"
           filename="src/osk-manager.c"
           line="21">A manager that handles the OSK

The #PhoshOskManager is responsible for handling the on screen keyboard.
It tracks the OSKs visible property and can toggle the state. Note that
there's no way to ensure keyboard state via this interface as it just
uses DBus to express preference. Any text input can make the keyboard
show again.</doc>
      <source-position filename="src/osk-manager.h" line="17"/>
      <constructor name="new" c:identifier="phosh_osk_manager_new">
        <source-position filename="src/osk-manager.h" line="19"/>
        <return-value transfer-ownership="full">
          <type name="OskManager" c:type="PhoshOskManager*"/>
        </return-value>
      </constructor>
      <method name="get_available"
              c:identifier="phosh_osk_manager_get_available"
              glib:get-property="available">
        <source-position filename="src/osk-manager.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OskManager" c:type="PhoshOskManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible"
              c:identifier="phosh_osk_manager_get_visible"
              glib:get-property="visible">
        <source-position filename="src/osk-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OskManager" c:type="PhoshOskManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_visible" c:identifier="phosh_osk_manager_set_visible">
        <source-position filename="src/osk-manager.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OskManager" c:type="PhoshOskManager*"/>
          </instance-parameter>
          <parameter name="visible" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="available"
                transfer-ownership="none"
                getter="get_available"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="visible"
                transfer-ownership="none"
                getter="get_visible"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="OskManagerClass"
            c:type="PhoshOskManagerClass"
            glib:is-gtype-struct-for="OskManager">
      <source-position filename="src/osk-manager.h" line="17"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Overview"
           c:symbol-prefix="overview"
           c:type="PhoshOverview"
           parent="Gtk.Box"
           glib:type-name="PhoshOverview"
           glib:get-type="phosh_overview_get_type"
           glib:type-struct="OverviewClass">
      <doc xml:space="preserve"
           filename="src/overview.c"
           line="31">The overview shows running apps and the app grid to launch new
applications.

The #PhoshOverview shows running apps (#PhoshActivity) and
the app grid (#PhoshAppGrid) to launch new applications.</doc>
      <source-position filename="src/overview.h" line="17"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="phosh_overview_new">
        <source-position filename="src/overview.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="focus_app_search"
              c:identifier="phosh_overview_focus_app_search">
        <source-position filename="src/overview.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Overview" c:type="PhoshOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_grid" c:identifier="phosh_overview_get_app_grid">
        <doc xml:space="preserve"
             filename="src/overview.c"
             line="600">Get the application grid</doc>
        <source-position filename="src/overview.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/overview.c"
               line="606">The app grid widget</doc>
          <type name="AppGrid" c:type="PhoshAppGrid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/overview.c"
                 line="602">The overview</doc>
            <type name="Overview" c:type="PhoshOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="handle_search" c:identifier="phosh_overview_handle_search">
        <source-position filename="src/overview.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Overview" c:type="PhoshOverview*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_running_activities"
              c:identifier="phosh_overview_has_running_activities">
        <source-position filename="src/overview.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Overview" c:type="PhoshOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="phosh_overview_reset">
        <source-position filename="src/overview.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Overview" c:type="PhoshOverview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="activity-closed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="activity-launched" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="activity-raised" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="selection-aborted" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="OverviewClass"
            c:type="PhoshOverviewClass"
            glib:is-gtype-struct-for="Overview">
      <source-position filename="src/overview.h" line="17"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="PasswordEntry"
           c:symbol-prefix="password_entry"
           c:type="PhoshPasswordEntry"
           version="0.33.0"
           parent="Gtk.Entry"
           glib:type-name="PhoshPasswordEntry"
           glib:get-type="phosh_password_entry_get_type"
           glib:type-struct="PasswordEntryClass">
      <doc xml:space="preserve"
           filename="src/password-entry.c"
           line="14">A widget for entering passwords</doc>
      <source-position filename="src/password-entry.h" line="15"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.CellEditable"/>
      <implements name="Gtk.Editable"/>
      <constructor name="new" c:identifier="phosh_password_entry_new">
        <source-position filename="src/password-entry.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="PasswordEntry" c:type="PhoshPasswordEntry*"/>
        </return-value>
      </constructor>
    </class>
    <record name="PasswordEntryClass"
            c:type="PhoshPasswordEntryClass"
            glib:is-gtype-struct-for="PasswordEntry">
      <source-position filename="src/password-entry.h" line="15"/>
      <field name="parent_class">
        <type name="Gtk.EntryClass" c:type="GtkEntryClass"/>
      </field>
    </record>
    <docsection name="PhoshCallsDBusCallsCall">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="293">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshCallsDBusObject">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="2525">This section contains the #PhoshCallsDBusObject, #PhoshCallsDBusObjectProxy, and #PhoshCallsDBusObjectSkeleton types which make it easier to work with objects implementing generated types for D-Bus interfaces.</doc>
    </docsection>
    <docsection name="PhoshCallsDBusObjectManagerClient">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="2839">This section contains a #GDBusObjectManagerClient that uses phosh_calls_dbus_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc.</doc>
    </docsection>
    <docsection name="PhoshDBusColor">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-color-dbus.c"
           line="205">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Color.top_of_page"&gt;org.gnome.SettingsDaemon.Color&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusDisplayConfig">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-display-dbus.c"
           line="548">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-Mutter-DisplayConfig.top_of_page"&gt;org.gnome.Mutter.DisplayConfig&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusEndSessionDialog">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-end-session-dialog-dbus.c"
           line="256">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-SessionManager-EndSessionDialog.top_of_page"&gt;org.gnome.SessionManager.EndSessionDialog&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusGnomeShell">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gnome-shell-dbus.c"
           line="427">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-Shell.top_of_page"&gt;org.gnome.Shell&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusHostname1">
      <doc xml:space="preserve"
           filename="src/dbus/hostname1-dbus.c"
           line="205">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-hostname1.top_of_page"&gt;org.freedesktop.hostname1&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusImplPortalAccess">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="1181">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Access.top_of_page"&gt;org.freedesktop.impl.portal.Access&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusImplPortalRequest">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="305">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Request.top_of_page"&gt;org.freedesktop.impl.portal.Request&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusLoginManager">
      <doc xml:space="preserve"
           filename="src/dbus/login1-manager-dbus.c"
           line="348">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-login1-Manager.top_of_page"&gt;org.freedesktop.login1.Manager&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusLoginSession">
      <doc xml:space="preserve"
           filename="src/dbus/login1-session-dbus.c"
           line="299">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-login1-Session.top_of_page"&gt;org.freedesktop.login1.Session&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusMountOperationHandler">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
           line="407">This section contains code for working with the &lt;link linkend="gdbus-interface-org-Gtk-MountOperationHandler.top_of_page"&gt;org.Gtk.MountOperationHandler&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusScreenSaver">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screen-saver-dbus.c"
           line="293">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-ScreenSaver.top_of_page"&gt;org.gnome.ScreenSaver&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusScreenshot">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screenshot-dbus.c"
           line="454">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-Shell-Screenshot.top_of_page"&gt;org.gnome.Shell.Screenshot&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusSensorProxy">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="248">This section contains code for working with the &lt;link linkend="gdbus-interface-net-hadess-SensorProxy.top_of_page"&gt;net.hadess.SensorProxy&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusSensorProxyCompass">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="2808">This section contains code for working with the &lt;link linkend="gdbus-interface-net-hadess-SensorProxy-Compass.top_of_page"&gt;net.hadess.SensorProxy.Compass&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshDBusSessionManager">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-dbus.c"
           line="391">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-SessionManager.top_of_page"&gt;org.gnome.SessionManager&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshEmergencyCalls">
      <doc xml:space="preserve"
           filename="src/dbus/calls-emergency-dbus.c"
           line="293">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-Calls-EmergencyCalls.top_of_page"&gt;org.gnome.Calls.EmergencyCalls&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshGeoClueDBusManager">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-manager-dbus.c"
           line="250">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Manager.top_of_page"&gt;org.freedesktop.GeoClue2.Manager&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-agent-dbus.c"
           line="252">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Agent.top_of_page"&gt;org.freedesktop.GeoClue2.Agent&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshIdleDBusIdleMonitor">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="338">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshIdleDBusObject">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="1936">This section contains the #PhoshIdleDBusObject, #PhoshIdleDBusObjectProxy, and #PhoshIdleDBusObjectSkeleton types which make it easier to work with objects implementing generated types for D-Bus interfaces.</doc>
    </docsection>
    <docsection name="PhoshIdleDBusObjectManagerClient">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="2250">This section contains a #GDBusObjectManagerClient that uses phosh_idle_dbus_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc.</doc>
    </docsection>
    <docsection name="PhoshMprisDBusMediaPlayer2">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="293">This section contains code for working with the &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2.top_of_page"&gt;org.mpris.MediaPlayer2&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshMprisDBusMediaPlayer2Player">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="1593">This section contains code for working with the &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2-Player.top_of_page"&gt;org.mpris.MediaPlayer2.Player&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshNotifyDBusNotifications">
      <doc xml:space="preserve"
           filename="src/dbus/notify-dbus.c"
           line="432">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-Notifications.top_of_page"&gt;org.freedesktop.Notifications&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshOfonoDBusManager">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="2358">This section contains code for working with the &lt;link linkend="gdbus-interface-org-ofono-Manager.top_of_page"&gt;org.ofono.Manager&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshOfonoDBusNetworkRegistration">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="1323">This section contains code for working with the &lt;link linkend="gdbus-interface-org-ofono-NetworkRegistration.top_of_page"&gt;org.ofono.NetworkRegistration&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshOfonoDBusSimManager">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="288">This section contains code for working with the &lt;link linkend="gdbus-interface-org-ofono-SimManager.top_of_page"&gt;org.ofono.SimManager&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshOsk0SmPuriOSK0">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-osk0-dbus.c"
           line="250">This section contains code for working with the &lt;link linkend="gdbus-interface-sm-puri-OSK0.top_of_page"&gt;sm.puri.OSK0&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshRfkillDBusRfkill">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-rfkill-dbus.c"
           line="205">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Rfkill.top_of_page"&gt;org.gnome.SettingsDaemon.Rfkill&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshSessionClientPrivateDBusClientPrivate">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-client-private-dbus.c"
           line="252">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-SessionManager-ClientPrivate.top_of_page"&gt;org.gnome.SessionManager.ClientPrivate&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="PhoshSessionPresenceDBusPresence">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-presence-dbus.c"
           line="205">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-SessionManager-Presence.top_of_page"&gt;org.gnome.SessionManager.Presence&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <record name="PhysicalSize" c:type="PhoshPhysicalSize">
      <source-position filename="src/monitor/head-priv.h" line="46"/>
      <field name="width" writable="1">
        <type name="gint32" c:type="int32_t"/>
      </field>
      <field name="height" writable="1">
        <type name="gint32" c:type="int32_t"/>
      </field>
    </record>
    <class name="PluginLoader"
           c:symbol-prefix="plugin_loader"
           c:type="PhoshPluginLoader"
           version="0.21.0"
           parent="GObject.Object"
           glib:type-name="PhoshPluginLoader"
           glib:get-type="phosh_plugin_loader_get_type"
           glib:type-struct="PluginLoaderClass">
      <doc xml:space="preserve"
           filename="src/plugin-loader.c"
           line="26">Loads plugins for a given extension point</doc>
      <source-position filename="src/plugin-loader.h" line="21"/>
      <constructor name="new" c:identifier="phosh_plugin_loader_new">
        <source-position filename="src/plugin-loader.h" line="23"/>
        <return-value transfer-ownership="full">
          <type name="PluginLoader" c:type="PhoshPluginLoader*"/>
        </return-value>
        <parameters>
          <parameter name="plugin_dirs" transfer-ownership="none">
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="extension_point" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_extension_point"
              c:identifier="phosh_plugin_loader_get_extension_point"
              glib:get-property="extension-point">
        <source-position filename="src/plugin-loader.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PluginLoader" c:type="PhoshPluginLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plugin_dirs"
              c:identifier="phosh_plugin_loader_get_plugin_dirs"
              glib:get-property="plugin-dirs">
        <source-position filename="src/plugin-loader.h" line="26"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PluginLoader" c:type="PhoshPluginLoader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_plugin"
              c:identifier="phosh_plugin_loader_load_plugin">
        <doc xml:space="preserve"
             filename="src/plugin-loader.c"
             line="174">Load the given plugin.</doc>
        <source-position filename="src/plugin-loader.h" line="24"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/plugin-loader.c"
               line="181">The plugin widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/plugin-loader.c"
                 line="176">The plugin loader</doc>
            <type name="PluginLoader" c:type="PhoshPluginLoader*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/plugin-loader.c"
                 line="177">The name of the plugin to load</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="extension-point"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_extension_point"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/plugin-loader.c"
             line="145">The name of the extension point to load plugins for.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="plugin-dirs"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_plugin_dirs">
        <doc xml:space="preserve"
             filename="src/plugin-loader.c"
             line="135">The directory to search for plugins</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
    </class>
    <record name="PluginLoaderClass"
            c:type="PhoshPluginLoaderClass"
            glib:is-gtype-struct-for="PluginLoader">
      <source-position filename="src/plugin-loader.h" line="21"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="PolkitAuthAgent"
           c:symbol-prefix="polkit_auth_agent"
           c:type="PhoshPolkitAuthAgent"
           parent="GObject.Object"
           glib:type-name="PhoshPolkitAuthAgent"
           glib:get-type="phosh_polkit_auth_agent_get_type"
           glib:type-struct="PolkitAuthAgentClass">
      <doc xml:space="preserve"
           filename="src/polkit-auth-agent.c"
           line="24">PolicyKit Authentication Agent

The #PhoshPolkitAuthAgent is responsible for handling policy kit
interaction so the shell can work as a authentication agent.</doc>
      <source-position filename="src/polkit-auth-agent.h" line="22"/>
      <constructor name="new" c:identifier="phosh_polkit_auth_agent_new">
        <source-position filename="src/polkit-auth-agent.h" line="24"/>
        <return-value transfer-ownership="full">
          <type name="PolkitAuthAgent" c:type="PhoshPolkitAuthAgent*"/>
        </return-value>
      </constructor>
    </class>
    <record name="PolkitAuthAgentClass"
            c:type="PhoshPolkitAuthAgentClass"
            glib:is-gtype-struct-for="PolkitAuthAgent">
      <source-position filename="src/polkit-auth-agent.h" line="22"/>
      <field name="parent_class" introspectable="0">
        <type c:type="PolkitAgentListenerClass"/>
      </field>
    </record>
    <class name="PolkitAuthPrompt"
           c:symbol-prefix="polkit_auth_prompt"
           c:type="PhoshPolkitAuthPrompt"
           parent="SystemModalDialog"
           glib:type-name="PhoshPolkitAuthPrompt"
           glib:get-type="phosh_polkit_auth_prompt_get_type"
           glib:type-struct="PolkitAuthPromptClass">
      <doc xml:space="preserve"
           filename="src/polkit-auth-prompt.c"
           line="26">A modal prompt for policy kit authentication

The #PhoshPolkitAuthPrompt is used to ask policy kit authentication.
This handles the interaction with PolkitAgentSession.</doc>
      <source-position filename="src/polkit-auth-prompt.h" line="14"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_polkit_auth_prompt_new">
        <source-position filename="src/polkit-auth-prompt.h" line="16"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="action_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cookie" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="user_names" transfer-ownership="none">
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <property name="action-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="cookie"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="message"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="user-names"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <glib:signal name="done" when="last">
        <doc xml:space="preserve"
             filename="src/polkit-auth-prompt.c"
             line="480">This signal is emitted when the prompt can be closed. The cancelled
argument indicates whether the prompt was cancelled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancelled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/polkit-auth-prompt.c"
                 line="483">Whether the dialog was cancelled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PolkitAuthPromptClass"
            c:type="PhoshPolkitAuthPromptClass"
            glib:is-gtype-struct-for="PolkitAuthPrompt">
      <source-position filename="src/polkit-auth-prompt.h" line="14"/>
      <field name="parent_class">
        <type name="SystemModalDialogClass"
              c:type="PhoshSystemModalDialogClass"/>
      </field>
    </record>
    <class name="PortalAccessManager"
           c:symbol-prefix="portal_access_manager"
           c:type="PhoshPortalAccessManager"
           parent="DBusImplPortalAccessSkeleton"
           glib:type-name="PhoshPortalAccessManager"
           glib:get-type="phosh_portal_access_manager_get_type"
           glib:type-struct="PortalAccessManagerClass">
      <doc xml:space="preserve"
           filename="src/portal-access-manager.c"
           line="25">Implements org.freedesktop.impl.portal</doc>
      <source-position filename="src/portal-access-manager.h" line="14"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusImplPortalAccess"/>
      <constructor name="new" c:identifier="phosh_portal_access_manager_new">
        <source-position filename="src/portal-access-manager.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="PortalAccessManager" c:type="PhoshPortalAccessManager*"/>
        </return-value>
      </constructor>
    </class>
    <record name="PortalAccessManagerClass"
            c:type="PhoshPortalAccessManagerClass"
            glib:is-gtype-struct-for="PortalAccessManager">
      <source-position filename="src/portal-access-manager.h" line="14"/>
      <field name="parent_class">
        <type name="DBusImplPortalAccessSkeletonClass"
              c:type="PhoshDBusImplPortalAccessSkeletonClass"/>
      </field>
    </record>
    <class name="PortalRequest"
           c:symbol-prefix="portal_request"
           c:type="PhoshPortalRequest"
           parent="DBusImplPortalRequestSkeleton"
           glib:type-name="PhoshPortalRequest"
           glib:get-type="phosh_portal_request_get_type"
           glib:type-struct="PortalRequestClass">
      <doc xml:space="preserve"
           filename="src/portal-request.c"
           line="12">Shared request api for all portal backend interfaces.

The PhoshPortalRequest implements the Request backend interface.
See the portal documentation: https://flatpak.github.io/xdg-desktop-portal/#gdbus-org.freedesktop.impl.portal.Request.

The request object will alive as long as it is exported. Users of the request must ensure to export/unexport properly.</doc>
      <source-position filename="src/portal-request.h" line="14"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusImplPortalRequest"/>
      <constructor name="new" c:identifier="phosh_portal_request_new">
        <source-position filename="src/portal-request.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="PortalRequest" c:type="PhoshPortalRequest*"/>
        </return-value>
        <parameters>
          <parameter name="sender" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="app_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="export" c:identifier="phosh_portal_request_export">
        <source-position filename="src/portal-request.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PortalRequest" c:type="PhoshPortalRequest*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="exported" c:identifier="phosh_portal_request_exported">
        <source-position filename="src/portal-request.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PortalRequest" c:type="PhoshPortalRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unexport" c:identifier="phosh_portal_request_unexport">
        <source-position filename="src/portal-request.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PortalRequest" c:type="PhoshPortalRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="PortalRequestClass"
            c:type="PhoshPortalRequestClass"
            glib:is-gtype-struct-for="PortalRequest">
      <source-position filename="src/portal-request.h" line="14"/>
      <field name="parent_class">
        <type name="DBusImplPortalRequestSkeletonClass"
              c:type="PhoshDBusImplPortalRequestSkeletonClass"/>
      </field>
    </record>
    <class name="PowerMenu"
           c:symbol-prefix="power_menu"
           c:type="PhoshPowerMenu"
           parent="SystemModalDialog"
           glib:type-name="PhoshPowerMenu"
           glib:get-type="phosh_power_menu_get_type"
           glib:type-struct="PowerMenuClass">
      <doc xml:space="preserve"
           filename="src/power-menu.c"
           line="16">Menu on power button press</doc>
      <source-position filename="src/power-menu.h" line="17"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_power_menu_new">
        <source-position filename="src/power-menu.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="PowerMenu" c:type="PhoshPowerMenu*"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_show_suspend"
              c:identifier="phosh_power_menu_get_show_suspend"
              glib:get-property="show-suspend">
        <source-position filename="src/power-menu.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PowerMenu" c:type="PhoshPowerMenu*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_show_suspend"
              c:identifier="phosh_power_menu_set_show_suspend"
              glib:set-property="show-suspend">
        <source-position filename="src/power-menu.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PowerMenu" c:type="PhoshPowerMenu*"/>
          </instance-parameter>
          <parameter name="show_suspend" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="show-suspend"
                writable="1"
                transfer-ownership="none"
                setter="set_show_suspend"
                getter="get_show_suspend"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="done" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PowerMenuClass"
            c:type="PhoshPowerMenuClass"
            glib:is-gtype-struct-for="PowerMenu">
      <source-position filename="src/power-menu.h" line="17"/>
      <field name="parent_class">
        <type name="SystemModalDialogClass"
              c:type="PhoshSystemModalDialogClass"/>
      </field>
    </record>
    <class name="PowerMenuManager"
           c:symbol-prefix="power_menu_manager"
           c:type="PhoshPowerMenuManager"
           parent="GObject.Object"
           glib:type-name="PhoshPowerMenuManager"
           glib:get-type="phosh_power_menu_manager_get_type"
           glib:type-struct="PowerMenuManagerClass">
      <doc xml:space="preserve"
           filename="src/power-menu-manager.c"
           line="14">Handles the power button menu

The interface is responsible to handle the non-ui parts of a
#PhoshPowerDialog.</doc>
      <source-position filename="src/power-menu-manager.h" line="12"/>
      <constructor name="new" c:identifier="phosh_power_menu_manager_new">
        <source-position filename="src/power-menu-manager.h" line="14"/>
        <return-value transfer-ownership="full">
          <type name="PowerMenuManager" c:type="PhoshPowerMenuManager*"/>
        </return-value>
      </constructor>
    </class>
    <record name="PowerMenuManagerClass"
            c:type="PhoshPowerMenuManagerClass"
            glib:is-gtype-struct-for="PowerMenuManager">
      <source-position filename="src/power-menu-manager.h" line="12"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Proximity"
           c:symbol-prefix="proximity"
           c:type="PhoshProximity"
           parent="GObject.Object"
           glib:type-name="PhoshProximity"
           glib:get-type="phosh_proximity_get_type"
           glib:type-struct="ProximityClass">
      <doc xml:space="preserve"
           filename="src/proximity.c"
           line="18">Proximity sensor handling

#PhoshProximity handles enabling and disabling the proximity detection
based on e.g. active calls.</doc>
      <source-position filename="src/proximity.h" line="16"/>
      <constructor name="new" c:identifier="phosh_proximity_new">
        <source-position filename="src/proximity.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="Proximity" c:type="PhoshProximity*"/>
        </return-value>
        <parameters>
          <parameter name="sensor_proxy_manager" transfer-ownership="none">
            <type name="SensorProxyManager" c:type="PhoshSensorProxyManager*"/>
          </parameter>
          <parameter name="calls_manager" transfer-ownership="none">
            <type name="CallsManager" c:type="PhoshCallsManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="has_fader" c:identifier="phosh_proximity_has_fader">
        <source-position filename="src/proximity.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="sensor_proxy_manager"
                              transfer-ownership="none">
            <type name="Proximity" c:type="PhoshProximity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="calls-manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="CallsManager"/>
      </property>
      <property name="fader" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="sensor-proxy-manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SensorProxyManager"/>
      </property>
    </class>
    <record name="ProximityClass"
            c:type="PhoshProximityClass"
            glib:is-gtype-struct-for="Proximity">
      <source-position filename="src/proximity.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="QuickSetting"
           c:symbol-prefix="quick_setting"
           c:type="PhoshQuickSetting"
           parent="Gtk.Box"
           glib:type-name="PhoshQuickSetting"
           glib:get-type="phosh_quick_setting_get_type"
           glib:type-struct="QuickSettingClass">
      <doc xml:space="preserve"
           filename="src/quick-setting.c"
           line="18">A `PhoshQuickSetting` represents a state of an entity (like Wi-Fi, Bluetooth) using an icon
and label. It should be added to a [class@Phosh.QuickSettingsBox] for better integration.

A quick-setting displays the state using an icon and label. The state is set by
[class@Phosh.StatusIcon], which must be added as a child. It can also have a status-page, which
can be used to expose additional features. For example, a Wi-Fi quick-setting can show available
Wi-Fi hotspots as an extra option. When a status widget is set, the quick-setting displays an
arrow at the right end.

A quick-setting itself does not have any provision to display its status-page. It is
completely upto the user to display and hide the status-pages as required. However the
quick-setting can aid in the task with its [property@Phosh.QuickSetting:showing-status] property.
When `showing-status` is false, clicking the arrow will cause the quick-setting to emit
[signal@Phosh.QuickSetting::show-status]. If `showing-status` is true, then it will emit
[signal@Phosh.QuickSetting::hide-status]. The user of the quick-setting is expected to follow
this convention and set `showing-status` based on whether they are displaying the status-page
or not.

A quick-setting might be temporarily prevented from showing its status-page using
[property@Phosh.QuickSetting:can-show-status]. Again, `PhoshQuickSettingsBox` can take care of
this property, such that once you tell the box if showing status-page is allowed, it will ensure
that the children's `can-show-status` are synchronized with it.

A quick-setting can be in an active or inactive state. However clicking the quick-setting does
not toggle its state. The user must set the state using [property@Phosh.QuickSetting:active]. If
the child [class@StatusIcon] has an `enabled` property it will be automatically bound to the
[property@Phosh.QuickSetting:active] property.

When a quick-setting is clicked, [signal@Phosh.QuickSetting::clicked] is emitted. When it is
long-pressed or right-clicked, [signal@PhoshQuickSetting::long-pressed] is emitted.

The common usecase of `long-pressed` is to launch an action (like `settings.launch-panel`). So to
avoid duplicating this process for each quick-setting, the user can set
[property@Phosh.QuickSetting:long-press-action-name] and
[property@Phosh.QuickSetting:long-press-action-target]. The quick-setting then launches that
appropriate action.</doc>
      <source-position filename="src/quick-setting.h" line="19"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="phosh_quick_setting_new">
        <source-position filename="src/quick-setting.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="status_page" transfer-ownership="none">
            <type name="StatusPage" c:type="PhoshStatusPage*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_active"
              c:identifier="phosh_quick_setting_get_active"
              glib:get-property="active">
        <source-position filename="src/quick-setting.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_show_status"
              c:identifier="phosh_quick_setting_get_can_show_status"
              glib:get-property="can-show-status">
        <source-position filename="src/quick-setting.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_long_press_action_name"
              c:identifier="phosh_quick_setting_get_long_press_action_name"
              glib:get-property="long-press-action-name">
        <source-position filename="src/quick-setting.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_long_press_action_target"
              c:identifier="phosh_quick_setting_get_long_press_action_target"
              glib:get-property="long-press-action-target">
        <source-position filename="src/quick-setting.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_showing_status"
              c:identifier="phosh_quick_setting_get_showing_status"
              glib:get-property="showing-status">
        <source-position filename="src/quick-setting.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status_page"
              c:identifier="phosh_quick_setting_get_status_page"
              glib:get-property="status-page">
        <doc xml:space="preserve"
             filename="src/quick-setting.c"
             line="582">Get the current status widget of the quick-setting.</doc>
        <source-position filename="src/quick-setting.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/quick-setting.c"
               line="588">The status-page or `NULL`.</doc>
          <type name="StatusPage" c:type="PhoshStatusPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/quick-setting.c"
                 line="584">A quick-setting</doc>
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="phosh_quick_setting_set_active"
              glib:set-property="active">
        <source-position filename="src/quick-setting.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
          <parameter name="active" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_show_status"
              c:identifier="phosh_quick_setting_set_can_show_status"
              glib:set-property="can-show-status">
        <source-position filename="src/quick-setting.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
          <parameter name="can_show_status" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_long_press_action_name"
              c:identifier="phosh_quick_setting_set_long_press_action_name"
              glib:set-property="long-press-action-name">
        <source-position filename="src/quick-setting.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
          <parameter name="action_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_long_press_action_target"
              c:identifier="phosh_quick_setting_set_long_press_action_target"
              glib:set-property="long-press-action-target">
        <source-position filename="src/quick-setting.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
          <parameter name="action_target" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_showing_status"
              c:identifier="phosh_quick_setting_set_showing_status"
              glib:set-property="showing-status">
        <source-position filename="src/quick-setting.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
          <parameter name="showing_status" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status_page"
              c:identifier="phosh_quick_setting_set_status_page"
              glib:set-property="status-page">
        <doc xml:space="preserve"
             filename="src/quick-setting.c"
             line="540">Set the status-page of the quick-setting.</doc>
        <source-position filename="src/quick-setting.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/quick-setting.c"
                 line="542">A quick-setting</doc>
            <type name="QuickSetting" c:type="PhoshQuickSetting*"/>
          </instance-parameter>
          <parameter name="status_page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/quick-setting.c"
                 line="543">A status-page or `NULL`</doc>
            <type name="StatusPage" c:type="PhoshStatusPage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/quick-setting.c"
             line="327">The active state of the child.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-show-status"
                writable="1"
                transfer-ownership="none"
                setter="set_can_show_status"
                getter="get_can_show_status"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/quick-setting.c"
             line="345">If the child can display its status.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="long-press-action-name"
                writable="1"
                transfer-ownership="none"
                setter="set_long_press_action_name"
                getter="get_long_press_action_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/quick-setting.c"
             line="363">Action name to trigger on long-press.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="long-press-action-target"
                writable="1"
                transfer-ownership="none"
                setter="set_long_press_action_target"
                getter="get_long_press_action_target"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/quick-setting.c"
             line="372">Action target for `long-press-action-name`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="showing-status"
                writable="1"
                transfer-ownership="none"
                setter="set_showing_status"
                getter="get_showing_status"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/quick-setting.c"
             line="336">If the child is displaying its status.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="status-page"
                writable="1"
                transfer-ownership="none"
                setter="set_status_page"
                getter="get_status_page">
        <doc xml:space="preserve"
             filename="src/quick-setting.c"
             line="354">The status-page.</doc>
        <type name="StatusPage"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
      <glib:signal name="clicked" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="hide-status" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="long-pressed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="show-status" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="QuickSettingClass"
            c:type="PhoshQuickSettingClass"
            glib:is-gtype-struct-for="QuickSetting">
      <source-position filename="src/quick-setting.h" line="19"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="QuickSettings"
           c:symbol-prefix="quick_settings"
           c:type="PhoshQuickSettings"
           parent="Gtk.Bin"
           glib:type-name="PhoshQuickSettings"
           glib:get-type="phosh_quick_settings_get_type"
           glib:type-struct="QuickSettingsClass">
      <doc xml:space="preserve"
           filename="src/quick-settings.c"
           line="25">A widget to display quick-settings using [class@Phosh.QuickSettingsBox].

`PhoshQuickSettings` holds the default quick-settings and those loaded as plugins. It manages
their interaction with user by launching appropriate actions.

For example, tapping a Wi-Fi quick-setting would toggle its off/on state. Long pressing a
rotation quick-setting would change the rotation configuration.</doc>
      <source-position filename="src/quick-settings.h" line="14"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_quick_settings_new">
        <source-position filename="src/quick-settings.h" line="16"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <class name="QuickSettingsBox"
           c:symbol-prefix="quick_settings_box"
           c:type="PhoshQuickSettingsBox"
           parent="Gtk.Container"
           glib:type-name="PhoshQuickSettingsBox"
           glib:get-type="phosh_quick_settings_box_get_type"
           glib:type-struct="QuickSettingsBoxClass">
      <doc xml:space="preserve"
           filename="src/quick-settings-box.c"
           line="20">A `PhoshQuickSettingsBox` displays [class@Phosh.QuickSetting] in a responsive grid.

It takes care of displaying the quick-settings' status-pages as per
[signal@Phosh.QuickSetting::show-status] and [signal@Phosh.QuickSetting::hide-status]. At a time,
only zero or one status-page is displayed.

Use [property@Phosh.QuickSettingsBox:can-show-status] to temporarily prevent displaying of status
widgets, like in a lock-screen.

Due to the inclusion of status-pages, the box's height grows dynamically. For best usage, it is
advised to add the box to a vertically-scrollable parent.</doc>
      <source-position filename="src/quick-settings-box.h" line="14"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_quick_settings_box_new">
        <source-position filename="src/quick-settings-box.h" line="16"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="max_columns" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="spacing" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_can_show_status"
              c:identifier="phosh_quick_settings_box_get_can_show_status"
              glib:get-property="can-show-status">
        <source-position filename="src/quick-settings-box.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSettingsBox" c:type="PhoshQuickSettingsBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_columns"
              c:identifier="phosh_quick_settings_box_get_max_columns"
              glib:get-property="max-columns">
        <source-position filename="src/quick-settings-box.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSettingsBox" c:type="PhoshQuickSettingsBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spacing"
              c:identifier="phosh_quick_settings_box_get_spacing"
              glib:get-property="spacing">
        <source-position filename="src/quick-settings-box.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSettingsBox" c:type="PhoshQuickSettingsBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_can_show_status"
              c:identifier="phosh_quick_settings_box_set_can_show_status"
              glib:set-property="can-show-status">
        <source-position filename="src/quick-settings-box.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSettingsBox" c:type="PhoshQuickSettingsBox*"/>
          </instance-parameter>
          <parameter name="can_show_status" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_columns"
              c:identifier="phosh_quick_settings_box_set_max_columns"
              glib:set-property="max-columns">
        <source-position filename="src/quick-settings-box.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSettingsBox" c:type="PhoshQuickSettingsBox*"/>
          </instance-parameter>
          <parameter name="max_columns" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing"
              c:identifier="phosh_quick_settings_box_set_spacing"
              glib:set-property="spacing">
        <source-position filename="src/quick-settings-box.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="QuickSettingsBox" c:type="PhoshQuickSettingsBox*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-show-status"
                writable="1"
                transfer-ownership="none"
                setter="set_can_show_status"
                getter="get_can_show_status"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/quick-settings-box.c"
             line="764">If the box can show status of its children.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="max-columns"
                writable="1"
                transfer-ownership="none"
                setter="set_max_columns"
                getter="get_max_columns"
                default-value="3">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="spacing"
                writable="1"
                transfer-ownership="none"
                setter="set_spacing"
                getter="get_spacing"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/quick-settings-box.c"
             line="755">The spacing between the children.</doc>
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="QuickSettingsBoxClass"
            c:type="PhoshQuickSettingsBoxClass"
            glib:is-gtype-struct-for="QuickSettingsBox">
      <source-position filename="src/quick-settings-box.h" line="14"/>
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <record name="QuickSettingsClass"
            c:type="PhoshQuickSettingsClass"
            glib:is-gtype-struct-for="QuickSettings">
      <source-position filename="src/quick-settings.h" line="14"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <function-macro name="RFKILL_DBUS_IS_RFKILL"
                    c:identifier="PHOSH_RFKILL_DBUS_IS_RFKILL"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_IS_RFKILL_PROXY"
                    c:identifier="PHOSH_RFKILL_DBUS_IS_RFKILL_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="83"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_IS_RFKILL_PROXY_CLASS"
                    c:identifier="PHOSH_RFKILL_DBUS_IS_RFKILL_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="84"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_IS_RFKILL_SKELETON"
                    c:identifier="PHOSH_RFKILL_DBUS_IS_RFKILL_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="153"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_IS_RFKILL_SKELETON_CLASS"
                    c:identifier="PHOSH_RFKILL_DBUS_IS_RFKILL_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="154"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_RFKILL"
                    c:identifier="PHOSH_RFKILL_DBUS_RFKILL"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_RFKILL_GET_IFACE"
                    c:identifier="PHOSH_RFKILL_DBUS_RFKILL_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_RFKILL_PROXY"
                    c:identifier="PHOSH_RFKILL_DBUS_RFKILL_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="80"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_RFKILL_PROXY_CLASS"
                    c:identifier="PHOSH_RFKILL_DBUS_RFKILL_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="81"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_RFKILL_PROXY_GET_CLASS"
                    c:identifier="PHOSH_RFKILL_DBUS_RFKILL_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="82"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_RFKILL_SKELETON"
                    c:identifier="PHOSH_RFKILL_DBUS_RFKILL_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="150"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_RFKILL_SKELETON_CLASS"
                    c:identifier="PHOSH_RFKILL_DBUS_RFKILL_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="151"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="RFKILL_DBUS_RFKILL_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_RFKILL_DBUS_RFKILL_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="152"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Revealer"
           c:symbol-prefix="revealer"
           c:type="PhoshRevealer"
           version="0.25.0"
           parent="Gtk.Revealer"
           glib:type-name="PhoshRevealer"
           glib:get-type="phosh_revealer_get_type"
           glib:type-struct="RevealerClass">
      <doc xml:space="preserve"
           filename="src/revealer.c"
           line="13">Reveals e.g. a [class@StatusIcon] in the [class@TopPanel].

Similar to [class@Gtk.Revealer] but toggles the transition based on
the `show-child` property which also triggers the child's
visibility so it doesn't use up any size when not revealed
(e.g. when using the `crossfade` animation).</doc>
      <source-position filename="src/revealer.h" line="15"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_revealer_new">
        <source-position filename="src/revealer.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="Revealer" c:type="PhoshRevealer*"/>
        </return-value>
      </constructor>
      <method name="get_show_child"
              c:identifier="phosh_revealer_get_show_child"
              glib:get-property="show-child">
        <doc xml:space="preserve"
             filename="src/revealer.c"
             line="138">If %TRUE the child should be shown, otherwise hidden.

Returns; Whether the child should be shown.</doc>
        <source-position filename="src/revealer.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/revealer.c"
                 line="140">The PhoshRevealer:</doc>
            <type name="Revealer" c:type="PhoshRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_show_child"
              c:identifier="phosh_revealer_set_show_child"
              glib:set-property="show-child">
        <doc xml:space="preserve"
             filename="src/revealer.c"
             line="154">If `show_child` is %TRUE, the child will be set visible and shown
using a %GtkRevealer Otherwise it will be hidden.</doc>
        <source-position filename="src/revealer.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/revealer.c"
                 line="156">The PhoshRevealer:</doc>
            <type name="Revealer" c:type="PhoshRevealer*"/>
          </instance-parameter>
          <parameter name="show_child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/revealer.c"
                 line="157">Whether the child should be shown</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="show-child"
                writable="1"
                transfer-ownership="none"
                setter="set_show_child"
                getter="get_show_child"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/revealer.c"
             line="108">Whether the child should be shown. This make it visible and fades
it in via the given transition. When %FALSE triggers the fade out
animation and hides the child at the end.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="RevealerClass"
            c:type="PhoshRevealerClass"
            glib:is-gtype-struct-for="Revealer">
      <source-position filename="src/revealer.h" line="15"/>
      <field name="parent_class">
        <type name="Gtk.RevealerClass" c:type="GtkRevealerClass"/>
      </field>
    </record>
    <interface name="RfkillDBusRfkill"
               c:symbol-prefix="rfkill_dbus_rfkill"
               c:type="PhoshRfkillDBusRfkill"
               glib:type-name="PhoshRfkillDBusRfkill"
               glib:get-type="phosh_rfkill_dbus_rfkill_get_type"
               glib:type-struct="RfkillDBusRfkillIface">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-rfkill-dbus.c"
           line="361">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Rfkill.top_of_page"&gt;org.gnome.SettingsDaemon.Rfkill&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="45"/>
      <function name="interface_info"
                c:identifier="phosh_rfkill_dbus_rfkill_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="324">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Rfkill.top_of_page"&gt;org.gnome.SettingsDaemon.Rfkill&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="329">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_rfkill_dbus_rfkill_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="337">Overrides all #GObject properties in the #PhoshRfkillDBusRfkill interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="345">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="339">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="340">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_airplane_mode"
                      invoker="get_airplane_mode"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="443">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.AirplaneMode"&gt;"AirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="451">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="445">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bluetooth_airplane_mode"
                      invoker="get_bluetooth_airplane_mode"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="509">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothAirplaneMode"&gt;"BluetoothAirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="517">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="511">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bluetooth_hardware_airplane_mode"
                      invoker="get_bluetooth_hardware_airplane_mode"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="575">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothHardwareAirplaneMode"&gt;"BluetoothHardwareAirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="583">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="577">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bluetooth_has_airplane_mode"
                      invoker="get_bluetooth_has_airplane_mode"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="542">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothHasAirplaneMode"&gt;"BluetoothHasAirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="550">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="544">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hardware_airplane_mode"
                      invoker="get_hardware_airplane_mode"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="476">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.HardwareAirplaneMode"&gt;"HardwareAirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="484">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="478">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_should_show_airplane_mode"
                      invoker="get_should_show_airplane_mode"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="608">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.ShouldShowAirplaneMode"&gt;"ShouldShowAirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="616">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="610">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_get_airplane_mode"
              glib:get-property="airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="443">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.AirplaneMode"&gt;"AirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="451">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="445">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bluetooth_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_get_bluetooth_airplane_mode"
              glib:get-property="bluetooth-airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="509">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothAirplaneMode"&gt;"BluetoothAirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="517">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="511">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bluetooth_hardware_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_get_bluetooth_hardware_airplane_mode"
              glib:get-property="bluetooth-hardware-airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="575">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothHardwareAirplaneMode"&gt;"BluetoothHardwareAirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="583">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="577">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bluetooth_has_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_get_bluetooth_has_airplane_mode"
              glib:get-property="bluetooth-has-airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="542">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothHasAirplaneMode"&gt;"BluetoothHasAirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="550">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="544">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hardware_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_get_hardware_airplane_mode"
              glib:get-property="hardware-airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="476">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.HardwareAirplaneMode"&gt;"HardwareAirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="484">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="478">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_should_show_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_get_should_show_airplane_mode"
              glib:get-property="should-show-airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="608">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.ShouldShowAirplaneMode"&gt;"ShouldShowAirplaneMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="616">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="610">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_set_airplane_mode"
              glib:set-property="airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="461">Sets the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.AirplaneMode"&gt;"AirplaneMode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="463">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="464">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bluetooth_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_set_bluetooth_airplane_mode"
              glib:set-property="bluetooth-airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="527">Sets the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothAirplaneMode"&gt;"BluetoothAirplaneMode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="529">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="530">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bluetooth_hardware_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_set_bluetooth_hardware_airplane_mode"
              glib:set-property="bluetooth-hardware-airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="593">Sets the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothHardwareAirplaneMode"&gt;"BluetoothHardwareAirplaneMode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="595">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="596">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bluetooth_has_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_set_bluetooth_has_airplane_mode"
              glib:set-property="bluetooth-has-airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="560">Sets the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothHasAirplaneMode"&gt;"BluetoothHasAirplaneMode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="562">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="563">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hardware_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_set_hardware_airplane_mode"
              glib:set-property="hardware-airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="494">Sets the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.HardwareAirplaneMode"&gt;"HardwareAirplaneMode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="496">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="497">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_should_show_airplane_mode"
              c:identifier="phosh_rfkill_dbus_rfkill_set_should_show_airplane_mode"
              glib:set-property="should-show-airplane-mode"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="626">Sets the &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.ShouldShowAirplaneMode"&gt;"ShouldShowAirplaneMode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="628">A #PhoshRfkillDBusRfkill.</doc>
            <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="629">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="airplane-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_airplane_mode"
                getter="get_airplane_mode"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="387">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.AirplaneMode"&gt;"AirplaneMode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bluetooth-airplane-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_bluetooth_airplane_mode"
                getter="get_bluetooth_airplane_mode"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="405">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothAirplaneMode"&gt;"BluetoothAirplaneMode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bluetooth-hardware-airplane-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_bluetooth_hardware_airplane_mode"
                getter="get_bluetooth_hardware_airplane_mode"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="423">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothHardwareAirplaneMode"&gt;"BluetoothHardwareAirplaneMode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bluetooth-has-airplane-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_bluetooth_has_airplane_mode"
                getter="get_bluetooth_has_airplane_mode"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="414">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.BluetoothHasAirplaneMode"&gt;"BluetoothHasAirplaneMode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hardware-airplane-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_hardware_airplane_mode"
                getter="get_hardware_airplane_mode"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="396">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.HardwareAirplaneMode"&gt;"HardwareAirplaneMode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="should-show-airplane-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_should_show_airplane_mode"
                getter="get_should_show_airplane_mode"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="432">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-SettingsDaemon-Rfkill.ShouldShowAirplaneMode"&gt;"ShouldShowAirplaneMode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </interface>
    <record name="RfkillDBusRfkillIface"
            c:type="PhoshRfkillDBusRfkillIface"
            glib:is-gtype-struct-for="RfkillDBusRfkill">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-rfkill-dbus.c"
           line="367">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Rfkill.top_of_page"&gt;org.gnome.SettingsDaemon.Rfkill&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="45"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="369">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_airplane_mode">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="370">Getter for the #PhoshRfkillDBusRfkill:airplane-mode property.</doc>
        <callback name="get_airplane_mode">
          <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="33"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="451">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/gsd-rfkill-dbus.c"
                   line="445">A #PhoshRfkillDBusRfkill.</doc>
              <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bluetooth_airplane_mode">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="371">Getter for the #PhoshRfkillDBusRfkill:bluetooth-airplane-mode property.</doc>
        <callback name="get_bluetooth_airplane_mode">
          <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="35"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="517">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/gsd-rfkill-dbus.c"
                   line="511">A #PhoshRfkillDBusRfkill.</doc>
              <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bluetooth_hardware_airplane_mode">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="372">Getter for the #PhoshRfkillDBusRfkill:bluetooth-hardware-airplane-mode property.</doc>
        <callback name="get_bluetooth_hardware_airplane_mode">
          <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="37"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="583">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/gsd-rfkill-dbus.c"
                   line="577">A #PhoshRfkillDBusRfkill.</doc>
              <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bluetooth_has_airplane_mode">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="373">Getter for the #PhoshRfkillDBusRfkill:bluetooth-has-airplane-mode property.</doc>
        <callback name="get_bluetooth_has_airplane_mode">
          <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="39"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="550">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/gsd-rfkill-dbus.c"
                   line="544">A #PhoshRfkillDBusRfkill.</doc>
              <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hardware_airplane_mode">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="374">Getter for the #PhoshRfkillDBusRfkill:hardware-airplane-mode property.</doc>
        <callback name="get_hardware_airplane_mode">
          <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="41"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="484">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/gsd-rfkill-dbus.c"
                   line="478">A #PhoshRfkillDBusRfkill.</doc>
              <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_should_show_airplane_mode">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="375">Getter for the #PhoshRfkillDBusRfkill:should-show-airplane-mode property.</doc>
        <callback name="get_should_show_airplane_mode">
          <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="43"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="616">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/gsd-rfkill-dbus.c"
                   line="610">A #PhoshRfkillDBusRfkill.</doc>
              <type name="RfkillDBusRfkill" c:type="PhoshRfkillDBusRfkill*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RfkillDBusRfkillProxy"
           c:symbol-prefix="rfkill_dbus_rfkill_proxy"
           c:type="PhoshRfkillDBusRfkillProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshRfkillDBusRfkillProxy"
           glib:get-type="phosh_rfkill_dbus_rfkill_proxy_get_type"
           glib:type-struct="RfkillDBusRfkillProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-rfkill-dbus.c"
           line="643">The #PhoshRfkillDBusRfkillProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="100"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="RfkillDBusRfkill"/>
      <constructor name="new_finish"
                   c:identifier="phosh_rfkill_dbus_rfkill_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="983">Finishes an operation started with phosh_rfkill_dbus_rfkill_proxy_new().</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="116"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="990">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RfkillDBusRfkillProxy" c:type="PhoshRfkillDBusRfkill*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="985">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_rfkill_dbus_rfkill_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_rfkill_dbus_rfkill_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="1073">Finishes an operation started with phosh_rfkill_dbus_rfkill_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="135"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="1080">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RfkillDBusRfkillProxy" c:type="PhoshRfkillDBusRfkill*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1075">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_rfkill_dbus_rfkill_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_rfkill_dbus_rfkill_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="1098">Like phosh_rfkill_dbus_rfkill_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_rfkill_dbus_rfkill_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="1113">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RfkillDBusRfkillProxy" c:type="PhoshRfkillDBusRfkill*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1100">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1101">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1102">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1103">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1104">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_rfkill_dbus_rfkill_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="1008">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Rfkill.top_of_page"&gt;org.gnome.SettingsDaemon.Rfkill&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_rfkill_dbus_rfkill_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="119"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="1023">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RfkillDBusRfkillProxy" c:type="PhoshRfkillDBusRfkill*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1010">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1011">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1012">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1013">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1014">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_rfkill_dbus_rfkill_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="953">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Rfkill.top_of_page"&gt;org.gnome.SettingsDaemon.Rfkill&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_rfkill_dbus_rfkill_proxy_new_finish() to get the result of the operation.

See phosh_rfkill_dbus_rfkill_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="955">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="956">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="957">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="958">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="959">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="960">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="961">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_rfkill_dbus_rfkill_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="1043">Like phosh_rfkill_dbus_rfkill_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_rfkill_dbus_rfkill_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_rfkill_dbus_rfkill_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1045">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1046">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1047">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1048">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1049">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1050">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gsd-rfkill-dbus.c"
                 line="1051">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RfkillDBusRfkillProxyPrivate"
              c:type="PhoshRfkillDBusRfkillProxyPrivate*"/>
      </field>
    </class>
    <record name="RfkillDBusRfkillProxyClass"
            c:type="PhoshRfkillDBusRfkillProxyClass"
            glib:is-gtype-struct-for="RfkillDBusRfkillProxy">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-rfkill-dbus.c"
           line="649">Class structure for #PhoshRfkillDBusRfkillProxy.</doc>
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="100"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="651">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="RfkillDBusRfkillProxyPrivate"
            c:type="PhoshRfkillDBusRfkillProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="88"/>
    </record>
    <class name="RfkillDBusRfkillSkeleton"
           c:symbol-prefix="rfkill_dbus_rfkill_skeleton"
           c:type="PhoshRfkillDBusRfkillSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshRfkillDBusRfkillSkeleton"
           glib:get-type="phosh_rfkill_dbus_rfkill_skeleton_get_type"
           glib:type-struct="RfkillDBusRfkillSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-rfkill-dbus.c"
           line="1135">The #PhoshRfkillDBusRfkillSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="170"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="RfkillDBusRfkill"/>
      <constructor name="new"
                   c:identifier="phosh_rfkill_dbus_rfkill_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="1653">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Rfkill.top_of_page"&gt;org.gnome.SettingsDaemon.Rfkill&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="178"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="1658">The skeleton object.</doc>
          <type name="RfkillDBusRfkillSkeleton"
                c:type="PhoshRfkillDBusRfkill*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RfkillDBusRfkillSkeletonPrivate"
              c:type="PhoshRfkillDBusRfkillSkeletonPrivate*"/>
      </field>
    </class>
    <record name="RfkillDBusRfkillSkeletonClass"
            c:type="PhoshRfkillDBusRfkillSkeletonClass"
            glib:is-gtype-struct-for="RfkillDBusRfkillSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-rfkill-dbus.c"
           line="1141">Class structure for #PhoshRfkillDBusRfkillSkeleton.</doc>
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="170"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="1143">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="RfkillDBusRfkillSkeletonPrivate"
            c:type="PhoshRfkillDBusRfkillSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="158"/>
    </record>
    <class name="RotateInfo"
           c:symbol-prefix="rotate_info"
           c:type="PhoshRotateInfo"
           parent="StatusIcon"
           glib:type-name="PhoshRotateInfo"
           glib:get-type="phosh_rotate_info_get_type"
           glib:type-struct="RotateInfoClass">
      <doc xml:space="preserve"
           filename="src/rotateinfo.c"
           line="16">A widget to display the rotate lock status

A #PhoshStatusIcon to display the rotation lock status.
It can either display whether a rotation lock is currently active or
if the output is in portrait/landscape mode.</doc>
      <source-position filename="src/rotateinfo.h" line="28"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_rotate_info_new">
        <source-position filename="src/rotateinfo.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_mode" c:identifier="phosh_rotate_info_get_mode">
        <source-position filename="src/rotateinfo.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="RotateInfoMode" c:type="PhoshRotateInfoMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RotateInfo" c:type="PhoshRotateInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_mode" c:identifier="phosh_rotate_info_set_mode">
        <source-position filename="src/rotateinfo.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RotateInfo" c:type="PhoshRotateInfo*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="RotateInfoMode" c:type="PhoshRotateInfoMode"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/rotateinfo.c"
             line="206">Whether automatic rotation is enabled</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="present" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/rotateinfo.c"
             line="194">Whether a builtin display to rotate is present</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="RotateInfoClass"
            c:type="PhoshRotateInfoClass"
            glib:is-gtype-struct-for="RotateInfo">
      <source-position filename="src/rotateinfo.h" line="28"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <enumeration name="RotateInfoMode" c:type="PhoshRotateInfoMode">
      <doc xml:space="preserve"
           filename="src/rotateinfo.h"
           line="14">What is toggled when short pressing the rotation info quick setting</doc>
      <source-position filename="src/rotateinfo.h" line="24"/>
      <member name="lock" value="0" c:identifier="PHOSH_ROTATE_INFO_MODE_LOCK">
        <doc xml:space="preserve"
             filename="src/rotateinfo.h"
             line="16">Button toggles rotation lock</doc>
      </member>
      <member name="toggle"
              value="1"
              c:identifier="PHOSH_ROTATE_INFO_MODE_TOGGLE">
        <doc xml:space="preserve"
             filename="src/rotateinfo.h"
             line="17">Button toggles portrait/landscape</doc>
      </member>
    </enumeration>
    <class name="RotationManager"
           c:symbol-prefix="rotation_manager"
           c:type="PhoshRotationManager"
           parent="GObject.Object"
           glib:type-name="PhoshRotationManager"
           glib:get-type="phosh_rotation_manager_get_type"
           glib:type-struct="RotationManagerClass">
      <doc xml:space="preserve"
           filename="src/rotation-manager.c"
           line="19">The Rotation Manager

#PhoshRotationManager is responsible for managing the rotation of
a given #PhoshMonitor. Depending on the #PhoshRotationManagerMode
this can happen by interfacing with a #PhoshSensorProxyManager or
by setting the #PhoshMonitorTransform explicitly.
It also takes the #PhoshLockscreenManager:locked status into account
to ensure the lockscreen is rotated accordingly on small phones.</doc>
      <source-position filename="src/rotation-manager.h" line="28"/>
      <constructor name="new" c:identifier="phosh_rotation_manager_new">
        <source-position filename="src/rotation-manager.h" line="30"/>
        <return-value transfer-ownership="full">
          <type name="RotationManager" c:type="PhoshRotationManager*"/>
        </return-value>
        <parameters>
          <parameter name="sensor_proxy_manager" transfer-ownership="none">
            <type name="SensorProxyManager" c:type="PhoshSensorProxyManager*"/>
          </parameter>
          <parameter name="lockscreen_manager" transfer-ownership="none">
            <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
          </parameter>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_mode"
              c:identifier="phosh_rotation_manager_get_mode"
              glib:get-property="mode">
        <source-position filename="src/rotation-manager.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="RotationManagerMode" c:type="PhoshRotationManagerMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RotationManager" c:type="PhoshRotationManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_monitor"
              c:identifier="phosh_rotation_manager_get_monitor"
              glib:get-property="monitor">
        <doc xml:space="preserve"
             filename="src/rotation-manager.c"
             line="709">Get the monitor this manager currently acts on</doc>
        <source-position filename="src/rotation-manager.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/rotation-manager.c"
               line="715">The current monitor</doc>
          <type name="Monitor" c:type="PhoshMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/rotation-manager.c"
                 line="711">The PhoshRotationManager</doc>
            <type name="RotationManager" c:type="PhoshRotationManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_orientation_locked"
              c:identifier="phosh_rotation_manager_get_orientation_locked"
              glib:get-property="orientation-locked">
        <source-position filename="src/rotation-manager.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RotationManager" c:type="PhoshRotationManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transform"
              c:identifier="phosh_rotation_manager_get_transform"
              glib:get-property="transform">
        <source-position filename="src/rotation-manager.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="MonitorTransform" c:type="PhoshMonitorTransform"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RotationManager" c:type="PhoshRotationManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_mode"
              c:identifier="phosh_rotation_manager_set_mode"
              glib:set-property="mode">
        <doc xml:space="preserve"
             filename="src/rotation-manager.c"
             line="655">Sets the given mode.</doc>
        <source-position filename="src/rotation-manager.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/rotation-manager.c"
               line="661">%TRUE if setting the mode was possible, otherwise %FALSE (e.g. when trying
to set %PHOSH_ROTATION_MANAGER_MODE_SENSOR without having a sensor.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/rotation-manager.c"
                 line="657">The #PhoshRotationManager</doc>
            <type name="RotationManager" c:type="PhoshRotationManager*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/rotation-manager.c"
                 line="658">The #PhoshRotationManagerMode to set</doc>
            <type name="RotationManagerMode"
                  c:type="PhoshRotationManagerMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_monitor"
              c:identifier="phosh_rotation_manager_set_monitor"
              glib:set-property="monitor">
        <source-position filename="src/rotation-manager.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RotationManager" c:type="PhoshRotationManager*"/>
          </instance-parameter>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_orientation_locked"
              c:identifier="phosh_rotation_manager_set_orientation_locked"
              glib:set-property="orientation-locked">
        <source-position filename="src/rotation-manager.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RotationManager" c:type="PhoshRotationManager*"/>
          </instance-parameter>
          <parameter name="locked" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transform"
              c:identifier="phosh_rotation_manager_set_transform">
        <source-position filename="src/rotation-manager.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RotationManager" c:type="PhoshRotationManager*"/>
          </instance-parameter>
          <parameter name="transform" transfer-ownership="none">
            <type name="MonitorTransform" c:type="PhoshMonitorTransform"/>
          </parameter>
        </parameters>
      </method>
      <property name="lockscreen-manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="LockscreenManager"/>
      </property>
      <property name="mode"
                writable="1"
                transfer-ownership="none"
                setter="set_mode"
                getter="get_mode"
                default-value="PHOSH_ROTATION_MANAGER_MODE_OFF">
        <type name="RotationManagerMode"/>
      </property>
      <property name="monitor"
                writable="1"
                transfer-ownership="none"
                setter="set_monitor"
                getter="get_monitor">
        <type name="Monitor"/>
      </property>
      <property name="orientation-locked"
                writable="1"
                transfer-ownership="none"
                setter="set_orientation_locked"
                getter="get_orientation_locked"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="sensor-proxy-manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SensorProxyManager"/>
      </property>
      <property name="transform"
                transfer-ownership="none"
                getter="get_transform"
                default-value="PHOSH_MONITOR_TRANSFORM_NORMAL">
        <type name="MonitorTransform"/>
      </property>
    </class>
    <record name="RotationManagerClass"
            c:type="PhoshRotationManagerClass"
            glib:is-gtype-struct-for="RotationManager">
      <source-position filename="src/rotation-manager.h" line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="RotationManagerMode"
                 glib:type-name="PhoshRotationManagerMode"
                 glib:get-type="phosh_rotation_manager_mode_get_type"
                 c:type="PhoshRotationManagerMode">
      <doc xml:space="preserve"
           filename="src/rotation-manager.h"
           line="14">The mode of a #PhoshRotationManager</doc>
      <member name="off"
              value="0"
              c:identifier="PHOSH_ROTATION_MANAGER_MODE_OFF"
              glib:nick="off"
              glib:name="PHOSH_ROTATION_MANAGER_MODE_OFF">
        <doc xml:space="preserve"
             filename="src/rotation-manager.h"
             line="16">automatic rotation off</doc>
      </member>
      <member name="sensor"
              value="1"
              c:identifier="PHOSH_ROTATION_MANAGER_MODE_SENSOR"
              glib:nick="sensor"
              glib:name="PHOSH_ROTATION_MANAGER_MODE_SENSOR">
        <doc xml:space="preserve"
             filename="src/rotation-manager.h"
             line="17">rotation driven by sensor orientation</doc>
      </member>
    </enumeration>
    <class name="RunCommandDialog"
           c:symbol-prefix="run_command_dialog"
           c:type="PhoshRunCommandDialog"
           parent="SystemModalDialog"
           glib:type-name="PhoshRunCommandDialog"
           glib:get-type="phosh_run_command_dialog_get_type"
           glib:type-struct="RunCommandDialogClass">
      <doc xml:space="preserve"
           filename="src/run-command-dialog.c"
           line="14">A modal dialog to run commands from

The #PhoshRunCommandDialog is used to run commands (e.g. via Alt+F2).</doc>
      <source-position filename="src/run-command-dialog.h" line="18"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_run_command_dialog_new">
        <source-position filename="src/run-command-dialog.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="set_message"
              c:identifier="phosh_run_command_dialog_set_message">
        <source-position filename="src/run-command-dialog.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommandDialog" c:type="PhoshRunCommandDialog*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="cancelled" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="submitted" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RunCommandDialogClass"
            c:type="PhoshRunCommandDialogClass"
            glib:is-gtype-struct-for="RunCommandDialog">
      <source-position filename="src/run-command-dialog.h" line="18"/>
      <field name="parent_class">
        <type name="SystemModalDialogClass"
              c:type="PhoshSystemModalDialogClass"/>
      </field>
    </record>
    <class name="RunCommandManager"
           c:symbol-prefix="run_command_manager"
           c:type="PhoshRunCommandManager"
           parent="GObject.Object"
           glib:type-name="PhoshRunCommandManager"
           glib:get-type="phosh_run_command_manager_get_type"
           glib:type-struct="RunCommandManagerClass">
      <doc xml:space="preserve"
           filename="src/run-command-manager.c"
           line="19">Handles the run-command-dialog

The interface is responsible to handle the non-ui parts of a
#PhoshRunCommandDialog.</doc>
      <source-position filename="src/run-command-manager.h" line="14"/>
      <constructor name="new" c:identifier="phosh_run_command_manager_new">
        <source-position filename="src/run-command-manager.h" line="16"/>
        <return-value transfer-ownership="full">
          <type name="RunCommandManager" c:type="PhoshRunCommandManager*"/>
        </return-value>
      </constructor>
    </class>
    <record name="RunCommandManagerClass"
            c:type="PhoshRunCommandManagerClass"
            glib:is-gtype-struct-for="RunCommandManager">
      <source-position filename="src/run-command-manager.h" line="14"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_GET_IFACE"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_PROXY"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="116"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_PROXY_CLASS"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="117"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_PROXY_GET_CLASS"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="118"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_SKELETON"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="186"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_SKELETON_CLASS"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="187"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_CLIENT_PRIVATE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="188"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_IS_CLIENT_PRIVATE"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_IS_CLIENT_PRIVATE"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_IS_CLIENT_PRIVATE_PROXY"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_IS_CLIENT_PRIVATE_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="119"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_IS_CLIENT_PRIVATE_PROXY_CLASS"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_IS_CLIENT_PRIVATE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="120"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_IS_CLIENT_PRIVATE_SKELETON"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_IS_CLIENT_PRIVATE_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="189"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLIENT_PRIVATE_DBUS_IS_CLIENT_PRIVATE_SKELETON_CLASS"
                    c:identifier="PHOSH_SESSION_CLIENT_PRIVATE_DBUS_IS_CLIENT_PRIVATE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="190"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_IS_PRESENCE"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_IS_PRESENCE"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_IS_PRESENCE_PROXY"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_IS_PRESENCE_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="70"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_IS_PRESENCE_PROXY_CLASS"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_IS_PRESENCE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="71"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_IS_PRESENCE_SKELETON"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_IS_PRESENCE_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="140"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_IS_PRESENCE_SKELETON_CLASS"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_IS_PRESENCE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="141"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_PRESENCE"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_PRESENCE"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_PRESENCE_GET_IFACE"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_PRESENCE_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_PRESENCE_PROXY"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_PRESENCE_PROXY"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="67"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_PRESENCE_PROXY_CLASS"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_PRESENCE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="68"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_PRESENCE_PROXY_GET_CLASS"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_PRESENCE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="69"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_PRESENCE_SKELETON"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_PRESENCE_SKELETON"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="137"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_PRESENCE_SKELETON_CLASS"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_PRESENCE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="138"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_PRESENCE_DBUS_PRESENCE_SKELETON_GET_CLASS"
                    c:identifier="PHOSH_SESSION_PRESENCE_DBUS_PRESENCE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="139"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="ScreenSaverManager"
           c:symbol-prefix="screen_saver_manager"
           c:type="PhoshScreenSaverManager"
           parent="DBusScreenSaverSkeleton"
           glib:type-name="PhoshScreenSaverManager"
           glib:get-type="phosh_screen_saver_manager_get_type"
           glib:type-struct="ScreenSaverManagerClass">
      <doc xml:space="preserve"
           filename="src/screen-saver-manager.c"
           line="26">Provides the org.gnome.ScreenSaver DBus interface and handles logind's Session

This handles the `org.gnome.ScreenSaver` DBus API for screen locking and unlocking.
It also handles the login1 session  parts since those are closely related and this
keeps #PhoshLockscreenManager free of any session related DBus handling.

These settings influence screen blanking and locking:

`org.gnome.desktop.session idle-delay`: The session is considered idle after that many
seconds of inactivity. This isn't monitored by phosh directly but is done by gnome-session that
in turn uses `GnomeIdleMonitor` which then uses `/org/gnome/Mutter/IdleMonitor/Core` on DBus.
`/org/gnome/Mutter/IdleMonitor/Core` is implemented by #PhoshIdleManager which in turn gets
it from phoc via a Wayland protocol.

`org.gnome.desktop.screensaver` `lock-enabled`: Whether the screen should be locked after
the screen-saver is activated.

`org.gnome.desktop.screensaver` `lock-delay`: How long after screen-saver activation should
the screen be locked.</doc>
      <source-position filename="src/screen-saver-manager.h" line="21"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusScreenSaver"/>
      <constructor name="new" c:identifier="phosh_screen_saver_manager_new">
        <source-position filename="src/screen-saver-manager.h" line="24"/>
        <return-value transfer-ownership="full">
          <type name="ScreenSaverManager" c:type="PhoshScreenSaverManager*"/>
        </return-value>
        <parameters>
          <parameter name="lockscreen_manager" transfer-ownership="none">
            <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="active" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/screen-saver-manager.c"
             line="972">Whether the screen saver is active</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lock-delay"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/screen-saver-manager.c"
             line="960">Delay in seconds for screen lock after blank</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="lock-enabled"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/screen-saver-manager.c"
             line="951">Whether activating the screens saver should also lock the screen</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lockscreen-manager"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="LockscreenManager"/>
      </property>
      <glib:signal name="pb-long-press" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ScreenSaverManagerClass"
            c:type="PhoshScreenSaverManagerClass"
            glib:is-gtype-struct-for="ScreenSaverManager">
      <source-position filename="src/screen-saver-manager.h" line="21"/>
      <field name="parent_class">
        <type name="DBusScreenSaverSkeletonClass"
              c:type="PhoshDBusScreenSaverSkeletonClass"/>
      </field>
    </record>
    <class name="ScreenshotManager"
           c:symbol-prefix="screenshot_manager"
           c:type="PhoshScreenshotManager"
           parent="DBusScreenshotSkeleton"
           glib:type-name="PhoshScreenshotManager"
           glib:get-type="phosh_screenshot_manager_get_type"
           glib:type-struct="ScreenshotManagerClass">
      <doc xml:space="preserve"
           filename="src/screenshot-manager.c"
           line="34">Screenshot interaction

The #PhoshScreenshotManager is responsible for
taking screenshots.</doc>
      <source-position filename="src/screenshot-manager.h" line="17"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusScreenshot"/>
      <constructor name="new" c:identifier="phosh_screenshot_manager_new">
        <source-position filename="src/screenshot-manager.h" line="20"/>
        <return-value transfer-ownership="full">
          <type name="ScreenshotManager" c:type="PhoshScreenshotManager*"/>
        </return-value>
      </constructor>
      <method name="take_screenshot"
              c:identifier="phosh_screenshot_manager_take_screenshot">
        <doc xml:space="preserve"
             filename="src/screenshot-manager.c"
             line="1228">Initiate a screenshot of all outputs or the given area. If `copy_to_clipboard` is
`TRUE` the screenshot is also copied to the clipboard.</doc>
        <source-position filename="src/screenshot-manager.h" line="21"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/screenshot-manager.c"
               line="1239">`FALSE` on failure, otherwise `TRUE`</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/screenshot-manager.c"
                 line="1230">The screenshot manager</doc>
            <type name="ScreenshotManager" c:type="PhoshScreenshotManager*"/>
          </instance-parameter>
          <parameter name="area"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/screenshot-manager.c"
                 line="1231">The area to capture or %NULL to capture all outputs</doc>
            <type name="Gdk.Rectangle" c:type="const GdkRectangle*"/>
          </parameter>
          <parameter name="filename"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/screenshot-manager.c"
                 line="1232">The output filename or %NULL to autogenerate a filename</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="copy_to_clipboard" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/screenshot-manager.c"
                 line="1233">Whether to use the clipboard</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="include_cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/screenshot-manager.c"
                 line="1234">Whether to include the cursor</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ScreenshotManagerClass"
            c:type="PhoshScreenshotManagerClass"
            glib:is-gtype-struct-for="ScreenshotManager">
      <source-position filename="src/screenshot-manager.h" line="17"/>
      <field name="parent_class">
        <type name="DBusScreenshotSkeletonClass"
              c:type="PhoshDBusScreenshotSkeletonClass"/>
      </field>
    </record>
    <class name="SensorProxyManager"
           c:symbol-prefix="sensor_proxy_manager"
           c:type="PhoshSensorProxyManager"
           parent="DBusSensorProxyProxy"
           glib:type-name="PhoshSensorProxyManager"
           glib:get-type="phosh_sensor_proxy_manager_get_type"
           glib:type-struct="SensorProxyManagerClass">
      <doc xml:space="preserve"
           filename="src/sensor-proxy-manager.c"
           line="18">Interface with iio-sensor-proxy

The #PhoshSensorProxyManager is responsible for
getting events from iio-sensor-proxy.

This is just a minimal wrapper so we don't have to provide the
object path, names and bus names in several places.</doc>
      <source-position filename="src/sensor-proxy-manager.h" line="13"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DBusSensorProxy"/>
      <constructor name="new"
                   c:identifier="phosh_sensor_proxy_manager_new"
                   throws="1">
        <source-position filename="src/sensor-proxy-manager.h" line="16"/>
        <return-value transfer-ownership="full">
          <type name="SensorProxyManager" c:type="PhoshSensorProxyManager*"/>
        </return-value>
      </constructor>
      <method name="claim_proximity_sync"
              c:identifier="phosh_sensor_proxy_manager_claim_proximity_sync"
              throws="1">
        <source-position filename="src/sensor-proxy-manager.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SensorProxyManager" c:type="PhoshSensorProxyManager*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="SensorProxyManagerClass"
            c:type="PhoshSensorProxyManagerClass"
            glib:is-gtype-struct-for="SensorProxyManager">
      <source-position filename="src/sensor-proxy-manager.h" line="13"/>
      <field name="parent_class">
        <type name="DBusSensorProxyProxyClass"
              c:type="PhoshDBusSensorProxyProxyClass"/>
      </field>
    </record>
    <interface name="SessionClientPrivateDBusClientPrivate"
               c:symbol-prefix="session_client_private_dbus_client_private"
               c:type="PhoshSessionClientPrivateDBusClientPrivate"
               glib:type-name="PhoshSessionClientPrivateDBusClientPrivate"
               glib:get-type="phosh_session_client_private_dbus_client_private_get_type"
               glib:type-struct="SessionClientPrivateDBusClientPrivateIface">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-client-private-dbus.c"
           line="517">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-ClientPrivate.top_of_page"&gt;org.gnome.SessionManager.ClientPrivate&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="54"/>
      <function name="interface_info"
                c:identifier="phosh_session_client_private_dbus_client_private_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="421">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SessionManager-ClientPrivate.top_of_page"&gt;org.gnome.SessionManager.ClientPrivate&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="426">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_session_client_private_dbus_client_private_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="434">Overrides all #GObject properties in the #PhoshSessionClientPrivateDBusClientPrivate interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="442">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="436">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="437">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="cancel_end_session">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="527">Handler for the #PhoshSessionClientPrivateDBusClientPrivate::cancel-end-session signal.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="end_session">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="528">Handler for the #PhoshSessionClientPrivateDBusClientPrivate::end-session signal.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_end_session_response">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="526">Handler for the #PhoshSessionClientPrivateDBusClientPrivate::handle-end-session-response signal.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_is_ok" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="query_end_session">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="529">Handler for the #PhoshSessionClientPrivateDBusClientPrivate::query-end-session signal.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="stop">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="530">Handler for the #PhoshSessionClientPrivateDBusClientPrivate::stop signal.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="call_end_session_response"
              c:identifier="phosh_session_client_private_dbus_client_private_call_end_session_response"
              glib:finish-func="call_end_session_response_finish"
              glib:sync-func="call_end_session_response_sync">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="703">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager-ClientPrivate.EndSessionResponse"&gt;EndSessionResponse()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_session_client_private_dbus_client_private_call_end_session_response_finish() to get the result of the operation.

See phosh_session_client_private_dbus_client_private_call_end_session_response_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="705">A #PhoshSessionClientPrivateDBusClientPrivateProxy.</doc>
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
          <parameter name="arg_is_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="706">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="707">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="708">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="709">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="710">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_end_session_response_finish"
              c:identifier="phosh_session_client_private_dbus_client_private_call_end_session_response_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="739">Finishes an operation started with phosh_session_client_private_dbus_client_private_call_end_session_response().</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="99"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="747">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="741">A #PhoshSessionClientPrivateDBusClientPrivateProxy.</doc>
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="742">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_session_client_private_dbus_client_private_call_end_session_response().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_end_session_response_sync"
              c:identifier="phosh_session_client_private_dbus_client_private_call_end_session_response_sync"
              throws="1"
              glib:async-func="call_end_session_response">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="766">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-SessionManager-ClientPrivate.EndSessionResponse"&gt;EndSessionResponse()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See phosh_session_client_private_dbus_client_private_call_end_session_response() for the asynchronous version of this method.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="104"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="778">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="768">A #PhoshSessionClientPrivateDBusClientPrivateProxy.</doc>
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
          <parameter name="arg_is_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="769">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="770">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="771">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_end_session_response"
              c:identifier="phosh_session_client_private_dbus_client_private_complete_end_session_response">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="807">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-SessionManager-ClientPrivate.EndSessionResponse"&gt;EndSessionResponse()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="809">A #PhoshSessionClientPrivateDBusClientPrivate.</doc>
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="810">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_cancel_end_session"
              c:identifier="phosh_session_client_private_dbus_client_private_emit_cancel_end_session">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="690">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-ClientPrivate.CancelEndSession"&gt;"CancelEndSession"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="692">A #PhoshSessionClientPrivateDBusClientPrivate.</doc>
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_end_session"
              c:identifier="phosh_session_client_private_dbus_client_private_emit_end_session">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="675">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-ClientPrivate.EndSession"&gt;"EndSession"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="677">A #PhoshSessionClientPrivateDBusClientPrivate.</doc>
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="678">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_query_end_session"
              c:identifier="phosh_session_client_private_dbus_client_private_emit_query_end_session">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="660">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-ClientPrivate.QueryEndSession"&gt;"QueryEndSession"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="662">A #PhoshSessionClientPrivateDBusClientPrivate.</doc>
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="663">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_stop"
              c:identifier="phosh_session_client_private_dbus_client_private_emit_stop">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="647">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-ClientPrivate.Stop"&gt;"Stop"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="649">A #PhoshSessionClientPrivateDBusClientPrivate.</doc>
            <type name="SessionClientPrivateDBusClientPrivate"
                  c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="cancel-end-session" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="626">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-ClientPrivate.CancelEndSession"&gt;"CancelEndSession"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="end-session" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="606">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-ClientPrivate.EndSession"&gt;"EndSession"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="609">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-end-session-response" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="542">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-SessionManager-ClientPrivate.EndSessionResponse"&gt;EndSessionResponse()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phosh_session_client_private_dbus_client_private_complete_end_session_response() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="553">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="545">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_is_ok" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="546">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="547">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="query-end-session" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="586">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-ClientPrivate.QueryEndSession"&gt;"QueryEndSession"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="589">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="stop" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="567">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-ClientPrivate.Stop"&gt;"Stop"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="SessionClientPrivateDBusClientPrivateIface"
            c:type="PhoshSessionClientPrivateDBusClientPrivateIface"
            glib:is-gtype-struct-for="SessionClientPrivateDBusClientPrivate">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-client-private-dbus.c"
           line="523">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-ClientPrivate.top_of_page"&gt;org.gnome.SessionManager.ClientPrivate&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="54"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="525">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_end_session_response">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="526">Handler for the #PhoshSessionClientPrivateDBusClientPrivate::handle-end-session-response signal.</doc>
        <callback name="handle_end_session_response">
          <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="SessionClientPrivateDBusClientPrivate"
                    c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_is_ok" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_reason" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel_end_session">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="527">Handler for the #PhoshSessionClientPrivateDBusClientPrivate::cancel-end-session signal.</doc>
        <callback name="cancel_end_session">
          <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                           line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="SessionClientPrivateDBusClientPrivate"
                    c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end_session">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="528">Handler for the #PhoshSessionClientPrivateDBusClientPrivate::end-session signal.</doc>
        <callback name="end_session">
          <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="SessionClientPrivateDBusClientPrivate"
                    c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
            </parameter>
            <parameter name="arg_flags" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query_end_session">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="529">Handler for the #PhoshSessionClientPrivateDBusClientPrivate::query-end-session signal.</doc>
        <callback name="query_end_session">
          <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="SessionClientPrivateDBusClientPrivate"
                    c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
            </parameter>
            <parameter name="arg_flags" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stop">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="530">Handler for the #PhoshSessionClientPrivateDBusClientPrivate::stop signal.</doc>
        <callback name="stop">
          <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="SessionClientPrivateDBusClientPrivate"
                    c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SessionClientPrivateDBusClientPrivateProxy"
           c:symbol-prefix="session_client_private_dbus_client_private_proxy"
           c:type="PhoshSessionClientPrivateDBusClientPrivateProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshSessionClientPrivateDBusClientPrivateProxy"
           glib:get-type="phosh_session_client_private_dbus_client_private_proxy_get_type"
           glib:type-struct="SessionClientPrivateDBusClientPrivateProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-client-private-dbus.c"
           line="827">The #PhoshSessionClientPrivateDBusClientPrivateProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="136"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="SessionClientPrivateDBusClientPrivate"/>
      <constructor name="new_finish"
                   c:identifier="phosh_session_client_private_dbus_client_private_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="1018">Finishes an operation started with phosh_session_client_private_dbus_client_private_proxy_new().</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="152"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="1025">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SessionClientPrivateDBusClientPrivateProxy"
                c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1020">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_session_client_private_dbus_client_private_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_session_client_private_dbus_client_private_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="1108">Finishes an operation started with phosh_session_client_private_dbus_client_private_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="171"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="1115">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SessionClientPrivateDBusClientPrivateProxy"
                c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1110">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_session_client_private_dbus_client_private_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_session_client_private_dbus_client_private_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="1133">Like phosh_session_client_private_dbus_client_private_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_session_client_private_dbus_client_private_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="174"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="1148">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SessionClientPrivateDBusClientPrivateProxy"
                c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1135">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1136">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1137">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1138">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1139">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_session_client_private_dbus_client_private_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="1043">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-ClientPrivate.top_of_page"&gt;org.gnome.SessionManager.ClientPrivate&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_session_client_private_dbus_client_private_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="155"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="1058">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SessionClientPrivateDBusClientPrivateProxy"
                c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1045">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1046">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1047">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1048">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1049">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_session_client_private_dbus_client_private_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="988">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-ClientPrivate.top_of_page"&gt;org.gnome.SessionManager.ClientPrivate&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_session_client_private_dbus_client_private_proxy_new_finish() to get the result of the operation.

See phosh_session_client_private_dbus_client_private_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="990">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="991">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="992">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="993">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="994">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="995">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="996">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_session_client_private_dbus_client_private_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="1078">Like phosh_session_client_private_dbus_client_private_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_session_client_private_dbus_client_private_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_session_client_private_dbus_client_private_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1080">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1081">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1082">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1083">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1084">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1085">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-client-private-dbus.c"
                 line="1086">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SessionClientPrivateDBusClientPrivateProxyPrivate"
              c:type="PhoshSessionClientPrivateDBusClientPrivateProxyPrivate*"/>
      </field>
    </class>
    <record name="SessionClientPrivateDBusClientPrivateProxyClass"
            c:type="PhoshSessionClientPrivateDBusClientPrivateProxyClass"
            glib:is-gtype-struct-for="SessionClientPrivateDBusClientPrivateProxy">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-client-private-dbus.c"
           line="833">Class structure for #PhoshSessionClientPrivateDBusClientPrivateProxy.</doc>
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="136"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="835">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="SessionClientPrivateDBusClientPrivateProxyPrivate"
            c:type="PhoshSessionClientPrivateDBusClientPrivateProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="124"/>
    </record>
    <class name="SessionClientPrivateDBusClientPrivateSkeleton"
           c:symbol-prefix="session_client_private_dbus_client_private_skeleton"
           c:type="PhoshSessionClientPrivateDBusClientPrivateSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshSessionClientPrivateDBusClientPrivateSkeleton"
           glib:get-type="phosh_session_client_private_dbus_client_private_skeleton_get_type"
           glib:type-struct="SessionClientPrivateDBusClientPrivateSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-client-private-dbus.c"
           line="1170">The #PhoshSessionClientPrivateDBusClientPrivateSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="206"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="SessionClientPrivateDBusClientPrivate"/>
      <constructor name="new"
                   c:identifier="phosh_session_client_private_dbus_client_private_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="1537">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-ClientPrivate.top_of_page"&gt;org.gnome.SessionManager.ClientPrivate&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                         line="214"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="1542">The skeleton object.</doc>
          <type name="SessionClientPrivateDBusClientPrivateSkeleton"
                c:type="PhoshSessionClientPrivateDBusClientPrivate*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SessionClientPrivateDBusClientPrivateSkeletonPrivate"
              c:type="PhoshSessionClientPrivateDBusClientPrivateSkeletonPrivate*"/>
      </field>
    </class>
    <record name="SessionClientPrivateDBusClientPrivateSkeletonClass"
            c:type="PhoshSessionClientPrivateDBusClientPrivateSkeletonClass"
            glib:is-gtype-struct-for="SessionClientPrivateDBusClientPrivateSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-client-private-dbus.c"
           line="1176">Class structure for #PhoshSessionClientPrivateDBusClientPrivateSkeleton.</doc>
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="206"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="1178">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="SessionClientPrivateDBusClientPrivateSkeletonPrivate"
            c:type="PhoshSessionClientPrivateDBusClientPrivateSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="194"/>
    </record>
    <class name="SessionManager"
           c:symbol-prefix="session_manager"
           c:type="PhoshSessionManager"
           parent="DBusEndSessionDialogSkeleton"
           glib:type-name="PhoshSessionManager"
           glib:get-type="phosh_session_manager_get_type"
           glib:type-struct="SessionManagerClass">
      <doc xml:space="preserve"
           filename="src/session-manager.c"
           line="27">Session interaction

The #PhoshSessionManager is responsible for
managing attributes of the session.</doc>
      <source-position filename="src/session-manager.h" line="26"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DBusEndSessionDialog"/>
      <constructor name="new" c:identifier="phosh_session_manager_new">
        <source-position filename="src/session-manager.h" line="29"/>
        <return-value transfer-ownership="full">
          <type name="SessionManager" c:type="PhoshSessionManager*"/>
        </return-value>
      </constructor>
      <method name="export_end_session"
              c:identifier="phosh_session_manager_export_end_session">
        <source-position filename="src/session-manager.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SessionManager" c:type="PhoshSessionManager*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inhibit" c:identifier="phosh_session_manager_inhibit">
        <source-position filename="src/session-manager.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SessionManager" c:type="PhoshSessionManager*"/>
          </instance-parameter>
          <parameter name="what" transfer-ownership="none">
            <type name="SessionManagerFlags"
                  c:type="PhoshSessionManagerFlags"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_active"
              c:identifier="phosh_session_manager_is_active"
              glib:get-property="active">
        <source-position filename="src/session-manager.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SessionManager" c:type="PhoshSessionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="logout" c:identifier="phosh_session_manager_logout">
        <source-position filename="src/session-manager.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SessionManager" c:type="PhoshSessionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reboot" c:identifier="phosh_session_manager_reboot">
        <source-position filename="src/session-manager.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SessionManager" c:type="PhoshSessionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register" c:identifier="phosh_session_manager_register">
        <source-position filename="src/session-manager.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SessionManager" c:type="PhoshSessionManager*"/>
          </instance-parameter>
          <parameter name="app_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="startup_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="shutdown" c:identifier="phosh_session_manager_shutdown">
        <source-position filename="src/session-manager.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SessionManager" c:type="PhoshSessionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="uninhibit" c:identifier="phosh_session_manager_uninhibit">
        <source-position filename="src/session-manager.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SessionManager" c:type="PhoshSessionManager*"/>
          </instance-parameter>
          <parameter name="cookie" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                transfer-ownership="none"
                getter="is_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/session-manager.c"
             line="404">Whether this phosh instance runs in the currently active session.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="SessionManagerClass"
            c:type="PhoshSessionManagerClass"
            glib:is-gtype-struct-for="SessionManager">
      <source-position filename="src/session-manager.h" line="26"/>
      <field name="parent_class">
        <type name="DBusEndSessionDialogSkeletonClass"
              c:type="PhoshDBusEndSessionDialogSkeletonClass"/>
      </field>
    </record>
    <bitfield name="SessionManagerFlags" c:type="PhoshSessionManagerFlags">
      <source-position filename="src/session-manager.h" line="22"/>
      <member name="logout"
              value="1"
              c:identifier="PHOSH_SESSION_INHIBIT_LOGOUT">
      </member>
      <member name="user_switch"
              value="2"
              c:identifier="PHOSH_SESSION_INHIBIT_USER_SWITCH">
      </member>
      <member name="suspend"
              value="4"
              c:identifier="PHOSH_SESSION_INHIBIT_SUSPEND">
      </member>
      <member name="idle" value="8" c:identifier="PHOSH_SESSION_INHIBIT_IDLE">
      </member>
      <member name="automount"
              value="16"
              c:identifier="PHOSH_SESSION_INHIBIT_AUTOMOUNT">
      </member>
    </bitfield>
    <class name="SessionPresence"
           c:symbol-prefix="session_presence"
           c:type="PhoshSessionPresence"
           parent="SessionPresenceDBusPresenceProxy"
           glib:type-name="PhoshSessionPresence"
           glib:get-type="phosh_session_presence_get_type"
           glib:type-struct="SessionPresenceClass">
      <doc xml:space="preserve"
           filename="src/session-presence.c"
           line="17">Interface with gnome-session's Presence interface

The #PhoshSessionPresence is responsible for getting status updated
from gnome-session's org.gnome.SessionManager.Presence interface.

This is just a minimal wrapper so we don't have to provide the
object path, names and bus names in several places.</doc>
      <source-position filename="src/session-presence.h" line="30"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="SessionPresenceDBusPresence"/>
      <function name="get_default_failable"
                c:identifier="phosh_session_presence_get_default_failable">
        <doc xml:space="preserve"
             filename="src/session-presence.c"
             line="50">Get the session presence singleton</doc>
        <source-position filename="src/session-presence.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/session-presence.c"
               line="55">The session presence singleton</doc>
          <type name="SessionPresence" c:type="PhoshSessionPresence*"/>
        </return-value>
      </function>
    </class>
    <record name="SessionPresenceClass"
            c:type="PhoshSessionPresenceClass"
            glib:is-gtype-struct-for="SessionPresence">
      <source-position filename="src/session-presence.h" line="30"/>
      <field name="parent_class">
        <type name="SessionPresenceDBusPresenceProxyClass"
              c:type="PhoshSessionPresenceDBusPresenceProxyClass"/>
      </field>
    </record>
    <interface name="SessionPresenceDBusPresence"
               c:symbol-prefix="session_presence_dbus_presence"
               c:type="PhoshSessionPresenceDBusPresence"
               glib:type-name="PhoshSessionPresenceDBusPresence"
               glib:get-type="phosh_session_presence_dbus_presence_get_type"
               glib:type-struct="SessionPresenceDBusPresenceIface">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-presence-dbus.c"
           line="335">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-Presence.top_of_page"&gt;org.gnome.SessionManager.Presence&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="40"/>
      <function name="interface_info"
                c:identifier="phosh_session_presence_dbus_presence_interface_info">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="290">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SessionManager-Presence.top_of_page"&gt;org.gnome.SessionManager.Presence&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="295">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="phosh_session_presence_dbus_presence_override_properties">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="303">Overrides all #GObject properties in the #PhoshSessionPresenceDBusPresence interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="311">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="305">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="306">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_status"
                      invoker="get_status"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="389">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SessionManager-Presence.status"&gt;"status"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="397">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="391">A #PhoshSessionPresenceDBusPresence.</doc>
            <type name="SessionPresenceDBusPresence"
                  c:type="PhoshSessionPresenceDBusPresence*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="status_changed">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="345">Handler for the #PhoshSessionPresenceDBusPresence::status-changed signal.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="SessionPresenceDBusPresence"
                  c:type="PhoshSessionPresenceDBusPresence*"/>
          </instance-parameter>
          <parameter name="arg_status" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="emit_status_changed"
              c:identifier="phosh_session_presence_dbus_presence_emit_status_changed">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="422">Emits the &lt;link linkend="gdbus-signal-org-gnome-SessionManager-Presence.StatusChanged"&gt;"StatusChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="424">A #PhoshSessionPresenceDBusPresence.</doc>
            <type name="SessionPresenceDBusPresence"
                  c:type="PhoshSessionPresenceDBusPresence*"/>
          </instance-parameter>
          <parameter name="arg_status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="425">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="phosh_session_presence_dbus_presence_get_status"
              glib:get-property="status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="389">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-SessionManager-Presence.status"&gt;"status"&lt;/link&gt; D-Bus property.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="397">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="391">A #PhoshSessionPresenceDBusPresence.</doc>
            <type name="SessionPresenceDBusPresence"
                  c:type="PhoshSessionPresenceDBusPresence*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_status"
              c:identifier="phosh_session_presence_dbus_presence_set_status"
              glib:set-property="status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="407">Sets the &lt;link linkend="gdbus-property-org-gnome-SessionManager-Presence.status"&gt;"status"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="409">A #PhoshSessionPresenceDBusPresence.</doc>
            <type name="SessionPresenceDBusPresence"
                  c:type="PhoshSessionPresenceDBusPresence*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="410">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="status"
                writable="1"
                transfer-ownership="none"
                setter="set_status"
                getter="get_status"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="378">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-SessionManager-Presence.status"&gt;"status"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="status-changed" when="last">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="357">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-SessionManager-Presence.StatusChanged"&gt;"StatusChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="360">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="SessionPresenceDBusPresenceIface"
            c:type="PhoshSessionPresenceDBusPresenceIface"
            glib:is-gtype-struct-for="SessionPresenceDBusPresence">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-presence-dbus.c"
           line="341">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-Presence.top_of_page"&gt;org.gnome.SessionManager.Presence&lt;/link&gt;.</doc>
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="40"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="343">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_status">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="344">Getter for the #PhoshSessionPresenceDBusPresence:status property.</doc>
        <callback name="get_status">
          <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                           line="34"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="397">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/dbus/gnome-session-presence-dbus.c"
                   line="391">A #PhoshSessionPresenceDBusPresence.</doc>
              <type name="SessionPresenceDBusPresence"
                    c:type="PhoshSessionPresenceDBusPresence*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="status_changed">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="345">Handler for the #PhoshSessionPresenceDBusPresence::status-changed signal.</doc>
        <callback name="status_changed">
          <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                           line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="SessionPresenceDBusPresence"
                    c:type="PhoshSessionPresenceDBusPresence*"/>
            </parameter>
            <parameter name="arg_status" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SessionPresenceDBusPresenceProxy"
           c:symbol-prefix="session_presence_dbus_presence_proxy"
           c:type="PhoshSessionPresenceDBusPresenceProxy"
           parent="Gio.DBusProxy"
           glib:type-name="PhoshSessionPresenceDBusPresenceProxy"
           glib:get-type="phosh_session_presence_dbus_presence_proxy_get_type"
           glib:type-struct="SessionPresenceDBusPresenceProxyClass">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-presence-dbus.c"
           line="439">The #PhoshSessionPresenceDBusPresenceProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="87"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="SessionPresenceDBusPresence"/>
      <constructor name="new_finish"
                   c:identifier="phosh_session_presence_dbus_presence_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="699">Finishes an operation started with phosh_session_presence_dbus_presence_proxy_new().</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="706">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SessionPresenceDBusPresenceProxy"
                c:type="PhoshSessionPresenceDBusPresence*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="701">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_session_presence_dbus_presence_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="phosh_session_presence_dbus_presence_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="789">Finishes an operation started with phosh_session_presence_dbus_presence_proxy_new_for_bus().</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="122"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="796">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SessionPresenceDBusPresenceProxy"
                c:type="PhoshSessionPresenceDBusPresence*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="791">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phosh_session_presence_dbus_presence_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="phosh_session_presence_dbus_presence_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="814">Like phosh_session_presence_dbus_presence_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See phosh_session_presence_dbus_presence_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="829">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SessionPresenceDBusPresenceProxy"
                c:type="PhoshSessionPresenceDBusPresence*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="816">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="817">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="818">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="819">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="820">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="phosh_session_presence_dbus_presence_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="724">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-Presence.top_of_page"&gt;org.gnome.SessionManager.Presence&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See phosh_session_presence_dbus_presence_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="739">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SessionPresenceDBusPresenceProxy"
                c:type="PhoshSessionPresenceDBusPresence*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="726">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="727">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="728">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="729">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="730">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="phosh_session_presence_dbus_presence_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="669">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-Presence.top_of_page"&gt;org.gnome.SessionManager.Presence&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_session_presence_dbus_presence_proxy_new_finish() to get the result of the operation.

See phosh_session_presence_dbus_presence_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="671">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="672">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="673">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="674">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="675">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="676">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="677">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="phosh_session_presence_dbus_presence_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="759">Like phosh_session_presence_dbus_presence_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call phosh_session_presence_dbus_presence_proxy_new_for_bus_finish() to get the result of the operation.

See phosh_session_presence_dbus_presence_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="761">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="762">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="763">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="764">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="765">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="766">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/dbus/gnome-session-presence-dbus.c"
                 line="767">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SessionPresenceDBusPresenceProxyPrivate"
              c:type="PhoshSessionPresenceDBusPresenceProxyPrivate*"/>
      </field>
    </class>
    <record name="SessionPresenceDBusPresenceProxyClass"
            c:type="PhoshSessionPresenceDBusPresenceProxyClass"
            glib:is-gtype-struct-for="SessionPresenceDBusPresenceProxy">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-presence-dbus.c"
           line="445">Class structure for #PhoshSessionPresenceDBusPresenceProxy.</doc>
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="87"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="447">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="SessionPresenceDBusPresenceProxyPrivate"
            c:type="PhoshSessionPresenceDBusPresenceProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="75"/>
    </record>
    <class name="SessionPresenceDBusPresenceSkeleton"
           c:symbol-prefix="session_presence_dbus_presence_skeleton"
           c:type="PhoshSessionPresenceDBusPresenceSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="PhoshSessionPresenceDBusPresenceSkeleton"
           glib:get-type="phosh_session_presence_dbus_presence_skeleton_get_type"
           glib:type-struct="SessionPresenceDBusPresenceSkeletonClass">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-presence-dbus.c"
           line="851">The #PhoshSessionPresenceDBusPresenceSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="157"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="SessionPresenceDBusPresence"/>
      <constructor name="new"
                   c:identifier="phosh_session_presence_dbus_presence_skeleton_new">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="1329">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-SessionManager-Presence.top_of_page"&gt;org.gnome.SessionManager.Presence&lt;/link&gt;.</doc>
        <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                         line="165"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="1334">The skeleton object.</doc>
          <type name="SessionPresenceDBusPresenceSkeleton"
                c:type="PhoshSessionPresenceDBusPresence*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SessionPresenceDBusPresenceSkeletonPrivate"
              c:type="PhoshSessionPresenceDBusPresenceSkeletonPrivate*"/>
      </field>
    </class>
    <record name="SessionPresenceDBusPresenceSkeletonClass"
            c:type="PhoshSessionPresenceDBusPresenceSkeletonClass"
            glib:is-gtype-struct-for="SessionPresenceDBusPresenceSkeleton">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-presence-dbus.c"
           line="857">Class structure for #PhoshSessionPresenceDBusPresenceSkeleton.</doc>
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="157"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="859">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="SessionPresenceDBusPresenceSkeletonPrivate"
            c:type="PhoshSessionPresenceDBusPresenceSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="145"/>
    </record>
    <enumeration name="SessionPresenceStatus"
                 c:type="PhoshSessionPresenceStatus">
      <doc xml:space="preserve"
           filename="src/session-presence.h"
           line="13">Current (GNOME) session's presence status These need to match the
values of the DBus protocol:
https://people.gnome.org/~mccann/gnome-session/docs/gnome-session.html#org.gnome.SessionManager.Presence:status</doc>
      <source-position filename="src/session-presence.h" line="26"/>
    </enumeration>
    <class name="Shell"
           c:symbol-prefix="shell"
           c:type="PhoshShell"
           parent="GObject.Object"
           glib:type-name="PhoshShell"
           glib:get-type="phosh_shell_get_type"
           glib:type-struct="ShellClass">
      <doc xml:space="preserve"
           filename="src/shell.c"
           line="101">The shell singleton

#PhoshShell is responsible for instantiating the GUI
parts of the shell#PhoshTopPanel, #PhoshHome,… and the managers that
interface with DBus #PhoshMonitorManager, #PhoshFeedbackManager, …
and coordinates between them.</doc>
      <source-position filename="src/plugin-shell.h" line="37"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <constructor name="new" c:identifier="phosh_shell_new">
        <source-position filename="src/shell.h" line="78"/>
        <return-value transfer-ownership="full">
          <type name="Shell" c:type="PhoshShell*"/>
        </return-value>
      </constructor>
      <function name="get_debug_flags"
                c:identifier="phosh_shell_get_debug_flags">
        <source-position filename="src/shell.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="ShellDebugFlags" c:type="PhoshShellDebugFlags"/>
        </return-value>
      </function>
      <function name="get_default" c:identifier="phosh_shell_get_default">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="2112">Get the shell singleton</doc>
        <source-position filename="src/plugin-shell.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="2117">The shell singleton</doc>
          <type name="Shell" c:type="PhoshShell*"/>
        </return-value>
      </function>
      <virtual-method name="get_lockscreen_type" invoker="get_lockscreen_type">
        <source-position filename="src/plugin-shell.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="activate_action"
              c:identifier="phosh_shell_activate_action">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="2464">Activates the given action. If the action is not found %FALSE is returned and a
warning is logged.</doc>
        <source-position filename="src/shell.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="2473">%TRUE if the action was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2466">The #PhoshShell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2467">The action name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="parameter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2468">The action's parameters</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_global_keyboard_action_entries"
              c:identifier="phosh_shell_add_global_keyboard_action_entries">
        <source-position filename="src/shell.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
          <parameter name="actions" transfer-ownership="none">
            <type name="Gio.ActionEntry" c:type="const GActionEntry*"/>
          </parameter>
          <parameter name="n_entries" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_power_save"
              c:identifier="phosh_shell_enable_power_save">
        <source-position filename="src/shell.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="fade_out" c:identifier="phosh_shell_fade_out">
        <source-position filename="src/shell.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_app_launch_context"
              c:identifier="phosh_shell_get_app_launch_context">
        <source-position filename="src/shell.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="2270">an app launch context for the primary display</doc>
          <type name="Gdk.AppLaunchContext" c:type="GdkAppLaunchContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2268">The shell</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_tracker"
              c:identifier="phosh_shell_get_app_tracker">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1412">Get the app tracker</doc>
        <source-position filename="src/shell.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1418">The app tracker</doc>
          <type name="AppTracker" c:type="PhoshAppTracker*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1414">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_area" c:identifier="phosh_shell_get_area">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="2071">Gives the currently available screen area on the primary display.</doc>
        <source-position filename="src/shell.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2073">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2074">The available width</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2075">The available height</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_background_manager"
              c:identifier="phosh_shell_get_background_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1433">Get the background manager</doc>
        <source-position filename="src/shell.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1439">The background manager</doc>
          <type name="BackgroundManager" c:type="PhoshBackgroundManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1435">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_blanked" c:identifier="phosh_shell_get_blanked">
        <source-position filename="src/shell.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="2453">%TRUE if the primary output is currently blanked</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2451">The #PhoshShell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bt_manager" c:identifier="phosh_shell_get_bt_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1747">Get the bluetooth manager</doc>
        <source-position filename="src/shell.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1753">The bluetooth manager</doc>
          <type name="BtManager" c:type="PhoshBtManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1749">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_builtin_monitor"
              c:identifier="phosh_shell_get_builtin_monitor"
              glib:get-property="builtin-monitor">
        <source-position filename="src/shell.h" line="91"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1378">the built in monitor or %NULL if there is no built in monitor</doc>
          <type name="Monitor" c:type="PhoshMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1376">The shell</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_calls_manager"
              c:identifier="phosh_shell_get_calls_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1454">Get the calls manager</doc>
        <source-position filename="src/shell.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1460">The calls manager</doc>
          <type name="CallsManager" c:type="PhoshCallsManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1456">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_docked"
              c:identifier="phosh_shell_get_docked"
              glib:get-property="docked">
        <source-position filename="src/shell.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="2435">%TRUE if the device is currently docked, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2433">The #PhoshShell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_docked_manager"
              c:identifier="phosh_shell_get_docked_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1771">Get the docked manager</doc>
        <source-position filename="src/shell.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1777">The docked manager</doc>
          <type name="DockedManager" c:type="PhoshDockedManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1773">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_emergency_calls_manager"
              c:identifier="phosh_shell_get_emergency_calls_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1475">Get the emergency calls manager</doc>
        <source-position filename="src/shell.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1481">The emergency calls manager</doc>
          <type name="EmergencyCallsManager"
                c:type="PhoshEmergencyCallsManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1477">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_feedback_manager"
              c:identifier="phosh_shell_get_feedback_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1496">Get the feedback manager</doc>
        <source-position filename="src/shell.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1502">The feedback manager</doc>
          <type name="FeedbackManager" c:type="PhoshFeedbackManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1498">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gtk_mount_manager"
              c:identifier="phosh_shell_get_gtk_mount_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1517">Get the GTK mount manager</doc>
        <source-position filename="src/shell.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1523">The GTK mount manager</doc>
          <type name="GtkMountManager" c:type="PhoshGtkMountManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1519">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hks_manager"
              c:identifier="phosh_shell_get_hks_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1801">Get the hardware killswitch manager</doc>
        <source-position filename="src/shell.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1807">The hardware killswitch manager</doc>
          <type name="HksManager" c:type="PhoshHksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1803">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_launcher_entry_manager"
              c:identifier="phosh_shell_get_launcher_entry_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1538">Get the launcher entry manager</doc>
        <source-position filename="src/plugin-shell.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1544">The launcher entry manager</doc>
          <type name="LauncherEntryManager"
                c:type="PhoshLauncherEntryManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1540">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout_manager"
              c:identifier="phosh_shell_get_layout_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1559">Get the layout manager</doc>
        <source-position filename="src/shell.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1565">The layout manager</doc>
          <type name="LayoutManager" c:type="PhoshLayoutManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1561">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location_manager"
              c:identifier="phosh_shell_get_location_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1825">Get the location manager</doc>
        <source-position filename="src/shell.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1831">The location manager</doc>
          <type name="LocationManager" c:type="PhoshLocationManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1827">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locked"
              c:identifier="phosh_shell_get_locked"
              glib:get-property="locked">
        <source-position filename="src/plugin-shell.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="2368">%TRUE if the shell is currently locked, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2366">The #PhoshShell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lockscreen_manager"
              c:identifier="phosh_shell_get_lockscreen_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1580">Get the lockscreen manager</doc>
        <source-position filename="src/shell.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1586">The lockscreen manager</doc>
          <type name="LockscreenManager" c:type="PhoshLockscreenManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1582">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lockscreen_type"
              c:identifier="phosh_shell_get_lockscreen_type">
        <source-position filename="src/plugin-shell.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode_manager"
              c:identifier="phosh_shell_get_mode_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1601">Get the mode manager</doc>
        <source-position filename="src/shell.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1607">The mode manager</doc>
          <type name="ModeManager" c:type="PhoshModeManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1603">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_monitor_manager"
              c:identifier="phosh_shell_get_monitor_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1641">Get the monitor manager</doc>
        <source-position filename="src/plugin-shell.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1647">The monitor manager</doc>
          <type name="MonitorManager" c:type="PhoshMonitorManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1643">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_osk_manager"
              c:identifier="phosh_shell_get_osk_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1849">Get the onscreen keyboard manager</doc>
        <source-position filename="src/shell.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1855">The onscreen keyboard manager</doc>
          <type name="OskManager" c:type="PhoshOskManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1851">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_primary_monitor"
              c:identifier="phosh_shell_get_primary_monitor"
              glib:get-property="primary-monitor">
        <source-position filename="src/shell.h" line="90"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1397">the primary monitor or %NULL if there currently are no outputs</doc>
          <type name="Monitor" c:type="PhoshMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1395">The shell</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rotation_manager"
              c:identifier="phosh_shell_get_rotation_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1873">Get the rotation manager</doc>
        <source-position filename="src/shell.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1879">The rotation manager</doc>
          <type name="RotationManager" c:type="PhoshRotationManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1875">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screen_saver_manager"
              c:identifier="phosh_shell_get_screen_saver_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1683">Get the screensaver manager</doc>
        <source-position filename="src/shell.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1689">The screensaver manager</doc>
          <type name="ScreenSaverManager" c:type="PhoshScreenSaverManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1685">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screenshot_manager"
              c:identifier="phosh_shell_get_screenshot_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1704">Get the screenshot manager</doc>
        <source-position filename="src/shell.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1710">The screenshot manager</doc>
          <type name="ScreenshotManager" c:type="PhoshScreenshotManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1706">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_manager"
              c:identifier="phosh_shell_get_session_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1725">Get the session manager</doc>
        <source-position filename="src/plugin-shell.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1731">The session manager</doc>
          <type name="SessionManager" c:type="PhoshSessionManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1727">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_splash"
              c:identifier="phosh_shell_get_show_splash">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="2405">Whether splash screens should be used when apps start</doc>
        <source-position filename="src/shell.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="2410">%TRUE when splash should be used, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2407">The #PhoshShell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="phosh_shell_get_state">
        <source-position filename="src/shell.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="2287">The current #PhoshShellStateFlags</doc>
          <type name="ShellStateFlags" c:type="PhoshShellStateFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2285">The shell</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style_manager"
              c:identifier="phosh_shell_get_style_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1621">Get the style manager</doc>
        <source-position filename="src/shell.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1627">The style manager</doc>
          <type name="StyleManager" c:type="PhoshStyleManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1623">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_toplevel_manager"
              c:identifier="phosh_shell_get_toplevel_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1662">Get the toplevel manager</doc>
        <source-position filename="src/shell.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1668">The toplevel manager</doc>
          <type name="ToplevelManager" c:type="PhoshToplevelManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1664">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_torch_manager"
              c:identifier="phosh_shell_get_torch_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1906">Get the torch manager</doc>
        <source-position filename="src/shell.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1912">The torch manager</doc>
          <type name="TorchManager" c:type="PhoshTorchManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1908">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_usable_area"
              c:identifier="phosh_shell_get_usable_area">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="2012">Gives the usable area in pixels usable by a client on the primary
display.</doc>
        <source-position filename="src/shell.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2014">The shell</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2015">The x coordinate where client usable area starts</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2016">The y coordinate where client usable area starts</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2017">The width of the client usable area</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2018">The height of the client usable area</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vpn_manager"
              c:identifier="phosh_shell_get_vpn_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1930">Get the VPN manager</doc>
        <source-position filename="src/shell.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1936">The VPN manager</doc>
          <type name="VpnManager" c:type="PhoshVpnManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1932">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wifi_manager"
              c:identifier="phosh_shell_get_wifi_manager">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1954">Get the Wifi manager</doc>
        <source-position filename="src/plugin-shell.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1960">The Wifi manager</doc>
          <type name="WifiManager" c:type="PhoshWifiManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1956">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wwan" c:identifier="phosh_shell_get_wwan">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1978">Get the WWAN manager</doc>
        <source-position filename="src/plugin-shell.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="1984">The WWAN manager</doc>
          <type name="WWan" c:type="PhoshWWan*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="1980">The shell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_session_active"
              c:identifier="phosh_shell_is_session_active">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="2248">Whether this shell is part of the active session</doc>
        <source-position filename="src/shell.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2250">The shell</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_startup_finished"
              c:identifier="phosh_shell_is_startup_finished">
        <source-position filename="src/shell.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="2198">%TRUE if the shell finished startup. %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2196">The shell</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lock" c:identifier="phosh_shell_lock">
        <source-position filename="src/shell.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_global_keyboard_action_entries"
              c:identifier="phosh_shell_remove_global_keyboard_action_entries">
        <source-position filename="src/shell.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
          <parameter name="action_names" transfer-ownership="none">
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_default" c:identifier="phosh_shell_set_default">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="2095">Set the PhoshShell singleton that is returned by `phosh_shell_get_default()`</doc>
        <source-position filename="src/plugin-shell.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2097">The shell to use</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_locked"
              c:identifier="phosh_shell_set_locked"
              glib:set-property="locked">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="2381">Lock the shell. We proxy to lockscreen-manager to avoid
that other parts of the shell need to care about this
abstraction.</doc>
        <source-position filename="src/shell.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2383">The #PhoshShell singleton</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
          <parameter name="locked" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2384">%TRUE to lock the shell</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_primary_monitor"
              c:identifier="phosh_shell_set_primary_monitor"
              glib:set-property="primary-monitor">
        <source-position filename="src/shell.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="phosh_shell_set_state">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="2300">Set the shells state.</doc>
        <source-position filename="src/shell.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2302">The shell</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2303">The #PhoshShellStateFlags to set</doc>
            <type name="ShellStateFlags" c:type="PhoshShellStateFlags"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2304">%TRUE to set a shell state, %FALSE to reset</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="started_by_display_manager"
              c:identifier="phosh_shell_started_by_display_manager">
        <source-position filename="src/shell.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/shell.c"
               line="2181">%TRUE if we were started from a display manager. %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/shell.c"
                 line="2179">The shell</doc>
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unlock" c:identifier="phosh_shell_unlock">
        <source-position filename="src/shell.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Shell" c:type="PhoshShell*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="builtin-monitor"
                transfer-ownership="none"
                getter="get_builtin_monitor">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1210">The built in monitor. This is a hardware property and hence can
only be read. It can be %NULL when not present or disabled.</doc>
        <type name="Monitor"/>
      </property>
      <property name="docked"
                writable="1"
                transfer-ownership="none"
                getter="get_docked"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1199">Whether the device is currently docked. This mirrors the property
from #PhoshDockedManager for easier access.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="locked"
                writable="1"
                transfer-ownership="none"
                setter="set_locked"
                getter="get_locked"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1189">Whether the screen is currently locked. This mirrors the property
from #PhoshLockscreenManager for easier access.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="primary-monitor"
                writable="1"
                transfer-ownership="none"
                setter="set_primary_monitor"
                getter="get_primary_monitor">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1222">The primary monitor that has the panels, lock screen etc.</doc>
        <type name="Monitor"/>
      </property>
      <property name="shell-state"
                transfer-ownership="none"
                default-value="PHOSH_STATE_NONE">
        <type name="ShellStateFlags"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="ready" when="last">
        <doc xml:space="preserve"
             filename="src/shell.c"
             line="1244">The ready signal is emitted once when the shell finished starting
up.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <bitfield name="ShellActionMode"
              glib:type-name="PhoshShellActionMode"
              glib:get-type="phosh_shell_action_mode_get_type"
              c:type="PhoshShellActionMode">
      <member name="none"
              value="0"
              c:identifier="PHOSH_SHELL_ACTION_MODE_NONE"
              glib:nick="none"
              glib:name="PHOSH_SHELL_ACTION_MODE_NONE">
      </member>
      <member name="normal"
              value="1"
              c:identifier="PHOSH_SHELL_ACTION_MODE_NORMAL"
              glib:nick="normal"
              glib:name="PHOSH_SHELL_ACTION_MODE_NORMAL">
      </member>
      <member name="overview"
              value="2"
              c:identifier="PHOSH_SHELL_ACTION_MODE_OVERVIEW"
              glib:nick="overview"
              glib:name="PHOSH_SHELL_ACTION_MODE_OVERVIEW">
      </member>
      <member name="lock_screen"
              value="4"
              c:identifier="PHOSH_SHELL_ACTION_MODE_LOCK_SCREEN"
              glib:nick="lock-screen"
              glib:name="PHOSH_SHELL_ACTION_MODE_LOCK_SCREEN">
      </member>
      <member name="unlock_screen"
              value="8"
              c:identifier="PHOSH_SHELL_ACTION_MODE_UNLOCK_SCREEN"
              glib:nick="unlock-screen"
              glib:name="PHOSH_SHELL_ACTION_MODE_UNLOCK_SCREEN">
      </member>
      <member name="login_screen"
              value="16"
              c:identifier="PHOSH_SHELL_ACTION_MODE_LOGIN_SCREEN"
              glib:nick="login-screen"
              glib:name="PHOSH_SHELL_ACTION_MODE_LOGIN_SCREEN">
      </member>
      <member name="system_modal"
              value="32"
              c:identifier="PHOSH_SHELL_ACTION_MODE_SYSTEM_MODAL"
              glib:nick="system-modal"
              glib:name="PHOSH_SHELL_ACTION_MODE_SYSTEM_MODAL">
      </member>
      <member name="looking_glass"
              value="64"
              c:identifier="PHOSH_SHELL_ACTION_MODE_LOOKING_GLASS"
              glib:nick="looking-glass"
              glib:name="PHOSH_SHELL_ACTION_MODE_LOOKING_GLASS">
      </member>
      <member name="popup"
              value="128"
              c:identifier="PHOSH_SHELL_ACTION_MODE_POPUP"
              glib:nick="popup"
              glib:name="PHOSH_SHELL_ACTION_MODE_POPUP">
      </member>
      <member name="all"
              value="-1"
              c:identifier="PHOSH_SHELL_ACTION_MODE_ALL"
              glib:nick="all"
              glib:name="PHOSH_SHELL_ACTION_MODE_ALL">
      </member>
    </bitfield>
    <record name="ShellClass"
            c:type="PhoshShellClass"
            glib:is-gtype-struct-for="Shell">
      <source-position filename="src/plugin-shell.h" line="37"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_lockscreen_type">
        <callback name="get_lockscreen_type">
          <source-position filename="src/plugin-shell.h" line="25"/>
          <return-value transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Shell" c:type="PhoshShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_phosh_reserved1" introspectable="0">
        <callback name="_phosh_reserved1">
          <source-position filename="src/plugin-shell.h" line="28"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved2" introspectable="0">
        <callback name="_phosh_reserved2">
          <source-position filename="src/plugin-shell.h" line="29"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved3" introspectable="0">
        <callback name="_phosh_reserved3">
          <source-position filename="src/plugin-shell.h" line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved4" introspectable="0">
        <callback name="_phosh_reserved4">
          <source-position filename="src/plugin-shell.h" line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved5" introspectable="0">
        <callback name="_phosh_reserved5">
          <source-position filename="src/plugin-shell.h" line="32"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved6" introspectable="0">
        <callback name="_phosh_reserved6">
          <source-position filename="src/plugin-shell.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved7" introspectable="0">
        <callback name="_phosh_reserved7">
          <source-position filename="src/plugin-shell.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved8" introspectable="0">
        <callback name="_phosh_reserved8">
          <source-position filename="src/plugin-shell.h" line="35"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_phosh_reserved9" introspectable="0">
        <callback name="_phosh_reserved9">
          <source-position filename="src/plugin-shell.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="ShellDebugFlags"
              glib:type-name="PhoshShellDebugFlags"
              glib:get-type="phosh_shell_debug_flags_get_type"
              c:type="PhoshShellDebugFlags">
      <doc xml:space="preserve"
           filename="src/shell.h"
           line="62">These flags are to enable/disable debugging features.</doc>
      <member name="none"
              value="0"
              c:identifier="PHOSH_SHELL_DEBUG_FLAG_NONE"
              glib:nick="none"
              glib:name="PHOSH_SHELL_DEBUG_FLAG_NONE">
        <doc xml:space="preserve"
             filename="src/shell.h"
             line="64">No debug flags</doc>
      </member>
      <member name="always_splash"
              value="1"
              c:identifier="PHOSH_SHELL_DEBUG_FLAG_ALWAYS_SPLASH"
              glib:nick="always-splash"
              glib:name="PHOSH_SHELL_DEBUG_FLAG_ALWAYS_SPLASH">
        <doc xml:space="preserve"
             filename="src/shell.h"
             line="65">always use splash (even when docked)</doc>
      </member>
      <member name="fake_builtin"
              value="2"
              c:identifier="PHOSH_SHELL_DEBUG_FLAG_FAKE_BUILTIN"
              glib:nick="fake-builtin"
              glib:name="PHOSH_SHELL_DEBUG_FLAG_FAKE_BUILTIN">
        <doc xml:space="preserve"
             filename="src/shell.h"
             line="66">When calculatiog layout treat the first
    virtual output like a built-in output.</doc>
      </member>
    </bitfield>
    <bitfield name="ShellKeyBindingFlags"
              glib:type-name="PhoshShellKeyBindingFlags"
              glib:get-type="phosh_shell_key_binding_flags_get_type"
              c:type="PhoshShellKeyBindingFlags">
      <member name="none"
              value="0"
              c:identifier="PHOSH_SHELL_KEY_BINDING_NONE"
              glib:nick="none"
              glib:name="PHOSH_SHELL_KEY_BINDING_NONE">
      </member>
      <member name="per_window"
              value="1"
              c:identifier="PHOSH_SHELL_KEY_BINDING_PER_WINDOW"
              glib:nick="per-window"
              glib:name="PHOSH_SHELL_KEY_BINDING_PER_WINDOW">
      </member>
      <member name="builtin"
              value="2"
              c:identifier="PHOSH_SHELL_KEY_BINDING_BUILTIN"
              glib:nick="builtin"
              glib:name="PHOSH_SHELL_KEY_BINDING_BUILTIN">
      </member>
      <member name="is_reversed"
              value="4"
              c:identifier="PHOSH_SHELL_KEY_BINDING_IS_REVERSED"
              glib:nick="is-reversed"
              glib:name="PHOSH_SHELL_KEY_BINDING_IS_REVERSED">
      </member>
      <member name="non_maskable"
              value="8"
              c:identifier="PHOSH_SHELL_KEY_BINDING_NON_MASKABLE"
              glib:nick="non-maskable"
              glib:name="PHOSH_SHELL_KEY_BINDING_NON_MASKABLE">
      </member>
      <member name="no_auto_grab"
              value="32"
              c:identifier="PHOSH_SHELL_KEY_BINDING_NO_AUTO_GRAB"
              glib:nick="no-auto-grab"
              glib:name="PHOSH_SHELL_KEY_BINDING_NO_AUTO_GRAB">
      </member>
      <member name="ignore_autorepeat"
              value="16"
              c:identifier="PHOSH_SHELL_KEY_BINDING_IGNORE_AUTOREPEAT"
              glib:nick="ignore-autorepeat"
              glib:name="PHOSH_SHELL_KEY_BINDING_IGNORE_AUTOREPEAT">
      </member>
    </bitfield>
    <enumeration name="ShellLayout"
                 glib:type-name="PhoshShellLayout"
                 glib:get-type="phosh_shell_layout_get_type"
                 c:type="PhoshShellLayout">
      <doc xml:space="preserve"
           filename="src/phosh-settings-enums.h"
           line="24">How the shell's UI elements are layed out.</doc>
      <member name="none"
              value="0"
              c:identifier="PHOSH_SHELL_LAYOUT_NONE"
              glib:nick="none"
              glib:name="PHOSH_SHELL_LAYOUT_NONE">
        <doc xml:space="preserve"
             filename="src/phosh-settings-enums.h"
             line="26">Don't perform any additional layouting</doc>
      </member>
      <member name="device"
              value="1"
              c:identifier="PHOSH_SHELL_LAYOUT_DEVICE"
              glib:nick="device"
              glib:name="PHOSH_SHELL_LAYOUT_DEVICE">
        <doc xml:space="preserve"
             filename="src/phosh-settings-enums.h"
             line="27">Use device information to optimize layout</doc>
      </member>
    </enumeration>
    <bitfield name="ShellStateFlags"
              glib:type-name="PhoshShellStateFlags"
              glib:get-type="phosh_shell_state_flags_get_type"
              c:type="PhoshShellStateFlags">
      <doc xml:space="preserve"
           filename="src/shell.h"
           line="40">These flags are used to keep track of the state
the #PhoshShell is in.</doc>
      <member name="none"
              value="0"
              c:identifier="PHOSH_STATE_NONE"
              glib:nick="none"
              glib:name="PHOSH_STATE_NONE">
        <doc xml:space="preserve"
             filename="src/shell.h"
             line="42">No other state</doc>
      </member>
      <member name="modal_system_prompt"
              value="1"
              c:identifier="PHOSH_STATE_MODAL_SYSTEM_PROMPT"
              glib:nick="modal-system-prompt"
              glib:name="PHOSH_STATE_MODAL_SYSTEM_PROMPT">
        <doc xml:space="preserve"
             filename="src/shell.h"
             line="43">any modal prompt shown</doc>
      </member>
      <member name="blanked"
              value="2"
              c:identifier="PHOSH_STATE_BLANKED"
              glib:nick="blanked"
              glib:name="PHOSH_STATE_BLANKED">
        <doc xml:space="preserve"
             filename="src/shell.h"
             line="44">primary display off</doc>
      </member>
      <member name="locked"
              value="4"
              c:identifier="PHOSH_STATE_LOCKED"
              glib:nick="locked"
              glib:name="PHOSH_STATE_LOCKED">
        <doc xml:space="preserve"
             filename="src/shell.h"
             line="45">displays locked</doc>
      </member>
      <member name="settings"
              value="8"
              c:identifier="PHOSH_STATE_SETTINGS"
              glib:nick="settings"
              glib:name="PHOSH_STATE_SETTINGS">
        <doc xml:space="preserve"
             filename="src/shell.h"
             line="46">settings menu unfolded from top bar</doc>
      </member>
      <member name="overview"
              value="16"
              c:identifier="PHOSH_STATE_OVERVIEW"
              glib:nick="overview"
              glib:name="PHOSH_STATE_OVERVIEW">
        <doc xml:space="preserve"
             filename="src/shell.h"
             line="47">overview unfolded from bottom bar</doc>
      </member>
    </bitfield>
    <class name="Splash"
           c:symbol-prefix="splash"
           c:type="PhoshSplash"
           parent="LayerSurface"
           glib:type-name="PhoshSplash"
           glib:get-type="phosh_splash_get_type"
           glib:type-struct="SplashClass">
      <doc xml:space="preserve"
           filename="src/splash.c"
           line="19">A splash screen

The #PhoshSplash is a splash screen used to indicate application
startup.</doc>
      <source-position filename="src/splash.h" line="24"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_splash_new">
        <source-position filename="src/splash.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="Gio.DesktopAppInfo" c:type="GDesktopAppInfo*"/>
          </parameter>
          <parameter name="prefer_dark" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="hide" c:identifier="phosh_splash_hide">
        <source-position filename="src/splash.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Splash" c:type="PhoshSplash*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="app"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/splash.c"
             line="219">The appinfo this splash is for</doc>
        <type name="Gio.DesktopAppInfo"/>
      </property>
      <property name="prefer-dark"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/splash.c"
             line="231">Whether the splash should prefer dark theming</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="LayerSurface" c:type="PhoshLayerSurface"/>
      </field>
      <glib:signal name="closed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SplashClass"
            c:type="PhoshSplashClass"
            glib:is-gtype-struct-for="Splash">
      <source-position filename="src/splash.h" line="24"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/splash.h"
             line="20">The parent class</doc>
        <type name="LayerSurfaceClass" c:type="PhoshLayerSurfaceClass"/>
      </field>
    </record>
    <class name="SplashManager"
           c:symbol-prefix="splash_manager"
           c:type="PhoshSplashManager"
           parent="GObject.Object"
           glib:type-name="PhoshSplashManager"
           glib:get-type="phosh_splash_manager_get_type"
           glib:type-struct="SplashManagerClass">
      <doc xml:space="preserve"
           filename="src/splash-manager.c"
           line="19">Handles splash screens

Spawn, keeps track and closes splash screens.</doc>
      <source-position filename="src/splash-manager.h" line="17"/>
      <constructor name="new" c:identifier="phosh_splash_manager_new">
        <source-position filename="src/splash-manager.h" line="19"/>
        <return-value transfer-ownership="full">
          <type name="SplashManager" c:type="PhoshSplashManager*"/>
        </return-value>
        <parameters>
          <parameter name="app_tracker" transfer-ownership="none">
            <type name="AppTracker" c:type="PhoshAppTracker*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="app-tracker"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="AppTracker"/>
      </property>
    </class>
    <record name="SplashManagerClass"
            c:type="PhoshSplashManagerClass"
            glib:is-gtype-struct-for="SplashManager">
      <source-position filename="src/splash-manager.h" line="17"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="StatusIcon"
           c:symbol-prefix="status_icon"
           c:type="PhoshStatusIcon"
           parent="Gtk.Bin"
           glib:type-name="PhoshStatusIcon"
           glib:get-type="phosh_status_icon_get_type"
           glib:type-struct="StatusIconClass">
      <doc xml:space="preserve"
           filename="src/status-icon.c"
           line="15">Base class for status icons used in the Phosh's top-bar or in
[type@QuickSetting]s. It's very common to have the same status icon
class used for both places.

If the widget will be used in a [type@QuickSetting] it is
recommended (but not required) that derived classes implement a
`enabled` property.</doc>
      <source-position filename="src/status-icon.h" line="27"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_status_icon_new">
        <source-position filename="src/status-icon.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="idle_init">
        <doc xml:space="preserve"
             filename="src/status-icon.h"
             line="20">a callback to be invoked once on idle</doc>
        <source-position filename="src/status-icon.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_extra_widget"
              c:identifier="phosh_status_icon_get_extra_widget"
              glib:get-property="extra-widget">
        <doc xml:space="preserve"
             filename="src/status-icon.c"
             line="339">Get the extra widget or %NULL if there's no extra widget</doc>
        <source-position filename="src/status-icon.h" line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/status-icon.c"
               line="345">The extra widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/status-icon.c"
                 line="341">A status icon</doc>
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="phosh_status_icon_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/status-icon.h" line="33"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_size"
              c:identifier="phosh_status_icon_get_icon_size"
              glib:get-property="icon-size">
        <source-position filename="src/status-icon.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="phosh_status_icon_get_info"
              glib:get-property="info">
        <source-position filename="src/status-icon.h" line="37"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_always"
              c:identifier="phosh_status_icon_get_show_always">
        <source-position filename="src/status-icon.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_extra_widget"
              c:identifier="phosh_status_icon_set_extra_widget"
              glib:set-property="extra-widget">
        <source-position filename="src/status-icon.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="phosh_status_icon_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/status-icon.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_size"
              c:identifier="phosh_status_icon_set_icon_size"
              glib:set-property="icon-size">
        <source-position filename="src/status-icon.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="Gtk.IconSize" c:type="GtkIconSize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_info"
              c:identifier="phosh_status_icon_set_info"
              glib:set-property="info">
        <source-position filename="src/status-icon.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_always"
              c:identifier="phosh_status_icon_set_show_always">
        <source-position filename="src/status-icon.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
          </instance-parameter>
          <parameter name="show_always" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="extra-widget"
                writable="1"
                transfer-ownership="none"
                setter="set_extra_widget"
                getter="get_extra_widget">
        <doc xml:space="preserve"
             filename="src/status-icon.c"
             line="190">An extra widget to display. This is used for extra information when
used in [type@TopPanel]. When used in [type@QuickSetting] this
is not needed.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/status-icon.c"
             line="171">The name of the icon to display in the widget</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-size"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_size"
                getter="get_icon_size"
                default-value="GTK_ICON_SIZE_LARGE_TOOLBAR">
        <doc xml:space="preserve"
             filename="src/status-icon.c"
             line="180">The size of the icon to display in the widget</doc>
        <type name="Gtk.IconSize"/>
      </property>
      <property name="info"
                writable="1"
                transfer-ownership="none"
                setter="set_info"
                getter="get_info"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/status-icon.c"
             line="201">Textual information to display. Think of it as the [type@StatusIcon]'s
label.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="StatusIconClass"
            c:type="PhoshStatusIconClass"
            glib:is-gtype-struct-for="StatusIcon">
      <source-position filename="src/status-icon.h" line="27"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/status-icon.h"
             line="19">The parent class</doc>
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="idle_init">
        <doc xml:space="preserve"
             filename="src/status-icon.h"
             line="20">a callback to be invoked once on idle</doc>
        <callback name="idle_init">
          <source-position filename="src/status-icon.h" line="26"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="StatusIcon" c:type="PhoshStatusIcon*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="StatusPage"
           c:symbol-prefix="status_page"
           c:type="PhoshStatusPage"
           parent="Gtk.Bin"
           glib:type-name="PhoshStatusPage"
           glib:get-type="phosh_status_page_get_type"
           glib:type-struct="StatusPageClass">
      <doc xml:space="preserve"
           filename="src/status-page.c"
           line="16">Additional status information associated with a [class@QuickSetting].

This is displayed when the quick setting needs to show status.</doc>
      <source-position filename="src/status-page.h" line="18"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_status_page_new">
        <source-position filename="src/status-page.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="StatusPage" c:type="PhoshStatusPage*"/>
        </return-value>
      </constructor>
      <method name="get_footer"
              c:identifier="phosh_status_page_get_footer"
              glib:get-property="footer">
        <doc xml:space="preserve"
             filename="src/status-page.c"
             line="371">Get the footer of the status page</doc>
        <source-position filename="src/status-page.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/status-page.c"
               line="377">The status page footer</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/status-page.c"
                 line="373">A quick setting status page</doc>
            <type name="StatusPage" c:type="PhoshStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header"
              c:identifier="phosh_status_page_get_header"
              glib:get-property="header">
        <doc xml:space="preserve"
             filename="src/status-page.c"
             line="318">Get the header widget of the status page</doc>
        <source-position filename="src/status-page.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/status-page.c"
               line="324">The status page header</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/status-page.c"
                 line="320">A quick setting status page</doc>
            <type name="StatusPage" c:type="PhoshStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="phosh_status_page_get_title"
              glib:get-property="title">
        <source-position filename="src/status-page.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusPage" c:type="PhoshStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_footer"
              c:identifier="phosh_status_page_set_footer"
              glib:set-property="footer">
        <doc xml:space="preserve"
             filename="src/status-page.c"
             line="338">Set the footer widget shown at the bottom of a status page</doc>
        <source-position filename="src/status-page.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/status-page.c"
                 line="340">A quick setting status page</doc>
            <type name="StatusPage" c:type="PhoshStatusPage*"/>
          </instance-parameter>
          <parameter name="footer" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_header"
              c:identifier="phosh_status_page_set_header"
              glib:set-property="header">
        <doc xml:space="preserve"
             filename="src/status-page.c"
             line="285">Set the header widget of the status page. See
[property@StatusPage:header].</doc>
        <source-position filename="src/status-page.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/status-page.c"
                 line="287">A quick setting status page</doc>
            <type name="StatusPage" c:type="PhoshStatusPage*"/>
          </instance-parameter>
          <parameter name="header" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="phosh_status_page_set_title"
              glib:set-property="title">
        <source-position filename="src/status-page.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusPage" c:type="PhoshStatusPage*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="footer"
                writable="1"
                transfer-ownership="none"
                setter="set_footer"
                getter="get_footer">
        <doc xml:space="preserve"
             filename="src/status-page.c"
             line="215">Widget displayed at the very bottom - usually a button.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="header"
                writable="1"
                transfer-ownership="none"
                setter="set_header"
                getter="get_header">
        <doc xml:space="preserve"
             filename="src/status-page.c"
             line="206">An extra widget to add to end of the status page's header</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/status-page.c"
             line="197">The status page title</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="StatusPageClass"
            c:type="PhoshStatusPageClass"
            glib:is-gtype-struct-for="StatusPage">
      <source-position filename="src/status-page.h" line="18"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="StatusPagePlaceholder"
           c:symbol-prefix="status_page_placeholder"
           c:type="PhoshStatusPagePlaceholder"
           parent="Gtk.Bin"
           glib:type-name="PhoshStatusPagePlaceholder"
           glib:get-type="phosh_status_page_placeholder_get_type"
           glib:type-struct="StatusPagePlaceholderClass">
      <doc xml:space="preserve"
           filename="src/status-page-placeholder.c"
           line="17">A placeholder in a [class@StatusPage].

The placeholder page has a title and an icon and can have a single
child which is put below the title.

This widget can be replaced with `AdwStatusPage` and a bit of styling
once we switch to GTK4.</doc>
      <source-position filename="src/status-page-placeholder.h" line="15"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_status_page_placeholder_new">
        <source-position filename="src/status-page-placeholder.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="StatusPagePlaceholder"
                c:type="PhoshStatusPagePlaceholder*"/>
        </return-value>
      </constructor>
      <method name="get_icon_name"
              c:identifier="phosh_status_page_placeholder_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/status-page-placeholder.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusPagePlaceholder"
                  c:type="PhoshStatusPagePlaceholder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="phosh_status_page_placeholder_get_title"
              glib:get-property="title">
        <source-position filename="src/status-page-placeholder.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusPagePlaceholder"
                  c:type="PhoshStatusPagePlaceholder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="phosh_status_page_placeholder_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/status-page-placeholder.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusPagePlaceholder"
                  c:type="PhoshStatusPagePlaceholder*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="phosh_status_page_placeholder_set_title"
              glib:set-property="title">
        <source-position filename="src/status-page-placeholder.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="StatusPagePlaceholder"
                  c:type="PhoshStatusPagePlaceholder*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/status-page-placeholder.c"
             line="212">The name of the icon on the placeholder page</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/status-page-placeholder.c"
             line="203">The title of the placeholder page, displayed below the icon.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="StatusPagePlaceholderClass"
            c:type="PhoshStatusPagePlaceholderClass"
            glib:is-gtype-struct-for="StatusPagePlaceholder">
      <source-position filename="src/status-page-placeholder.h" line="15"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="StyleManager"
           c:symbol-prefix="style_manager"
           c:type="PhoshStyleManager"
           parent="GObject.Object"
           glib:type-name="PhoshStyleManager"
           glib:get-type="phosh_style_manager_get_type"
           glib:type-struct="StyleManagerClass">
      <doc xml:space="preserve"
           filename="src/style-manager.c"
           line="34">The style manager is responsible for picking style sheets and
themes and notifying other parts of the shell about changes.</doc>
      <source-position filename="src/style-manager.h" line="15"/>
      <constructor name="new" c:identifier="phosh_style_manager_new">
        <source-position filename="src/style-manager.h" line="17"/>
        <return-value transfer-ownership="full">
          <type name="StyleManager" c:type="PhoshStyleManager*"/>
        </return-value>
      </constructor>
      <function name="get_stylesheet"
                c:identifier="phosh_style_manager_get_stylesheet">
        <doc xml:space="preserve"
             filename="src/style-manager.c"
             line="198">Get the proper style sheet based on the given theme name</doc>
        <source-position filename="src/style-manager.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="theme_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/style-manager.c"
                 line="200">A theme name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
    </class>
    <record name="StyleManagerClass"
            c:type="PhoshStyleManagerClass"
            glib:is-gtype-struct-for="StyleManager">
      <source-position filename="src/style-manager.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SuspendManager"
           c:symbol-prefix="suspend_manager"
           c:type="PhoshSuspendManager"
           parent="Manager"
           glib:type-name="PhoshSuspendManager"
           glib:get-type="phosh_suspend_manager_get_type"
           glib:type-struct="SuspendManagerClass">
      <doc xml:space="preserve"
           filename="src/suspend-manager.c"
           line="24">Manages suspend and inhibit's suspend when not useful.</doc>
      <source-position filename="src/suspend-manager.h" line="15"/>
      <constructor name="new" c:identifier="phosh_suspend_manager_new">
        <source-position filename="src/suspend-manager.h" line="17"/>
        <return-value transfer-ownership="full">
          <type name="SuspendManager" c:type="PhoshSuspendManager*"/>
        </return-value>
      </constructor>
    </class>
    <record name="SuspendManagerClass"
            c:type="PhoshSuspendManagerClass"
            glib:is-gtype-struct-for="SuspendManager">
      <source-position filename="src/suspend-manager.h" line="15"/>
      <field name="parent_class">
        <type name="ManagerClass" c:type="PhoshManagerClass"/>
      </field>
    </record>
    <class name="SwipeAwayBin"
           c:symbol-prefix="swipe_away_bin"
           c:type="PhoshSwipeAwayBin"
           parent="Gtk.EventBox"
           glib:type-name="PhoshSwipeAwayBin"
           glib:get-type="phosh_swipe_away_bin_get_type"
           glib:type-struct="SwipeAwayBinClass">
      <source-position filename="src/swipe-away-bin.h" line="14"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Handy.Swipeable"/>
      <method name="get_allow_negative"
              c:identifier="phosh_swipe_away_bin_get_allow_negative"
              glib:get-property="allow-negative">
        <source-position filename="src/swipe-away-bin.h" line="16"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SwipeAwayBin" c:type="PhoshSwipeAwayBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reserve_size"
              c:identifier="phosh_swipe_away_bin_get_reserve_size"
              glib:get-property="reserve-size">
        <source-position filename="src/swipe-away-bin.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SwipeAwayBin" c:type="PhoshSwipeAwayBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="phosh_swipe_away_bin_hide">
        <source-position filename="src/swipe-away-bin.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SwipeAwayBin" c:type="PhoshSwipeAwayBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="phosh_swipe_away_bin_remove">
        <source-position filename="src/swipe-away-bin.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SwipeAwayBin" c:type="PhoshSwipeAwayBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reveal" c:identifier="phosh_swipe_away_bin_reveal">
        <source-position filename="src/swipe-away-bin.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SwipeAwayBin" c:type="PhoshSwipeAwayBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_allow_negative"
              c:identifier="phosh_swipe_away_bin_set_allow_negative"
              glib:set-property="allow-negative">
        <source-position filename="src/swipe-away-bin.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SwipeAwayBin" c:type="PhoshSwipeAwayBin*"/>
          </instance-parameter>
          <parameter name="allow_negative" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reserve_size"
              c:identifier="phosh_swipe_away_bin_set_reserve_size"
              glib:set-property="reserve-size">
        <source-position filename="src/swipe-away-bin.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SwipeAwayBin" c:type="PhoshSwipeAwayBin*"/>
          </instance-parameter>
          <parameter name="reserve_size" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="undo" c:identifier="phosh_swipe_away_bin_undo">
        <source-position filename="src/swipe-away-bin.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SwipeAwayBin" c:type="PhoshSwipeAwayBin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="allow-negative"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_negative"
                getter="get_allow_negative"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reserve-size"
                writable="1"
                transfer-ownership="none"
                setter="set_reserve_size"
                getter="get_reserve_size"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SwipeAwayBinClass"
            c:type="PhoshSwipeAwayBinClass"
            glib:is-gtype-struct-for="SwipeAwayBin">
      <source-position filename="src/swipe-away-bin.h" line="14"/>
      <field name="parent_class">
        <type name="Gtk.EventBoxClass" c:type="GtkEventBoxClass"/>
      </field>
    </record>
    <class name="SystemModal"
           c:symbol-prefix="system_modal"
           c:type="PhoshSystemModal"
           parent="LayerSurface"
           glib:type-name="PhoshSystemModal"
           glib:get-type="phosh_system_modal_get_type"
           glib:type-struct="SystemModalClass">
      <doc xml:space="preserve"
           filename="src/system-modal.c"
           line="16">A modal system component

The #PhoshSystemModal is used as a base class for other
system components such as dialogs like #PhoshSystemPrompt or
the OSD display.</doc>
      <source-position filename="src/system-modal.h" line="23"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_system_modal_new">
        <doc xml:space="preserve"
             filename="src/system-modal.c"
             line="188">Create a new system-modal surface.</doc>
        <source-position filename="src/system-modal.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/system-modal.c"
                 line="190">The #PhoshMonitor to put the modal surface on. If %NULL the primary monitor is used.</doc>
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="monitor"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Monitor"/>
      </property>
      <field name="parent_instance">
        <type name="LayerSurface" c:type="PhoshLayerSurface"/>
      </field>
    </class>
    <record name="SystemModalClass"
            c:type="PhoshSystemModalClass"
            glib:is-gtype-struct-for="SystemModal">
      <source-position filename="src/system-modal.h" line="23"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/system-modal.h"
             line="19">The parent class</doc>
        <type name="LayerSurfaceClass" c:type="PhoshLayerSurfaceClass"/>
      </field>
    </record>
    <class name="SystemModalDialog"
           c:symbol-prefix="system_modal_dialog"
           c:type="PhoshSystemModalDialog"
           parent="SystemModal"
           glib:type-name="PhoshSystemModalDialog"
           glib:get-type="phosh_system_modal_dialog_get_type"
           glib:type-struct="SystemModalDialogClass">
      <doc xml:space="preserve"
           filename="src/system-modal-dialog.c"
           line="21">A modal system dialog

The #PhoshSystemModalDialog is used as a base class for system modal dialogs
such as #PhoshSystemPrompt or #PhoshNetworkAuthPrompt. It consists of a title
at the top, a content widget below that and button are at the bottom.
The content widget can be set via #phosh_system_modal_dialog_set_content() and buttons
to the button area added via #phosh_system_modal_dialog_add_button().

# CSS Style classes

A system modal dialog uses several style classes for consistent layout:
".phosh-system-modal-dialog" for the whole dialog area,
".phosh-system-modal-dialog-title" for the dialog title,
".phosh-system-modal-dialog-content" for the content area and
".phosh-system-modal-dialog-buttons" for the button area.

# PhoshSystemModalDialog as #GtkBuildable

The content widget and buttons can be specified using type
&amp;lt;phosh-dialog-content&amp;gt; and &amp;lt;phosh-dialog-button&amp;gt; type attributes:

|[
&lt;object class="PhoshSystemModalDialog"/&gt;
  &lt;child type="phosh-dialog-content"&gt;
    &lt;object class="GtkBox"&gt;
      &lt;property name="visible"&gt;True&lt;/property&gt;
      &lt;property name="orientation"&gt;vertical&lt;/property&gt;
      &lt;child&gt;
        ...
      &lt;/child&gt;
    &lt;/object&gt;
  &lt;/child&gt;
  &lt;child type="phosh-dialog-button"&gt;
    &lt;object class="GtkButton"&gt;
      &lt;property name="label"&gt;Ok&lt;/property&gt;
      ...
    &lt;/object&gt;
  &lt;/child&gt;
  &lt;child type="phosh-dialog-button"&gt;
    &lt;object class="GtkButton"&gt;
      &lt;property name="label"&gt;Cancel&lt;/property&gt;
      ...
    &lt;/object&gt;
  &lt;/child&gt;
&lt;/object&gt;
]|</doc>
      <source-position filename="src/system-modal-dialog.h" line="23"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_system_modal_dialog_new">
        <doc xml:space="preserve"
             filename="src/system-modal-dialog.c"
             line="273">Create a new system-modal dialog.</doc>
        <source-position filename="src/system-modal-dialog.h" line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/system-modal-dialog.c"
               line="278">A new system modal dialog</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_button"
              c:identifier="phosh_system_modal_dialog_add_button">
        <doc xml:space="preserve"
             filename="src/system-modal-dialog.c"
             line="312">Adds the given button to the dialog's content area at the given position. If
the posiion is `-1` the button is appended at the end.</doc>
        <source-position filename="src/system-modal-dialog.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/system-modal-dialog.c"
                 line="314">The #PhoshSystemModalDialog</doc>
            <type name="SystemModalDialog" c:type="PhoshSystemModalDialog*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/system-modal-dialog.c"
                 line="315">The button for the dialog's button area</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/system-modal-dialog.c"
                 line="316">The buttons position in the box or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="phosh_system_modal_dialog_close">
        <doc xml:space="preserve"
             filename="src/system-modal-dialog.c"
             line="406">Hides the dialog and destroys it. When the compositor supports it
uses an animation. If you want to destroy the dialog directly use
`gtk_widget_destroy()`.</doc>
        <source-position filename="src/system-modal-dialog.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/system-modal-dialog.c"
                 line="408">The dialog to close</doc>
            <type name="SystemModalDialog" c:type="PhoshSystemModalDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_buttons"
              c:identifier="phosh_system_modal_dialog_get_buttons">
        <doc xml:space="preserve"
             filename="src/system-modal-dialog.c"
             line="349">Get the dialog's buttons</doc>
        <source-position filename="src/system-modal-dialog.h" line="31"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/system-modal-dialog.c"
               line="355">The buttons</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Gtk.Widget"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/system-modal-dialog.c"
                 line="351">A modal dialog</doc>
            <type name="SystemModalDialog" c:type="PhoshSystemModalDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_button"
              c:identifier="phosh_system_modal_dialog_remove_button">
        <source-position filename="src/system-modal-dialog.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SystemModalDialog" c:type="PhoshSystemModalDialog*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_content"
              c:identifier="phosh_system_modal_dialog_set_content">
        <doc xml:space="preserve"
             filename="src/system-modal-dialog.c"
             line="287">Adds the given widget as the dialog's content area. It is a programming error
to set the content more than once.</doc>
        <source-position filename="src/system-modal-dialog.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/system-modal-dialog.c"
                 line="289">The #PhoshSystemModalDialog</doc>
            <type name="SystemModalDialog" c:type="PhoshSystemModalDialog*"/>
          </instance-parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/system-modal-dialog.c"
                 line="290">The widget for the dialog's content area</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="phosh_system_modal_dialog_set_title"
              glib:set-property="title">
        <source-position filename="src/system-modal-dialog.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SystemModalDialog" c:type="PhoshSystemModalDialog*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/system-modal-dialog.c"
             line="193">The dialog's title</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="SystemModal" c:type="PhoshSystemModal"/>
      </field>
      <glib:signal name="dialog-canceled" when="last">
        <doc xml:space="preserve"
             filename="src/system-modal-dialog.c"
             line="205">The ::dialog-canceled signal is emitted when the dialog was canceled and should be
hidden or destroyed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SystemModalDialogClass"
            c:type="PhoshSystemModalDialogClass"
            glib:is-gtype-struct-for="SystemModalDialog">
      <source-position filename="src/system-modal-dialog.h" line="23"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/system-modal-dialog.h"
             line="19">The parent class</doc>
        <type name="SystemModalClass" c:type="PhoshSystemModalClass"/>
      </field>
    </record>
    <class name="SystemPrompt"
           c:symbol-prefix="system_prompt"
           c:type="PhoshSystemPrompt"
           parent="SystemModalDialog"
           glib:type-name="PhoshSystemPrompt"
           glib:get-type="phosh_system_prompt_get_type"
           glib:type-struct="SystemPromptClass">
      <doc xml:space="preserve"
           filename="src/system-prompt.c"
           line="24">A modal system prompt

The #PhoshSystemPrompt is used to ask for PINs and passwords</doc>
      <source-position filename="src/system-prompt.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gcr.Prompt"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_system_prompt_new">
        <source-position filename="src/system-prompt.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="choice-visible"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/system-prompt.c"
             line="666">Whether the choice check box is visible or not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="confirm-visible"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="password-visible"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="warning-visible"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/system-prompt.c"
             line="657">Whether the warning label is visible or not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="SystemPromptClass"
            c:type="PhoshSystemPromptClass"
            glib:is-gtype-struct-for="SystemPrompt">
      <source-position filename="src/system-prompt.h" line="16"/>
      <field name="parent_class">
        <type name="SystemModalDialogClass"
              c:type="PhoshSystemModalDialogClass"/>
      </field>
    </record>
    <constant name="TOP_BAR_HEIGHT" value="32" c:type="PHOSH_TOP_BAR_HEIGHT">
      <source-position filename="src/top-panel.h" line="15"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="TOP_BAR_MIN_PADDING"
              value="9"
              c:type="PHOSH_TOP_BAR_MIN_PADDING">
      <source-position filename="src/top-panel.h" line="17"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Thumbnail"
           c:symbol-prefix="thumbnail"
           c:type="PhoshThumbnail"
           parent="GObject.Object"
           glib:type-name="PhoshThumbnail"
           glib:get-type="phosh_thumbnail_get_type"
           glib:type-struct="ThumbnailClass">
      <doc xml:space="preserve"
           filename="src/thumbnail.c"
           line="13">An abstract class representing a thumbnail image.</doc>
      <source-position filename="src/thumbnail.h" line="34"/>
      <virtual-method name="get_image" invoker="get_image">
        <doc xml:space="preserve"
             filename="src/thumbnail.h"
             line="22">Get the current image data</doc>
        <source-position filename="src/thumbnail.h" line="30"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="void*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Thumbnail" c:type="PhoshThumbnail*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size">
        <doc xml:space="preserve"
             filename="src/thumbnail.h"
             line="23">get current image size and stride</doc>
        <source-position filename="src/thumbnail.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Thumbnail" c:type="PhoshThumbnail*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_ready" invoker="is_ready">
        <doc xml:space="preserve"
             filename="src/thumbnail.h"
             line="24">whether the image is ready to be fetched</doc>
        <source-position filename="src/thumbnail.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Thumbnail" c:type="PhoshThumbnail*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_ready">
        <doc xml:space="preserve"
             filename="src/thumbnail.h"
             line="25">Set image as ready. Must chain up.</doc>
        <source-position filename="src/thumbnail.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Thumbnail" c:type="PhoshThumbnail*"/>
          </instance-parameter>
          <parameter name="ready" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_image" c:identifier="phosh_thumbnail_get_image">
        <source-position filename="src/thumbnail.h" line="36"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="void*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Thumbnail" c:type="PhoshThumbnail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="phosh_thumbnail_get_size">
        <source-position filename="src/thumbnail.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Thumbnail" c:type="PhoshThumbnail*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_ready"
              c:identifier="phosh_thumbnail_is_ready"
              glib:get-property="ready">
        <source-position filename="src/thumbnail.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Thumbnail" c:type="PhoshThumbnail*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="ready"
                transfer-ownership="none"
                getter="is_ready"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/thumbnail.c"
             line="108">Whether the image data is ready to be used</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ThumbnailClass"
            c:type="PhoshThumbnailClass"
            glib:is-gtype-struct-for="Thumbnail">
      <source-position filename="src/thumbnail.h" line="34"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/thumbnail.h"
             line="21">the parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_image">
        <doc xml:space="preserve"
             filename="src/thumbnail.h"
             line="22">Get the current image data</doc>
        <callback name="get_image">
          <source-position filename="src/thumbnail.h" line="30"/>
          <return-value transfer-ownership="none" nullable="1">
            <type name="gpointer" c:type="void*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Thumbnail" c:type="PhoshThumbnail*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <doc xml:space="preserve"
             filename="src/thumbnail.h"
             line="23">get current image size and stride</doc>
        <callback name="get_size">
          <source-position filename="src/thumbnail.h" line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Thumbnail" c:type="PhoshThumbnail*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
            <parameter name="stride" transfer-ownership="none">
              <type name="guint" c:type="guint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_ready">
        <doc xml:space="preserve"
             filename="src/thumbnail.h"
             line="24">whether the image is ready to be fetched</doc>
        <callback name="is_ready">
          <source-position filename="src/thumbnail.h" line="32"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Thumbnail" c:type="PhoshThumbnail*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_ready">
        <doc xml:space="preserve"
             filename="src/thumbnail.h"
             line="25">Set image as ready. Must chain up.</doc>
        <callback name="set_ready">
          <source-position filename="src/thumbnail.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Thumbnail" c:type="PhoshThumbnail*"/>
            </parameter>
            <parameter name="ready" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TimestampLabel"
           c:symbol-prefix="timestamp_label"
           c:type="PhoshTimestampLabel"
           parent="Gtk.Label"
           glib:type-name="PhoshTimestampLabel"
           glib:get-type="phosh_timestamp_label_get_type"
           glib:type-struct="TimestampLabelClass">
      <doc xml:space="preserve"
           filename="src/notifications/timestamp-label.c"
           line="14">A simple way of displaying a time difference

The #PhoshTimestampLabel is used to display the time difference between
the timestamp stored in the #PhoshTimestampLabel and the current time.</doc>
      <source-position filename="src/notifications/timestamp-label.h"
                       line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_timestamp_label_new">
        <source-position filename="src/notifications/timestamp-label.h"
                         line="18"/>
        <return-value transfer-ownership="none">
          <type name="TimestampLabel" c:type="PhoshTimestampLabel*"/>
        </return-value>
      </constructor>
      <method name="get_timestamp"
              c:identifier="phosh_timestamp_label_get_timestamp"
              glib:get-property="timestamp">
        <source-position filename="src/notifications/timestamp-label.h"
                         line="21"/>
        <return-value transfer-ownership="full">
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TimestampLabel" c:type="PhoshTimestampLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_timestamp"
              c:identifier="phosh_timestamp_label_set_timestamp"
              glib:set-property="timestamp">
        <source-position filename="src/notifications/timestamp-label.h"
                         line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TimestampLabel" c:type="PhoshTimestampLabel*"/>
          </instance-parameter>
          <parameter name="date" transfer-ownership="none">
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <property name="timestamp"
                writable="1"
                transfer-ownership="none"
                setter="set_timestamp"
                getter="get_timestamp">
        <type name="GLib.DateTime"/>
      </property>
    </class>
    <record name="TimestampLabelClass"
            c:type="PhoshTimestampLabelClass"
            glib:is-gtype-struct-for="TimestampLabel">
      <source-position filename="src/notifications/timestamp-label.h"
                       line="16"/>
      <field name="parent_class">
        <type name="Gtk.LabelClass" c:type="GtkLabelClass"/>
      </field>
    </record>
    <class name="TopPanel"
           c:symbol-prefix="top_panel"
           c:type="PhoshTopPanel"
           parent="DragSurface"
           glib:type-name="PhoshTopPanel"
           glib:get-type="phosh_top_panel_get_type"
           glib:type-struct="TopPanelClass">
      <doc xml:space="preserve"
           filename="src/top-panel.c"
           line="36">The top panel

The top panel containing the top-bar (clock and status indicators) and, when activated
unfolds the #PhoshSettings.</doc>
      <source-position filename="src/top-panel.h" line="13"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_top_panel_new">
        <source-position filename="src/top-panel.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="layer_shell"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="zwlr_layer_shell_v1*"/>
          </parameter>
          <parameter name="layer_shell_effects"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="zphoc_layer_shell_effects_v1*"/>
          </parameter>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Monitor" c:type="PhoshMonitor*"/>
          </parameter>
          <parameter name="layer" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="fold" c:identifier="phosh_top_panel_fold">
        <source-position filename="src/top-panel.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TopPanel" c:type="PhoshTopPanel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="phosh_top_panel_get_state"
              glib:get-property="state">
        <source-position filename="src/top-panel.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="TopPanelState" c:type="PhoshTopPanelState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TopPanel" c:type="PhoshTopPanel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="toggle_fold" c:identifier="phosh_top_panel_toggle_fold">
        <source-position filename="src/top-panel.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TopPanel" c:type="PhoshTopPanel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unfold" c:identifier="phosh_top_panel_unfold">
        <source-position filename="src/top-panel.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TopPanel" c:type="PhoshTopPanel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="on-lockscreen"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/top-panel.c"
             line="703">Whether top-panel is shown on lockscreen (%TRUE) or in the unlocked shell
(%FALSE).

Consider this property to be read only. It's only r/w so we can
use a property binding with the [type@Shell]s "locked" property.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="state"
                transfer-ownership="none"
                getter="get_state"
                default-value="PHOSH_TOP_PANEL_STATE_UNFOLDED">
        <doc xml:space="preserve"
             filename="src/top-panel.c"
             line="690">Whether the top-panel is currently `folded` (only top-bar is
visible) or `unfolded` (settings and notification area are
visible). The property is updated when the widget reaches its
target state.</doc>
        <type name="TopPanelState"/>
      </property>
      <glib:signal name="activated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TopPanelClass"
            c:type="PhoshTopPanelClass"
            glib:is-gtype-struct-for="TopPanel">
      <source-position filename="src/top-panel.h" line="13"/>
      <field name="parent_class">
        <type name="DragSurfaceClass" c:type="PhoshDragSurfaceClass"/>
      </field>
    </record>
    <enumeration name="TopPanelState"
                 glib:type-name="PhoshTopPanelState"
                 glib:get-type="phosh_top_panel_state_get_type"
                 c:type="PhoshTopPanelState">
      <member name="folded"
              value="0"
              c:identifier="PHOSH_TOP_PANEL_STATE_FOLDED"
              glib:nick="folded"
              glib:name="PHOSH_TOP_PANEL_STATE_FOLDED">
        <doc xml:space="preserve"
             filename="src/top-panel.h"
             line="21">Only top-bar is visible</doc>
      </member>
      <member name="unfolded"
              value="1"
              c:identifier="PHOSH_TOP_PANEL_STATE_UNFOLDED"
              glib:nick="unfolded"
              glib:name="PHOSH_TOP_PANEL_STATE_UNFOLDED">
        <doc xml:space="preserve"
             filename="src/top-panel.h"
             line="22">Settings menu is unfolded</doc>
      </member>
    </enumeration>
    <class name="Toplevel"
           c:symbol-prefix="toplevel"
           c:type="PhoshToplevel"
           parent="GObject.Object"
           glib:type-name="PhoshToplevel"
           glib:get-type="phosh_toplevel_get_type"
           glib:type-struct="ToplevelClass">
      <doc xml:space="preserve"
           filename="src/toplevel.c"
           line="18">Represents a single toplevel surface.</doc>
      <source-position filename="src/toplevel.h" line="14"/>
      <constructor name="new_from_handle"
                   c:identifier="phosh_toplevel_new_from_handle">
        <source-position filename="src/toplevel.h" line="20"/>
        <return-value transfer-ownership="full">
          <type name="Toplevel" c:type="PhoshToplevel*"/>
        </return-value>
        <parameters>
          <parameter name="handle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="zwlr_foreign_toplevel_handle_v1*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="activate" c:identifier="phosh_toplevel_activate">
        <source-position filename="src/toplevel.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </instance-parameter>
          <parameter name="seat"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="wl_seat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="phosh_toplevel_close">
        <source-position filename="src/toplevel.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_id"
              c:identifier="phosh_toplevel_get_app_id"
              glib:get-property="app-id">
        <source-position filename="src/toplevel.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handle"
              c:identifier="phosh_toplevel_get_handle"
              glib:get-property="handle">
        <source-position filename="src/toplevel.h" line="23"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zwlr_foreign_toplevel_handle_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent_handle"
              c:identifier="phosh_toplevel_get_parent_handle">
        <source-position filename="src/toplevel.h" line="24"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zwlr_foreign_toplevel_handle_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="phosh_toplevel_get_title"
              glib:get-property="title">
        <source-position filename="src/toplevel.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_activated"
              c:identifier="phosh_toplevel_is_activated"
              glib:get-property="activated">
        <source-position filename="src/toplevel.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_configured"
              c:identifier="phosh_toplevel_is_configured"
              glib:get-property="configured">
        <source-position filename="src/toplevel.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_fullscreen"
              c:identifier="phosh_toplevel_is_fullscreen"
              glib:get-property="fullscreen">
        <source-position filename="src/toplevel.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_maximized"
              c:identifier="phosh_toplevel_is_maximized"
              glib:get-property="maximized">
        <source-position filename="src/toplevel.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="activated"
                transfer-ownership="none"
                getter="is_activated"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="app-id" transfer-ownership="none" getter="get_app_id">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="configured"
                transfer-ownership="none"
                getter="is_configured"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="fullscreen"
                transfer-ownership="none"
                getter="is_fullscreen"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_handle">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="maximized"
                transfer-ownership="none"
                getter="is_maximized"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title" transfer-ownership="none" getter="get_title">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="closed" when="last">
        <doc xml:space="preserve"
             filename="src/toplevel.c"
             line="354">Emitted when a toplevel has been closed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ToplevelClass"
            c:type="PhoshToplevelClass"
            glib:is-gtype-struct-for="Toplevel">
      <source-position filename="src/toplevel.h" line="14"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ToplevelManager"
           c:symbol-prefix="toplevel_manager"
           c:type="PhoshToplevelManager"
           parent="GObject.Object"
           glib:type-name="PhoshToplevelManager"
           glib:get-type="phosh_toplevel_manager_get_type"
           glib:type-struct="ToplevelManagerClass">
      <doc xml:space="preserve"
           filename="src/toplevel-manager.c"
           line="21">Tracks and interacts with toplevel surfaces for window management
purposes using the wlr-foreign-toplevel-unstable-v1 wayland
protocol.</doc>
      <source-position filename="src/toplevel-manager.h" line="15"/>
      <constructor name="new" c:identifier="phosh_toplevel_manager_new">
        <source-position filename="src/toplevel-manager.h" line="21"/>
        <return-value transfer-ownership="full">
          <type name="ToplevelManager" c:type="PhoshToplevelManager*"/>
        </return-value>
      </constructor>
      <method name="get_num_toplevels"
              c:identifier="phosh_toplevel_manager_get_num_toplevels"
              glib:get-property="num-toplevels">
        <source-position filename="src/toplevel-manager.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ToplevelManager" c:type="PhoshToplevelManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="phosh_toplevel_manager_get_parent">
        <doc xml:space="preserve"
             filename="src/toplevel-manager.c"
             line="271">Gets the parent toplevel of a given toplevel</doc>
        <source-position filename="src/toplevel-manager.h" line="25"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/toplevel-manager.c"
               line="278">The toplevel</doc>
          <type name="Toplevel" c:type="PhoshToplevel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/toplevel-manager.c"
                 line="273">The toplevel manager</doc>
            <type name="ToplevelManager" c:type="PhoshToplevelManager*"/>
          </instance-parameter>
          <parameter name="toplevel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/toplevel-manager.c"
                 line="274">The toplevel to get the parent for</doc>
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_toplevel"
              c:identifier="phosh_toplevel_manager_get_toplevel">
        <doc xml:space="preserve"
             filename="src/toplevel-manager.c"
             line="242">Get the nth toplevel in the list of toplevels</doc>
        <source-position filename="src/toplevel-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/toplevel-manager.c"
               line="248">The toplevel</doc>
          <type name="Toplevel" c:type="PhoshToplevel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/toplevel-manager.c"
                 line="244">The toplevel manager</doc>
            <type name="ToplevelManager" c:type="PhoshToplevelManager*"/>
          </instance-parameter>
          <parameter name="num" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="num-toplevels"
                transfer-ownership="none"
                getter="get_num_toplevels"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <glib:signal name="toplevel-added" when="last">
        <doc xml:space="preserve"
             filename="src/toplevel-manager.c"
             line="190">Emitted whenever a toplevel has been added to the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="toplevel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/toplevel-manager.c"
                 line="193">The #PhoshToplevel being added to the list.</doc>
            <type name="Toplevel"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="toplevel-changed" when="last">
        <doc xml:space="preserve"
             filename="src/toplevel-manager.c"
             line="201">Emitted whenever a toplevel has changed properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="toplevel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/toplevel-manager.c"
                 line="204">The #PhoshToplevel that changed properties.</doc>
            <type name="Toplevel"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ToplevelManagerClass"
            c:type="PhoshToplevelManagerClass"
            glib:is-gtype-struct-for="ToplevelManager">
      <source-position filename="src/toplevel-manager.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ToplevelThumbnail"
           c:symbol-prefix="toplevel_thumbnail"
           c:type="PhoshToplevelThumbnail"
           parent="Thumbnail"
           glib:type-name="PhoshToplevelThumbnail"
           glib:get-type="phosh_toplevel_thumbnail_get_type"
           glib:type-struct="ToplevelThumbnailClass">
      <doc xml:space="preserve"
           filename="src/toplevel-thumbnail.c"
           line="21">Represents an image snapshot of PhoshToplevel obtained via phosh-private and wlr-screencopy Wayland protocols.</doc>
      <source-position filename="src/toplevel-thumbnail.h" line="16"/>
      <constructor name="new_from_toplevel"
                   c:identifier="phosh_toplevel_thumbnail_new_from_toplevel">
        <source-position filename="src/toplevel-thumbnail.h" line="22"/>
        <return-value transfer-ownership="full">
          <type name="ToplevelThumbnail" c:type="PhoshToplevelThumbnail*"/>
        </return-value>
        <parameters>
          <parameter name="toplevel" transfer-ownership="none">
            <type name="Toplevel" c:type="PhoshToplevel*"/>
          </parameter>
          <parameter name="max_width" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="max_height" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
    </class>
    <record name="ToplevelThumbnailClass"
            c:type="PhoshToplevelThumbnailClass"
            glib:is-gtype-struct-for="ToplevelThumbnail">
      <source-position filename="src/toplevel-thumbnail.h" line="16"/>
      <field name="parent_class">
        <type name="ThumbnailClass" c:type="PhoshThumbnailClass"/>
      </field>
    </record>
    <class name="TorchInfo"
           c:symbol-prefix="torch_info"
           c:type="PhoshTorchInfo"
           parent="StatusIcon"
           glib:type-name="PhoshTorchInfo"
           glib:get-type="phosh_torch_info_get_type"
           glib:type-struct="TorchInfoClass">
      <doc xml:space="preserve"
           filename="src/torch-info.c"
           line="17">A widget to display the torch status

#PhoshTorchInfo displays the current torch status based on information
from #PhoshTorchManager. To figure out if the widget should be shown
the #PhoshTorchInfo:enabled property can be useful.</doc>
      <source-position filename="src/torch-info.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_torch_info_new">
        <source-position filename="src/torch-info.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="enabled" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="present" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="TorchInfoClass"
            c:type="PhoshTorchInfoClass"
            glib:is-gtype-struct-for="TorchInfo">
      <source-position filename="src/torch-info.h" line="16"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <class name="TorchManager"
           c:symbol-prefix="torch_manager"
           c:type="PhoshTorchManager"
           parent="Manager"
           glib:type-name="PhoshTorchManager"
           glib:get-type="phosh_torch_manager_get_type"
           glib:type-struct="TorchManagerClass">
      <doc xml:space="preserve"
           filename="src/torch-manager.c"
           line="28">Interacts with torch via UPower

#PhoshTorchManager tracks the torch status and
allows to set the brightness.</doc>
      <source-position filename="src/torch-manager.h" line="17"/>
      <constructor name="new" c:identifier="phosh_torch_manager_new">
        <source-position filename="src/torch-manager.h" line="19"/>
        <return-value transfer-ownership="full">
          <type name="TorchManager" c:type="PhoshTorchManager*"/>
        </return-value>
      </constructor>
      <method name="get_brightness"
              c:identifier="phosh_torch_manager_get_brightness"
              glib:get-property="brightness">
        <source-position filename="src/torch-manager.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TorchManager" c:type="PhoshTorchManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_scale"
              c:identifier="phosh_torch_manager_get_can_scale"
              glib:get-property="can-scale">
        <source-position filename="src/torch-manager.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TorchManager" c:type="PhoshTorchManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="phosh_torch_manager_get_enabled"
              glib:get-property="enabled">
        <source-position filename="src/torch-manager.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TorchManager" c:type="PhoshTorchManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="phosh_torch_manager_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/torch-manager.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TorchManager" c:type="PhoshTorchManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_brightness"
              c:identifier="phosh_torch_manager_get_max_brightness">
        <source-position filename="src/torch-manager.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TorchManager" c:type="PhoshTorchManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_present"
              c:identifier="phosh_torch_manager_get_present"
              glib:get-property="present">
        <source-position filename="src/torch-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TorchManager" c:type="PhoshTorchManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scaled_brightness"
              c:identifier="phosh_torch_manager_get_scaled_brightness">
        <doc xml:space="preserve"
             filename="src/torch-manager.c"
             line="402">Gets the current brightness as fraction between 0 (off) and 1 (maximum brightness)</doc>
        <source-position filename="src/torch-manager.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/torch-manager.c"
                 line="404">The #PhoshTorchManager</doc>
            <type name="TorchManager" c:type="PhoshTorchManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_scaled_brightness"
              c:identifier="phosh_torch_manager_set_scaled_brightness">
        <doc xml:space="preserve"
             filename="src/torch-manager.c"
             line="416">Sets the current brightness as fraction between 0 (off) and 1 (maximum brightness)</doc>
        <source-position filename="src/torch-manager.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/torch-manager.c"
                 line="418">The #PhoshTorchManager</doc>
            <type name="TorchManager" c:type="PhoshTorchManager*"/>
          </instance-parameter>
          <parameter name="frac" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/torch-manager.c"
                 line="419">The brightness as fraction</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="toggle" c:identifier="phosh_torch_manager_toggle">
        <source-position filename="src/torch-manager.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TorchManager" c:type="PhoshTorchManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="brightness"
                transfer-ownership="none"
                getter="get_brightness"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/torch-manager.c"
             line="329">The brightness of torch</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="can-scale"
                transfer-ownership="none"
                getter="get_can_scale"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/torch-manager.c"
             line="318">Whether the brightness can be scaled</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enabled"
                transfer-ownership="none"
                getter="get_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/torch-manager.c"
             line="296">Whether torch is enabled</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="torch-disabled-symbolic">
        <doc xml:space="preserve"
             filename="src/torch-manager.c"
             line="287">The icon-name of torch</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="present"
                transfer-ownership="none"
                getter="get_present"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/torch-manager.c"
             line="307">Whether a torch is present</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="TorchManagerClass"
            c:type="PhoshTorchManagerClass"
            glib:is-gtype-struct-for="TorchManager">
      <source-position filename="src/torch-manager.h" line="17"/>
      <field name="parent_class">
        <type name="ManagerClass" c:type="PhoshManagerClass"/>
      </field>
    </record>
    <class name="VpnInfo"
           c:symbol-prefix="vpn_info"
           c:type="PhoshVpnInfo"
           parent="StatusIcon"
           glib:type-name="PhoshVpnInfo"
           glib:get-type="phosh_vpn_info_get_type"
           glib:type-struct="VpnInfoClass">
      <doc xml:space="preserve"
           filename="src/vpn-info.c"
           line="17">A widget to display the vpn status

#PhoshVpnInfo displays the current vpn status based on information
from #PhoshVpnManager. To figure out if the widget should be shown
the #PhoshVpnInfo:enabled property can be useful.</doc>
      <source-position filename="src/vpn-info.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_vpn_info_new">
        <source-position filename="src/vpn-info.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="enabled" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/vpn-info.c"
             line="212">Whether a VPN connection is enabled</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="present" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="VpnInfoClass"
            c:type="PhoshVpnInfoClass"
            glib:is-gtype-struct-for="VpnInfo">
      <source-position filename="src/vpn-info.h" line="16"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <class name="VpnManager"
           c:symbol-prefix="vpn_manager"
           c:type="PhoshVpnManager"
           parent="GObject.Object"
           glib:type-name="PhoshVpnManager"
           glib:get-type="phosh_vpn_manager_get_type"
           glib:type-struct="VpnManagerClass">
      <doc xml:space="preserve"
           filename="src/vpn-manager.c"
           line="18">Tracks the Vpn status and handle vpn credentials entry

Manages vpn information and state</doc>
      <source-position filename="src/vpn-manager.h" line="15"/>
      <constructor name="new" c:identifier="phosh_vpn_manager_new">
        <source-position filename="src/vpn-manager.h" line="17"/>
        <return-value transfer-ownership="full">
          <type name="VpnManager" c:type="PhoshVpnManager*"/>
        </return-value>
      </constructor>
      <method name="get_enabled"
              c:identifier="phosh_vpn_manager_get_enabled"
              glib:get-property="enabled">
        <source-position filename="src/vpn-manager.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VpnManager" c:type="PhoshVpnManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="phosh_vpn_manager_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/vpn-manager.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VpnManager" c:type="PhoshVpnManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_connection"
              c:identifier="phosh_vpn_manager_get_last_connection"
              glib:get-property="last-connection">
        <source-position filename="src/vpn-manager.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VpnManager" c:type="PhoshVpnManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_present"
              c:identifier="phosh_vpn_manager_get_present"
              glib:get-property="present">
        <source-position filename="src/vpn-manager.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VpnManager" c:type="PhoshVpnManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="toggle_last_connection"
              c:identifier="phosh_vpn_manager_toggle_last_connection">
        <source-position filename="src/vpn-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VpnManager" c:type="PhoshVpnManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="enabled"
                transfer-ownership="none"
                getter="get_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/vpn-manager.c"
             line="422">Whether a VPN connection is enabled</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/vpn-manager.c"
             line="413">The icon name to represent the current VPN status</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="last-connection"
                transfer-ownership="none"
                getter="get_last_connection"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/vpn-manager.c"
             line="440">The last activated connection</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="present"
                transfer-ownership="none"
                getter="get_present"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/vpn-manager.c"
             line="431">Whether there is at least one VPN connection configured</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="VpnManagerClass"
            c:type="PhoshVpnManagerClass"
            glib:is-gtype-struct-for="VpnManager">
      <source-position filename="src/vpn-manager.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="WWan"
               c:symbol-prefix="wwan"
               c:type="PhoshWWan"
               version="0.0.1"
               glib:type-name="PhoshWWan"
               glib:get-type="phosh_wwan_get_type"
               glib:type-struct="WWanInterface">
      <doc xml:space="preserve"
           filename="src/wwan/phosh-wwan-iface.c"
           line="14">Implementations of the `PhoshWWan` interface handle modem
interaction such as getting mobile network information and signal
strength.</doc>
      <source-position filename="src/wwan/phosh-wwan-iface.h" line="41"/>
      <prerequisite name="WWanManager"/>
      <virtual-method name="get_access_tec" invoker="get_access_tec">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="19">Get the current access technology (2G, 3G, ...)</doc>
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operator" invoker="get_operator">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="24">Get the current network operator name</doc>
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_signal_quality" invoker="get_signal_quality">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="18">Get the current signal quality</doc>
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="has_sim" invoker="has_sim">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="21">Whether there's a sim in the modem</doc>
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_enabled" invoker="is_enabled">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="23">whether a modem is enabled</doc>
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_present" invoker="is_present">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="22">whether a modem is present at all</doc>
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_unlocked" invoker="is_unlocked">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="20">whether the SIM in the modem is locked</doc>
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_access_tec"
              c:identifier="phosh_wwan_get_access_tec"
              glib:get-property="access-tec">
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operator"
              c:identifier="phosh_wwan_get_operator"
              glib:get-property="operator">
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signal_quality"
              c:identifier="phosh_wwan_get_signal_quality"
              glib:get-property="signal-quality">
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_data" c:identifier="phosh_wwan_has_data">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.c"
             line="222">Gets whether there's a data connection that could possibly be enabled.
It doesn't take into account whether the connection is enabled or not.</doc>
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wwan/phosh-wwan-iface.c"
               line="229">`TRUE` if there's a activatable data connection.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wwan/phosh-wwan-iface.c"
                 line="224">The wwan interface</doc>
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_sim" c:identifier="phosh_wwan_has_sim">
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_enabled"
              c:identifier="phosh_wwan_is_enabled"
              glib:get-property="enabled">
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_present"
              c:identifier="phosh_wwan_is_present"
              glib:get-property="present">
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_unlocked"
              c:identifier="phosh_wwan_is_unlocked"
              glib:get-property="unlocked">
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_data_enabled"
              c:identifier="phosh_wwan_set_data_enabled">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.c"
             line="204">Connect to or disconnect from mobile data.</doc>
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wwan/phosh-wwan-iface.c"
                 line="206">The wwan interface</doc>
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wwan/phosh-wwan-iface.c"
                 line="207">Whether to enable or disable the mobile data connection</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled" c:identifier="phosh_wwan_set_enabled">
        <source-position filename="src/wwan/phosh-wwan-iface.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWan" c:type="PhoshWWan*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="access-tec"
                transfer-ownership="none"
                getter="get_access_tec"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.c"
             line="39">The access-tec of the current modem</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="enabled"
                transfer-ownership="none"
                getter="is_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.c"
             line="79">Whether a modem is enabled</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="operator"
                transfer-ownership="none"
                getter="get_operator"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.c"
             line="89">The name of the operator of the current modem</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="present"
                transfer-ownership="none"
                getter="is_present"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.c"
             line="69">Whether a modem is prsent</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="signal-quality"
                transfer-ownership="none"
                getter="get_signal_quality"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.c"
             line="29">The signal quality of the current modem</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="sim" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.c"
             line="59">Whether the current modem has a sim card inserted</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="unlocked"
                transfer-ownership="none"
                getter="is_unlocked"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.c"
             line="49">Whether the current modem is unlocked</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </interface>
    <enumeration name="WWanBackend"
                 glib:type-name="PhoshWWanBackend"
                 glib:get-type="phosh_wwan_backend_get_type"
                 c:type="PhoshWWanBackend">
      <doc xml:space="preserve"
           filename="src/phosh-settings-enums.h"
           line="59">Which WWAN backend to use.</doc>
      <member name="modemmanager"
              value="0"
              c:identifier="PHOSH_WWAN_BACKEND_MM"
              glib:nick="modemmanager"
              glib:name="PHOSH_WWAN_BACKEND_MM">
        <doc xml:space="preserve"
             filename="src/phosh-settings-enums.h"
             line="61">Use ModemManager</doc>
      </member>
      <member name="ofono"
              value="1"
              c:identifier="PHOSH_WWAN_BACKEND_OFONO"
              glib:nick="ofono"
              glib:name="PHOSH_WWAN_BACKEND_OFONO">
        <doc xml:space="preserve"
             filename="src/phosh-settings-enums.h"
             line="62">Use oFono</doc>
      </member>
    </enumeration>
    <class name="WWanInfo"
           c:symbol-prefix="wwan_info"
           c:type="PhoshWWanInfo"
           parent="StatusIcon"
           glib:type-name="PhoshWWanInfo"
           glib:get-type="phosh_wwan_info_get_type"
           glib:type-struct="WWanInfoClass">
      <doc xml:space="preserve"
           filename="src/wwan-info.c"
           line="19">A widget to display the wwan status

A good indicator whether to show the icon is the
#PhoshWWanInfo:present property that indicates if
hardware is present.</doc>
      <source-position filename="src/wwan-info.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_wwan_info_new">
        <source-position filename="src/wwan-info.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_show_detail"
              c:identifier="phosh_wwan_info_get_show_detail"
              glib:get-property="show-detail">
        <source-position filename="src/wwan-info.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWanInfo" c:type="PhoshWWanInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_show_detail"
              c:identifier="phosh_wwan_info_set_show_detail"
              glib:set-property="show-detail">
        <source-position filename="src/wwan-info.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWanInfo" c:type="PhoshWWanInfo*"/>
          </instance-parameter>
          <parameter name="show" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wwan-info.c"
             line="308">Whether WWAN hardware is enabled</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="present" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wwan-info.c"
             line="298">Whether WWAN hardware is present</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-detail"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_show_detail"
                getter="get_show_detail"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="WWanInfoClass"
            c:type="PhoshWWanInfoClass"
            glib:is-gtype-struct-for="WWanInfo">
      <source-position filename="src/wwan-info.h" line="16"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <record name="WWanInterface"
            c:type="PhoshWWanInterface"
            glib:is-gtype-struct-for="WWan">
      <doc xml:space="preserve"
           filename="src/wwan/phosh-wwan-iface.h"
           line="15">The list of virtual functions for the `PhoshWWan` interface. Interface
are required to implement all virtual functions.</doc>
      <source-position filename="src/wwan/phosh-wwan-iface.h" line="41"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="17">The parent interface</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_signal_quality">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="18">Get the current signal quality</doc>
        <callback name="get_signal_quality">
          <source-position filename="src/wwan/phosh-wwan-iface.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WWan" c:type="PhoshWWan*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_access_tec">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="19">Get the current access technology (2G, 3G, ...)</doc>
        <callback name="get_access_tec">
          <source-position filename="src/wwan/phosh-wwan-iface.h" line="35"/>
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WWan" c:type="PhoshWWan*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_unlocked">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="20">whether the SIM in the modem is locked</doc>
        <callback name="is_unlocked">
          <source-position filename="src/wwan/phosh-wwan-iface.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WWan" c:type="PhoshWWan*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="has_sim">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="21">Whether there's a sim in the modem</doc>
        <callback name="has_sim">
          <source-position filename="src/wwan/phosh-wwan-iface.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WWan" c:type="PhoshWWan*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_present">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="22">whether a modem is present at all</doc>
        <callback name="is_present">
          <source-position filename="src/wwan/phosh-wwan-iface.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WWan" c:type="PhoshWWan*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_enabled">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="23">whether a modem is enabled</doc>
        <callback name="is_enabled">
          <source-position filename="src/wwan/phosh-wwan-iface.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WWan" c:type="PhoshWWan*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operator">
        <doc xml:space="preserve"
             filename="src/wwan/phosh-wwan-iface.h"
             line="24">Get the current network operator name</doc>
        <callback name="get_operator">
          <source-position filename="src/wwan/phosh-wwan-iface.h" line="40"/>
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WWan" c:type="PhoshWWan*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="WWanMM"
           c:symbol-prefix="wwan_mm"
           c:type="PhoshWWanMM"
           version="0.0.1"
           parent="WWanManager"
           glib:type-name="PhoshWWanMM"
           glib:get-type="phosh_wwan_mm_get_type"
           glib:type-struct="WWanMMClass">
      <doc xml:space="preserve"
           filename="src/wwan/phosh-wwan-mm.c"
           line="23">Implementation of the [iface@Phosh.WWan] interface for ModemManager</doc>
      <source-position filename="src/wwan/phosh-wwan-mm.h" line="16"/>
      <implements name="WWan"/>
      <constructor name="new" c:identifier="phosh_wwan_mm_new">
        <source-position filename="src/wwan/phosh-wwan-mm.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="WWanMM" c:type="PhoshWWanMM*"/>
        </return-value>
      </constructor>
    </class>
    <record name="WWanMMClass"
            c:type="PhoshWWanMMClass"
            glib:is-gtype-struct-for="WWanMM">
      <source-position filename="src/wwan/phosh-wwan-mm.h" line="16"/>
      <field name="parent_class">
        <type name="WWanManagerClass" c:type="PhoshWWanManagerClass"/>
      </field>
    </record>
    <class name="WWanManager"
           c:symbol-prefix="wwan_manager"
           c:type="PhoshWWanManager"
           parent="GObject.Object"
           glib:type-name="PhoshWWanManager"
           glib:get-type="phosh_wwan_manager_get_type"
           glib:type-struct="WWanManagerClass">
      <doc xml:space="preserve"
           filename="src/wwan/wwan-manager.c"
           line="32">Base class for `PhoshWWan` interface implementations

Common code for implementors of the #PhoshWWan interface covering
NetworkManager related bits for the mobile data connection.</doc>
      <source-position filename="src/wwan/wwan-manager.h" line="19"/>
      <constructor name="new" c:identifier="phosh_wwan_manager_new">
        <source-position filename="src/wwan/wwan-manager.h" line="21"/>
        <return-value transfer-ownership="full">
          <type name="WWanManager" c:type="PhoshWWanManager*"/>
        </return-value>
      </constructor>
      <method name="get_data_enabled"
              c:identifier="phosh_wwan_manager_get_data_enabled"
              glib:get-property="data-enabled">
        <doc xml:space="preserve"
             filename="src/wwan/wwan-manager.c"
             line="407">Get whether the mobile data connection is enabled.</doc>
        <source-position filename="src/wwan/wwan-manager.h" line="23"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wwan/wwan-manager.c"
               line="413">`TRUE` if a mobile data connection is enabled otherwise `FALSE`.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wwan/wwan-manager.c"
                 line="409">The wwan manager</doc>
            <type name="WWanManager" c:type="PhoshWWanManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_data"
              c:identifier="phosh_wwan_manager_has_data"
              glib:get-property="has-data">
        <doc xml:space="preserve"
             filename="src/wwan/wwan-manager.c"
             line="445">Gets whether there's a data connection that could possibly be enabled.
It doesn't take into account whether the connection is enabled or not.
See [method@WWanManager.get_data_enabled].</doc>
        <source-position filename="src/wwan/wwan-manager.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wwan/wwan-manager.c"
               line="453">`TRUE` if there's a activatable data connection.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wwan/wwan-manager.c"
                 line="447">The wwan manager</doc>
            <type name="WWanManager" c:type="PhoshWWanManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_data_enabled"
              c:identifier="phosh_wwan_manager_set_data_enabled">
        <doc xml:space="preserve"
             filename="src/wwan/wwan-manager.c"
             line="426">Connect to or disconnect from mobile data. When `enabled` is `TRUE`
connects the last active mobile data connection.</doc>
        <source-position filename="src/wwan/wwan-manager.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wwan/wwan-manager.c"
                 line="428">The wwan manager</doc>
            <type name="WWanManager" c:type="PhoshWWanManager*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wwan/wwan-manager.c"
                 line="429">Whether to enable or disable the mobile data connection</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled" c:identifier="phosh_wwan_manager_set_enabled">
        <source-position filename="src/wwan/wwan-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WWanManager" c:type="PhoshWWanManager*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="data-enabled"
                transfer-ownership="none"
                getter="get_data_enabled"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-data"
                transfer-ownership="none"
                getter="has_data"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="last-connection"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/wwan/wwan-manager.c"
             line="368">The last activated connection</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="WWanManagerClass"
            c:type="PhoshWWanManagerClass"
            glib:is-gtype-struct-for="WWanManager">
      <source-position filename="src/wwan/wwan-manager.h" line="19"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="WWanOfono"
           c:symbol-prefix="wwan_ofono"
           c:type="PhoshWWanOfono"
           version="0.4.5"
           parent="WWanManager"
           glib:type-name="PhoshWWanOfono"
           glib:get-type="phosh_wwan_ofono_get_type"
           glib:type-struct="WWanOfonoClass">
      <doc xml:space="preserve"
           filename="src/wwan/phosh-wwan-ofono.c"
           line="21">Implementation of the [iface@Phosh.WWan] interface for Ofono</doc>
      <source-position filename="src/wwan/phosh-wwan-ofono.h" line="16"/>
      <implements name="WWan"/>
      <constructor name="new" c:identifier="phosh_wwan_ofono_new">
        <source-position filename="src/wwan/phosh-wwan-ofono.h" line="18"/>
        <return-value transfer-ownership="full">
          <type name="WWanOfono" c:type="PhoshWWanOfono*"/>
        </return-value>
      </constructor>
    </class>
    <record name="WWanOfonoClass"
            c:type="PhoshWWanOfonoClass"
            glib:is-gtype-struct-for="WWanOfono">
      <source-position filename="src/wwan/phosh-wwan-ofono.h" line="16"/>
      <field name="parent_class">
        <type name="WWanManagerClass" c:type="PhoshWWanManagerClass"/>
      </field>
    </record>
    <class name="WallClock"
           c:symbol-prefix="wall_clock"
           c:type="PhoshWallClock"
           parent="GObject.Object"
           glib:type-name="PhoshWallClock"
           glib:get-type="phosh_wall_clock_get_type"
           glib:type-struct="WallClockClass">
      <doc xml:space="preserve"
           filename="src/wall-clock.c"
           line="20">Wall clock used for fetching date and time</doc>
      <source-position filename="src/wall-clock.h" line="27"/>
      <constructor name="new" c:identifier="phosh_wall_clock_new">
        <source-position filename="src/wall-clock.h" line="30"/>
        <return-value transfer-ownership="full">
          <type name="WallClock" c:type="PhoshWallClock*"/>
        </return-value>
      </constructor>
      <function name="get_default" c:identifier="phosh_wall_clock_get_default">
        <doc xml:space="preserve"
             filename="src/wall-clock.c"
             line="181">Get the wall clock singleton</doc>
        <source-position filename="src/wall-clock.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wall-clock.c"
               line="186">The wall clock singleton</doc>
          <type name="WallClock" c:type="PhoshWallClock*"/>
        </return-value>
      </function>
      <virtual-method name="get_clock" invoker="get_clock">
        <doc xml:space="preserve"
             filename="src/wall-clock.c"
             line="197">Gets the current clock string, if time_only is true this will be just the
current time, otherwise the date + time.</doc>
        <source-position filename="src/wall-clock.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wall-clock.c"
               line="205">the clock time string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wall-clock.c"
                 line="199">The wall clock</doc>
            <type name="WallClock" c:type="PhoshWallClock*"/>
          </instance-parameter>
          <parameter name="time_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wall-clock.c"
                 line="200">whether to return full clock string or just the time</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_t">
        <source-position filename="src/wall-clock.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WallClock" c:type="PhoshWallClock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_clock" c:identifier="phosh_wall_clock_get_clock">
        <doc xml:space="preserve"
             filename="src/wall-clock.c"
             line="197">Gets the current clock string, if time_only is true this will be just the
current time, otherwise the date + time.</doc>
        <source-position filename="src/wall-clock.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wall-clock.c"
               line="205">the clock time string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wall-clock.c"
                 line="199">The wall clock</doc>
            <type name="WallClock" c:type="PhoshWallClock*"/>
          </instance-parameter>
          <parameter name="time_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wall-clock.c"
                 line="200">whether to return full clock string or just the time</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="local_date" c:identifier="phosh_wall_clock_local_date">
        <doc xml:space="preserve"
             filename="src/wall-clock.c"
             line="244">Get the local date as string
We honor LC_MESSAGES so we e.g. don't get a translated date when
the user has LC_MESSAGES=en_US.UTF-8 but LC_TIME to their local
time zone.</doc>
        <source-position filename="src/wall-clock.h" line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/wall-clock.c"
               line="253">The local date as string</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wall-clock.c"
                 line="246">The wall clock</doc>
            <type name="WallClock" c:type="PhoshWallClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default" c:identifier="phosh_wall_clock_set_default">
        <doc xml:space="preserve"
             filename="src/wall-clock.c"
             line="163">Set the wall clock singleton. This sets the singleton returned by
`phosh_wall_clock_get_default()`.</doc>
        <source-position filename="src/wall-clock.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wall-clock.c"
                 line="165">The clock to use</doc>
            <type name="WallClock" c:type="PhoshWallClock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="string_for_datetime"
              c:identifier="phosh_wall_clock_string_for_datetime">
        <source-position filename="src/wall-clock.h" line="35"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WallClock" c:type="PhoshWallClock*"/>
          </instance-parameter>
          <parameter name="datetime" transfer-ownership="none">
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
          <parameter name="clock_format" transfer-ownership="none">
            <type name="GDesktopEnums.ClockFormat"
                  c:type="GDesktopClockFormat"/>
          </parameter>
          <parameter name="show_full_date" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="date-time"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="time" transfer-ownership="none" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="WallClockClass"
            c:type="PhoshWallClockClass"
            glib:is-gtype-struct-for="WallClock">
      <source-position filename="src/wall-clock.h" line="27"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_clock">
        <callback name="get_clock">
          <source-position filename="src/wall-clock.h" line="25"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wall-clock.c"
                 line="205">the clock time string</doc>
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/wall-clock.c"
                   line="199">The wall clock</doc>
              <type name="WallClock" c:type="PhoshWallClock*"/>
            </parameter>
            <parameter name="time_only" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/wall-clock.c"
                   line="200">whether to return full clock string or just the time</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_t">
        <callback name="get_time_t">
          <source-position filename="src/wall-clock.h" line="26"/>
          <return-value transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WallClock" c:type="PhoshWallClock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Wayland"
           c:symbol-prefix="wayland"
           c:type="PhoshWayland"
           parent="GObject.Object"
           glib:type-name="PhoshWayland"
           glib:get-type="phosh_wayland_get_type"
           glib:type-struct="WaylandClass">
      <doc xml:space="preserve"
           filename="src/phosh-wayland.c"
           line="17">A wayland registry listener

The #PhoshWayland singleton is responsible for listening to wayland
registry events registering the objects that show up there to make
them available to Phosh's other classes.</doc>
      <source-position filename="src/phosh-wayland.h" line="56"/>
      <function name="get_default" c:identifier="phosh_wayland_get_default">
        <doc xml:space="preserve"
             filename="src/phosh-wayland.c"
             line="403">Get the Wayland singleton for handling Wayland protocol
interactions</doc>
        <source-position filename="src/phosh-wayland.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/phosh-wayland.c"
               line="409">The Wayland singleton</doc>
          <type name="Wayland" c:type="PhoshWayland*"/>
        </return-value>
      </function>
      <method name="get_ext_idle_notifier_v1"
              c:identifier="phosh_wayland_get_ext_idle_notifier_v1">
        <source-position filename="src/phosh-wayland.h" line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="ext_idle_notifier_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phosh_private"
              c:identifier="phosh_wayland_get_phosh_private">
        <source-position filename="src/phosh-wayland.h" line="63"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="phosh_private*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phosh_private_version"
              c:identifier="phosh_wayland_get_phosh_private_version">
        <source-position filename="src/phosh-wayland.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="uint32_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seat_capabilities"
              c:identifier="phosh_wayland_get_seat_capabilities"
              glib:get-property="seat-capabilities">
        <source-position filename="src/phosh-wayland.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="WaylandSeatCapabilities"
                c:type="PhoshWaylandSeatCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wl_outputs"
              c:identifier="phosh_wayland_get_wl_outputs"
              glib:get-property="wl-outputs">
        <source-position filename="src/phosh-wayland.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/phosh-wayland.c"
               line="551">A list of outputs as a #GHashTable
keyed by the output's name with wl_output's as values.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/phosh-wayland.c"
                 line="549">The #PhoshWayland singleton</doc>
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wl_seat" c:identifier="phosh_wayland_get_wl_seat">
        <source-position filename="src/phosh-wayland.h" line="65"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="wl_seat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wl_shm" c:identifier="phosh_wayland_get_wl_shm">
        <source-position filename="src/phosh-wayland.h" line="66"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="wl_shm*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xdg_wm_base"
              c:identifier="phosh_wayland_get_xdg_wm_base">
        <source-position filename="src/phosh-wayland.h" line="67"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="xdg_wm_base*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zphoc_device_state_v1"
              c:identifier="phosh_wayland_get_zphoc_device_state_v1">
        <source-position filename="src/phosh-wayland.h" line="79"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zphoc_device_state_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zphoc_layer_shell_effects_v1"
              c:identifier="phosh_wayland_get_zphoc_layer_shell_effects_v1">
        <source-position filename="src/phosh-wayland.h" line="78"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zphoc_layer_shell_effects_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zwlr_foreign_toplevel_manager_v1"
              c:identifier="phosh_wayland_get_zwlr_foreign_toplevel_manager_v1">
        <source-position filename="src/phosh-wayland.h" line="68"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zwlr_foreign_toplevel_manager_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zwlr_gamma_control_manager_v1"
              c:identifier="phosh_wayland_get_zwlr_gamma_control_manager_v1">
        <source-position filename="src/phosh-wayland.h" line="70"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zwlr_gamma_control_manager_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zwlr_layer_shell_v1"
              c:identifier="phosh_wayland_get_zwlr_layer_shell_v1">
        <source-position filename="src/phosh-wayland.h" line="69"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zwlr_layer_shell_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zwlr_output_manager_v1"
              c:identifier="phosh_wayland_get_zwlr_output_manager_v1">
        <source-position filename="src/phosh-wayland.h" line="71"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zwlr_output_manager_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zwlr_output_power_manager_v1"
              c:identifier="phosh_wayland_get_zwlr_output_power_manager_v1">
        <source-position filename="src/phosh-wayland.h" line="72"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zwlr_output_power_manager_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zwlr_screencopy_manager_v1"
              c:identifier="phosh_wayland_get_zwlr_screencopy_manager_v1">
        <source-position filename="src/phosh-wayland.h" line="74"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zwlr_screencopy_manager_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zwp_virtual_keyboard_manager_v1"
              c:identifier="phosh_wayland_get_zwp_virtual_keyboard_manager_v1">
        <source-position filename="src/phosh-wayland.h" line="75"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zwp_virtual_keyboard_manager_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zxdg_output_manager_v1"
              c:identifier="phosh_wayland_get_zxdg_output_manager_v1">
        <source-position filename="src/phosh-wayland.h" line="73"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="zxdg_output_manager_v1*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_wl_output" c:identifier="phosh_wayland_has_wl_output">
        <source-position filename="src/phosh-wayland.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
          <parameter name="wl_output"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="wl_output*"/>
          </parameter>
        </parameters>
      </method>
      <method name="roundtrip" c:identifier="phosh_wayland_roundtrip">
        <source-position filename="src/phosh-wayland.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Wayland" c:type="PhoshWayland*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="seat-capabilities"
                transfer-ownership="none"
                getter="get_seat_capabilities"
                default-value="PHOSH_WAYLAND_SEAT_CAPABILITY_NONE">
        <type name="WaylandSeatCapabilities"/>
      </property>
      <property name="wl-outputs"
                transfer-ownership="none"
                getter="get_wl_outputs">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
    </class>
    <record name="WaylandClass"
            c:type="PhoshWaylandClass"
            glib:is-gtype-struct-for="Wayland">
      <source-position filename="src/phosh-wayland.h" line="56"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="WaylandSeatCapabilities"
              glib:type-name="PhoshWaylandSeatCapabilities"
              glib:get-type="phosh_wayland_seat_capabilities_get_type"
              c:type="PhoshWaylandSeatCapabilities">
      <doc xml:space="preserve"
           filename="src/phosh-wayland.h"
           line="32">These match wl_seat_capabilities</doc>
      <member name="none"
              value="0"
              c:identifier="PHOSH_WAYLAND_SEAT_CAPABILITY_NONE"
              glib:nick="none"
              glib:name="PHOSH_WAYLAND_SEAT_CAPABILITY_NONE">
        <doc xml:space="preserve"
             filename="src/phosh-wayland.h"
             line="34">no device detected</doc>
      </member>
      <member name="pointer"
              value="1"
              c:identifier="PHOSH_WAYLAND_SEAT_CAPABILITY_POINTER"
              glib:nick="pointer"
              glib:name="PHOSH_WAYLAND_SEAT_CAPABILITY_POINTER">
        <doc xml:space="preserve"
             filename="src/phosh-wayland.h"
             line="35">the seat has pointer devices</doc>
      </member>
      <member name="keyboard"
              value="2"
              c:identifier="PHOSH_WAYLAND_SEAT_CAPABILITY_KEYBOARD"
              glib:nick="keyboard"
              glib:name="PHOSH_WAYLAND_SEAT_CAPABILITY_KEYBOARD">
        <doc xml:space="preserve"
             filename="src/phosh-wayland.h"
             line="36">the seat has one or more keyboards</doc>
      </member>
      <member name="touch"
              value="4"
              c:identifier="PHOSH_WAYLAND_SEAT_CAPABILITY_TOUCH"
              glib:nick="touch"
              glib:name="PHOSH_WAYLAND_SEAT_CAPABILITY_TOUCH">
        <doc xml:space="preserve"
             filename="src/phosh-wayland.h"
             line="37">the seat has touch devices</doc>
      </member>
      <member name="tablet_mode_switch"
              value="256"
              c:identifier="PHOSH_WAYLAND_SEAT_CAPABILITY_TABLET_MODE_SWITCH"
              glib:nick="tablet-mode-switch"
              glib:name="PHOSH_WAYLAND_SEAT_CAPABILITY_TABLET_MODE_SWITCH">
        <doc xml:space="preserve"
             filename="src/phosh-wayland.h"
             line="38">the seat has a tablet mode switch</doc>
      </member>
      <member name="lid_switch"
              value="512"
              c:identifier="PHOSH_WAYLAND_SEAT_CAPABILITY_LID_SWITCH"
              glib:nick="lid-switch"
              glib:name="PHOSH_WAYLAND_SEAT_CAPABILITY_LID_SWITCH">
        <doc xml:space="preserve"
             filename="src/phosh-wayland.h"
             line="39">the seat has a lid switch</doc>
      </member>
    </bitfield>
    <class name="WidgetBox"
           c:symbol-prefix="widget_box"
           c:type="PhoshWidgetBox"
           parent="Gtk.Box"
           glib:type-name="PhoshWidgetBox"
           glib:get-type="phosh_widget_box_get_type"
           glib:type-struct="WidgetBoxClass">
      <doc xml:space="preserve"
           filename="src/widget-box.c"
           line="19">A box of widgets for the lock screen

The widget box is displayed on the lock screen
and displays a list of loadable widgets.</doc>
      <source-position filename="src/widget-box.h" line="15"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="phosh_widget_box_new">
        <source-position filename="src/widget-box.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="WidgetBox" c:type="PhoshWidgetBox*"/>
        </return-value>
        <parameters>
          <parameter name="plugin_dirs" transfer-ownership="none">
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="has_plugins" c:identifier="phosh_widget_box_has_plugins">
        <source-position filename="src/widget-box.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WidgetBox" c:type="PhoshWidgetBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_plugins"
              c:identifier="phosh_widget_box_set_plugins"
              glib:set-property="plugins">
        <source-position filename="src/widget-box.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WidgetBox" c:type="PhoshWidgetBox*"/>
          </instance-parameter>
          <parameter name="plugins" transfer-ownership="none">
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="plugin-dirs"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="plugins"
                writable="1"
                transfer-ownership="none"
                setter="set_plugins">
        <array>
          <type name="utf8"/>
        </array>
      </property>
    </class>
    <record name="WidgetBoxClass"
            c:type="PhoshWidgetBoxClass"
            glib:is-gtype-struct-for="WidgetBox">
      <source-position filename="src/widget-box.h" line="15"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="WifiInfo"
           c:symbol-prefix="wifi_info"
           c:type="PhoshWifiInfo"
           parent="StatusIcon"
           glib:type-name="PhoshWifiInfo"
           glib:get-type="phosh_wifi_info_get_type"
           glib:type-struct="WifiInfoClass">
      <doc xml:space="preserve"
           filename="src/wifi-info.c"
           line="18">A widget to display the Wi-Fi status

#PhoshWifiInfo displays the current Wi-Fi status based on information
from #PhoshWifiManager. To figure out if the widget should be shown
the #PhoshWifiInfo:enabled property can be useful.</doc>
      <source-position filename="src/wifi-info.h" line="16"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_wifi_info_new">
        <source-position filename="src/wifi-info.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <property name="enabled" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wifi-info.c"
             line="208">Whether a Wi-Fi device is enabled</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="present" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wifi-info.c"
             line="219">Whether a Wi-Fi hardware is present</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="WifiInfoClass"
            c:type="PhoshWifiInfoClass"
            glib:is-gtype-struct-for="WifiInfo">
      <source-position filename="src/wifi-info.h" line="16"/>
      <field name="parent_class">
        <type name="StatusIconClass" c:type="PhoshStatusIconClass"/>
      </field>
    </record>
    <class name="WifiManager"
           c:symbol-prefix="wifi_manager"
           c:type="PhoshWifiManager"
           parent="GObject.Object"
           glib:type-name="PhoshWifiManager"
           glib:get-type="phosh_wifi_manager_get_type"
           glib:type-struct="WifiManagerClass">
      <doc xml:space="preserve"
           filename="src/wifi-manager.c"
           line="17">Tracks the Wi-Fi status and handle Wi-Fi credentials entry

Manages Wi-Fi information and state

The code to create hotspot connection are based on GNOME Control Center's and NMCLI's code for
the same.</doc>
      <source-position filename="src/wifi-manager.h" line="18"/>
      <constructor name="new" c:identifier="phosh_wifi_manager_new">
        <source-position filename="src/wifi-manager.h" line="20"/>
        <return-value transfer-ownership="full">
          <type name="WifiManager" c:type="PhoshWifiManager*"/>
        </return-value>
      </constructor>
      <method name="connect_network"
              c:identifier="phosh_wifi_manager_connect_network">
        <source-position filename="src/wifi-manager.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
          <parameter name="network" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="phosh_wifi_manager_get_enabled"
              glib:get-property="enabled">
        <source-position filename="src/wifi-manager.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="phosh_wifi_manager_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/wifi-manager.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_networks"
              c:identifier="phosh_wifi_manager_get_networks"
              glib:get-property="networks">
        <doc xml:space="preserve"
             filename="src/wifi-manager.c"
             line="1258">Get the list store of known Wi-Fi networks.</doc>
        <source-position filename="src/wifi-manager.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wifi-manager.c"
               line="1264">The Wi-Fi networks</doc>
          <type name="Gio.ListStore" c:type="GListStore*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wifi-manager.c"
                 line="1260">The wifi manager</doc>
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_present"
              c:identifier="phosh_wifi_manager_get_present"
              glib:get-property="present">
        <source-position filename="src/wifi-manager.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssid"
              c:identifier="phosh_wifi_manager_get_ssid"
              glib:get-property="ssid">
        <source-position filename="src/wifi-manager.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="phosh_wifi_manager_get_state"
              glib:get-property="state">
        <source-position filename="src/wifi-manager.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="NM.ActiveConnectionState"
                c:type="NMActiveConnectionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_strength"
              c:identifier="phosh_wifi_manager_get_strength">
        <source-position filename="src/wifi-manager.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_hotspot_master"
              c:identifier="phosh_wifi_manager_is_hotspot_master"
              glib:get-property="is-hotspot-master">
        <doc xml:space="preserve"
             filename="src/wifi-manager.c"
             line="1228">Whether we're currently a hotspot master</doc>
        <source-position filename="src/wifi-manager.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wifi-manager.c"
               line="1233">%TRUE if hotspot master, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_scan"
              c:identifier="phosh_wifi_manager_request_scan">
        <source-position filename="src/wifi-manager.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled" c:identifier="phosh_wifi_manager_set_enabled">
        <source-position filename="src/wifi-manager.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hotspot_master"
              c:identifier="phosh_wifi_manager_set_hotspot_master">
        <source-position filename="src/wifi-manager.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiManager" c:type="PhoshWifiManager*"/>
          </instance-parameter>
          <parameter name="is_hotspot_master" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled"
                transfer-ownership="none"
                getter="get_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wifi-manager.c"
             line="1090">Whether Wi-Fi is enabled and a Wi-Fi device is available</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/wifi-manager.c"
             line="1072">The Wi-Fi icon name</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="is-hotspot-master"
                transfer-ownership="none"
                getter="is_hotspot_master"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="networks"
                transfer-ownership="none"
                getter="get_networks">
        <doc xml:space="preserve"
             filename="src/wifi-manager.c"
             line="1123">List of Wi-Fi networks</doc>
        <type name="Gio.ListStore"/>
      </property>
      <property name="present"
                transfer-ownership="none"
                getter="get_present"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wifi-manager.c"
             line="1101">Whether Wi-Fi hardware is present</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ssid"
                transfer-ownership="none"
                getter="get_ssid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/wifi-manager.c"
             line="1081">The Wi-Fi ssid, if connected</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state"
                transfer-ownership="none"
                getter="get_state"
                default-value="NM_ACTIVE_CONNECTION_STATE_UNKNOWN">
        <doc xml:space="preserve"
             filename="src/wifi-manager.c"
             line="1133">State of the active connection</doc>
        <type name="NM.ActiveConnectionState"/>
      </property>
    </class>
    <record name="WifiManagerClass"
            c:type="PhoshWifiManagerClass"
            glib:is-gtype-struct-for="WifiManager">
      <source-position filename="src/wifi-manager.h" line="18"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="WifiNetwork"
           c:symbol-prefix="wifi_network"
           c:type="PhoshWifiNetwork"
           parent="GObject.Object"
           glib:type-name="PhoshWifiNetwork"
           glib:get-type="phosh_wifi_network_get_type"
           glib:type-struct="WifiNetworkClass">
      <doc xml:space="preserve"
           filename="src/wifi-network.c"
           line="13">An object that represents a Wi-Fi network.

A network is identified by it's SSID and encryption type and mode</doc>
      <source-position filename="src/wifi-network.h" line="18"/>
      <constructor name="new_from_access_point"
                   c:identifier="phosh_wifi_network_new_from_access_point">
        <source-position filename="src/wifi-network.h" line="20"/>
        <return-value transfer-ownership="full">
          <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
        </return-value>
        <parameters>
          <parameter name="ap" transfer-ownership="none">
            <type name="NM.AccessPoint" c:type="NMAccessPoint*"/>
          </parameter>
          <parameter name="active" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_access_point"
              c:identifier="phosh_wifi_network_add_access_point">
        <source-position filename="src/wifi-network.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
          <parameter name="ap" transfer-ownership="none">
            <type name="NM.AccessPoint" c:type="NMAccessPoint*"/>
          </parameter>
          <parameter name="active" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="phosh_wifi_network_get_active"
              glib:get-property="active">
        <source-position filename="src/wifi-network.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_best_access_point"
              c:identifier="phosh_wifi_network_get_best_access_point"
              glib:get-property="best-access-point">
        <doc xml:space="preserve"
             filename="src/wifi-network.c"
             line="436">Get the AP with the greatest signal strength in the givein Wi-Fi network.</doc>
        <source-position filename="src/wifi-network.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wifi-network.c"
               line="442">The best access point</doc>
          <type name="NM.AccessPoint" c:type="NMAccessPoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wifi-network.c"
                 line="438">A wifi network</doc>
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_connecting"
              c:identifier="phosh_wifi_network_get_is_connecting"
              glib:get-property="is-connecting">
        <source-position filename="src/wifi-network.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="phosh_wifi_network_get_mode"
              glib:get-property="mode">
        <source-position filename="src/wifi-network.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="NM.80211Mode" c:type="NM80211Mode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secured"
              c:identifier="phosh_wifi_network_get_secured"
              glib:get-property="secured">
        <source-position filename="src/wifi-network.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssid"
              c:identifier="phosh_wifi_network_get_ssid"
              glib:get-property="ssid">
        <source-position filename="src/wifi-network.h" line="29"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_strength"
              c:identifier="phosh_wifi_network_get_strength"
              glib:get-property="strength">
        <source-position filename="src/wifi-network.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="matches_access_point"
              c:identifier="phosh_wifi_network_matches_access_point">
        <source-position filename="src/wifi-network.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
          <parameter name="ap" transfer-ownership="none">
            <type name="NM.AccessPoint" c:type="NMAccessPoint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_access_point"
              c:identifier="phosh_wifi_network_remove_access_point">
        <source-position filename="src/wifi-network.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
          <parameter name="ap" transfer-ownership="none">
            <type name="NM.AccessPoint" c:type="NMAccessPoint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_connecting"
              c:identifier="phosh_wifi_network_set_is_connecting"
              glib:set-property="is-connecting">
        <source-position filename="src/wifi-network.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
          <parameter name="is_connecting" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_active"
              c:identifier="phosh_wifi_network_update_active">
        <source-position filename="src/wifi-network.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </instance-parameter>
          <parameter name="active_ap" transfer-ownership="none">
            <type name="NM.AccessPoint" c:type="NMAccessPoint*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                transfer-ownership="none"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wifi-network.c"
             line="259">Whether the activated access point belongs to the network</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="best-access-point"
                transfer-ownership="none"
                getter="get_best_access_point">
        <doc xml:space="preserve"
             filename="src/wifi-network.c"
             line="283">The best access point of the network</doc>
        <type name="NM.AccessPoint"/>
      </property>
      <property name="is-connecting"
                writable="1"
                transfer-ownership="none"
                setter="set_is_connecting"
                getter="get_is_connecting"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wifi-network.c"
             line="271">Whether we are trying to connect to the network</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mode"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_mode"
                default-value="NM_802_11_MODE_UNKNOWN">
        <doc xml:space="preserve"
             filename="src/wifi-network.c"
             line="234">Mode of the network</doc>
        <type name="NM.80211Mode"/>
      </property>
      <property name="secured"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_secured"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/wifi-network.c"
             line="222">Whether the network is secured</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ssid"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_ssid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/wifi-network.c"
             line="210">SSID of the network</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="strength"
                transfer-ownership="none"
                getter="get_strength"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/wifi-network.c"
             line="247">Strength of the best access point of the network</doc>
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="WifiNetworkClass"
            c:type="PhoshWifiNetworkClass"
            glib:is-gtype-struct-for="WifiNetwork">
      <source-position filename="src/wifi-network.h" line="18"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="WifiNetworkRow"
           c:symbol-prefix="wifi_network_row"
           c:type="PhoshWifiNetworkRow"
           parent="Handy.ActionRow"
           glib:type-name="PhoshWifiNetworkRow"
           glib:get-type="phosh_wifi_network_row_get_type"
           glib:type-struct="WifiNetworkRowClass">
      <doc xml:space="preserve"
           filename="src/wifi-network-row.c"
           line="13">A widget to display a PhoshWifiNetwork.</doc>
      <source-position filename="src/wifi-network-row.h" line="17"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_wifi_network_row_new">
        <source-position filename="src/wifi-network-row.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="network" transfer-ownership="none">
            <type name="WifiNetwork" c:type="PhoshWifiNetwork*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="network"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/wifi-network-row.c"
             line="129">Network represented by the row</doc>
        <type name="WifiNetwork"/>
      </property>
    </class>
    <record name="WifiNetworkRowClass"
            c:type="PhoshWifiNetworkRowClass"
            glib:is-gtype-struct-for="WifiNetworkRow">
      <source-position filename="src/wifi-network-row.h" line="17"/>
      <field name="parent_class">
        <type name="Handy.ActionRowClass" c:type="HdyActionRowClass"/>
      </field>
    </record>
    <class name="WifiStatusPage"
           c:symbol-prefix="wifi_status_page"
           c:type="PhoshWifiStatusPage"
           parent="StatusPage"
           glib:type-name="PhoshWifiStatusPage"
           glib:get-type="phosh_wifi_status_page_get_type"
           glib:type-struct="WifiStatusPageClass">
      <doc xml:space="preserve"
           filename="src/wifi-status-page.c"
           line="16">A widget to display list of Wi-Fi access points when the corresponding PhoshQuickSetting is
activated.</doc>
      <source-position filename="src/wifi-status-page.h" line="14"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="phosh_wifi_status_page_new">
        <source-position filename="src/wifi-status-page.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="WifiStatusPageClass"
            c:type="PhoshWifiStatusPageClass"
            glib:is-gtype-struct-for="WifiStatusPage">
      <source-position filename="src/wifi-status-page.h" line="14"/>
      <field name="parent_class">
        <type name="StatusPageClass" c:type="PhoshStatusPageClass"/>
      </field>
    </record>
    <record name="WlBuffer" c:type="PhoshWlBuffer">
      <doc xml:space="preserve"
           filename="src/wl-buffer.h"
           line="15">A buffer received from the Wayland compositor containing image
data.</doc>
      <source-position filename="src/wl-buffer.h" line="32"/>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="src/wl-buffer.h"
             line="17">The actual data</doc>
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="width" writable="1">
        <doc xml:space="preserve"
             filename="src/wl-buffer.h"
             line="18">The buffer width in pixels</doc>
        <type name="guint32" c:type="uint32_t"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve"
             filename="src/wl-buffer.h"
             line="19">The buffer height in pixels</doc>
        <type name="guint32" c:type="uint32_t"/>
      </field>
      <field name="stride" writable="1">
        <doc xml:space="preserve"
             filename="src/wl-buffer.h"
             line="20">The buffer stride in bytes</doc>
        <type name="guint32" c:type="uint32_t"/>
      </field>
      <field name="format" writable="1">
        <doc xml:space="preserve"
             filename="src/wl-buffer.h"
             line="21">The buffer format</doc>
        <type name="gpointer" c:type="wl_shm_format"/>
      </field>
      <field name="wl_buffer" writable="1">
        <type name="gpointer" c:type="wl_buffer*"/>
      </field>
      <method name="destroy" c:identifier="phosh_wl_buffer_destroy">
        <doc xml:space="preserve"
             filename="src/wl-buffer.c"
             line="75">Invokes `munmap` on the data and frees associated memory and data
structures.</doc>
        <source-position filename="src/wl-buffer.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wl-buffer.c"
                 line="77">The #PhoshWlBuffer</doc>
            <type name="WlBuffer" c:type="PhoshWlBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bytes" c:identifier="phosh_wl_buffer_get_bytes">
        <doc xml:space="preserve"
             filename="src/wl-buffer.c"
             line="107">Get a copy of the buffer data.</doc>
        <source-position filename="src/wl-buffer.h" line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/wl-buffer.c"
               line="113">A copy of data as #GBytes</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wl-buffer.c"
                 line="109">The #PhoshWlBuffer</doc>
            <type name="WlBuffer" c:type="PhoshWlBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size" c:identifier="phosh_wl_buffer_get_size">
        <doc xml:space="preserve"
             filename="src/wl-buffer.c"
             line="95">Get the size of the buffer in bytes.</doc>
        <source-position filename="src/wl-buffer.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wl-buffer.c"
                 line="97">The #PhoshWlBuffer</doc>
            <type name="WlBuffer" c:type="PhoshWlBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="phosh_wl_buffer_new"
                introspectable="0">
        <doc xml:space="preserve"
             filename="src/wl-buffer.c"
             line="22">Creates a new memory buffer to be shared with the Wayland compositor.</doc>
        <source-position filename="src/wl-buffer.h" line="34"/>
        <return-value>
          <doc xml:space="preserve"
               filename="src/wl-buffer.c"
               line="31">The new buffer</doc>
          <type name="WlBuffer" c:type="PhoshWlBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="format"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/wl-buffer.c"
                 line="24">The buffer format</doc>
            <type name="gpointer" c:type="wl_shm_format"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wl-buffer.c"
                 line="25">The buffer's width in pixels</doc>
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wl-buffer.c"
                 line="26">The buffer's height in lines</doc>
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/wl-buffer.c"
                 line="27">The buffer's stride in bytes</doc>
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <function-macro name="async_error_warn"
                    c:identifier="phosh_async_error_warn"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="193">Prints a warning when @err is 'real' error. If it merely represents
a canceled operation it just logs a debug message. This is useful
to avoid this common pattern in async callbacks.</doc>
      <source-position filename="src/util.h" line="13"/>
      <parameters>
        <parameter name="err">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="195">The error to check and print</doc>
        </parameter>
        <parameter name="...">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="196">Format string followed by parameters to insert
      into the format string (as with printf())</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="calls_dbus_calls_call_interface_info"
              c:identifier="phosh_calls_dbus_calls_call_interface_info"
              moved-to="CallsDBusCallsCall.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="506">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Calls-Call.top_of_page"&gt;org.gnome.Calls.Call&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="71"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="511">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="calls_dbus_calls_call_override_properties"
              c:identifier="phosh_calls_dbus_calls_call_override_properties"
              moved-to="CallsDBusCallsCall.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/calls-dbus.c"
           line="519">Overrides all #GObject properties in the #PhoshCallsDBusCallsCall interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/calls-dbus.h" line="72"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/calls-dbus.c"
             line="527">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="521">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-dbus.c"
               line="522">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="clear_fd" c:identifier="phosh_clear_fd" throws="1">
      <source-position filename="src/util.h" line="35"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="fd" transfer-ownership="none">
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="connect_feedback" c:identifier="phosh_connect_feedback">
      <doc xml:space="preserve"
           filename="src/feedback-manager.c"
           line="291">Installs "pressed" and "released" signal handlers
for haptic feedback.</doc>
      <source-position filename="src/feedback-manager.h" line="27"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/feedback-manager.c"
               line="293">The widget that should trigger feedback</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cp_widget_destroy" c:identifier="phosh_cp_widget_destroy">
      <source-position filename="src/util.h" line="19"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_shm_file" c:identifier="phosh_create_shm_file">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="308">Create a shared memory file of the given size.</doc>
      <source-position filename="src/util.h" line="30"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="314">a file descriptor on success or -1 on error.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="310">The file size</doc>
          <type name="off_t" c:type="off_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_color_interface_info"
              c:identifier="phosh_dbus_color_interface_info"
              moved-to="DBusColor.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-color-dbus.c"
           line="264">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Color.top_of_page"&gt;org.gnome.SettingsDaemon.Color&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/gsd-color-dbus.h" line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="269">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_color_override_properties"
              c:identifier="phosh_dbus_color_override_properties"
              moved-to="DBusColor.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-color-dbus.c"
           line="277">Overrides all #GObject properties in the #PhoshDBusColor interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/gsd-color-dbus.h" line="46"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-color-dbus.c"
             line="285">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="279">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-color-dbus.c"
               line="280">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_display_config_interface_info"
              c:identifier="phosh_dbus_display_config_interface_info"
              moved-to="DBusDisplayConfig.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-display-dbus.c"
           line="1263">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Mutter-DisplayConfig.top_of_page"&gt;org.gnome.Mutter.DisplayConfig&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-display-dbus.h" line="109"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1268">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_display_config_override_properties"
              c:identifier="phosh_dbus_display_config_override_properties"
              moved-to="DBusDisplayConfig.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-display-dbus.c"
           line="1276">Overrides all #GObject properties in the #PhoshDBusDisplayConfig interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-display-dbus.h" line="110"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-display-dbus.c"
             line="1284">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1278">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-display-dbus.c"
               line="1279">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_end_session_dialog_interface_info"
              c:identifier="phosh_dbus_end_session_dialog_interface_info"
              moved-to="DBusEndSessionDialog.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-end-session-dialog-dbus.c"
           line="467">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SessionManager-EndSessionDialog.top_of_page"&gt;org.gnome.SessionManager.EndSessionDialog&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="74"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="472">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_end_session_dialog_override_properties"
              c:identifier="phosh_dbus_end_session_dialog_override_properties"
              moved-to="DBusEndSessionDialog.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-end-session-dialog-dbus.c"
           line="480">Overrides all #GObject properties in the #PhoshDBusEndSessionDialog interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-end-session-dialog-dbus.h"
                       line="75"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-end-session-dialog-dbus.c"
             line="488">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="482">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-end-session-dialog-dbus.c"
               line="483">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_gnome_shell_interface_info"
              c:identifier="phosh_dbus_gnome_shell_interface_info"
              moved-to="DBusGnomeShell.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gnome-shell-dbus.c"
           line="836">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Shell.top_of_page"&gt;org.gnome.Shell&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h" line="88"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="841">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_gnome_shell_override_properties"
              c:identifier="phosh_dbus_gnome_shell_override_properties"
              moved-to="DBusGnomeShell.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gnome-shell-dbus.c"
           line="849">Overrides all #GObject properties in the #PhoshDBusGnomeShell interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-gnome-shell-dbus.h" line="89"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gnome-shell-dbus.c"
             line="857">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="851">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gnome-shell-dbus.c"
               line="852">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_hostname1_interface_info"
              c:identifier="phosh_dbus_hostname1_interface_info"
              moved-to="DBusHostname1.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/hostname1-dbus.c"
           line="249">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-hostname1.top_of_page"&gt;org.freedesktop.hostname1&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/hostname1-dbus.h" line="43"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="254">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_hostname1_override_properties"
              c:identifier="phosh_dbus_hostname1_override_properties"
              moved-to="DBusHostname1.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/hostname1-dbus.c"
           line="262">Overrides all #GObject properties in the #PhoshDBusHostname1 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/hostname1-dbus.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/hostname1-dbus.c"
             line="270">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="264">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/hostname1-dbus.c"
               line="265">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_impl_portal_access_interface_info"
              c:identifier="phosh_dbus_impl_portal_access_interface_info"
              moved-to="DBusImplPortalAccess.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="1342">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Access.top_of_page"&gt;org.freedesktop.impl.portal.Access&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="214"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1347">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_impl_portal_access_override_properties"
              c:identifier="phosh_dbus_impl_portal_access_override_properties"
              moved-to="DBusImplPortalAccess.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="1355">Overrides all #GObject properties in the #PhoshDBusImplPortalAccess interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="215"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="1363">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1357">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="1358">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_impl_portal_request_interface_info"
              c:identifier="phosh_dbus_impl_portal_request_interface_info"
              moved-to="DBusImplPortalRequest.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="348">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-impl-portal-Request.top_of_page"&gt;org.freedesktop.impl.portal.Request&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="353">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_impl_portal_request_override_properties"
              c:identifier="phosh_dbus_impl_portal_request_override_properties"
              moved-to="DBusImplPortalRequest.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/portal-dbus.c"
           line="361">Overrides all #GObject properties in the #PhoshDBusImplPortalRequest interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/portal-dbus.h" line="46"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/portal-dbus.c"
             line="369">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="363">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/portal-dbus.c"
               line="364">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_login_manager_interface_info"
              c:identifier="phosh_dbus_login_manager_interface_info"
              moved-to="DBusLoginManager.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/login1-manager-dbus.c"
           line="581">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-login1-Manager.top_of_page"&gt;org.freedesktop.login1.Manager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/login1-manager-dbus.h" line="65"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="586">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_login_manager_override_properties"
              c:identifier="phosh_dbus_login_manager_override_properties"
              moved-to="DBusLoginManager.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/login1-manager-dbus.c"
           line="594">Overrides all #GObject properties in the #PhoshDBusLoginManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/login1-manager-dbus.h" line="66"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/login1-manager-dbus.c"
             line="602">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="596">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-manager-dbus.c"
               line="597">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_login_session_interface_info"
              c:identifier="phosh_dbus_login_session_interface_info"
              moved-to="DBusLoginSession.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/login1-session-dbus.c"
           line="486">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-login1-Session.top_of_page"&gt;org.freedesktop.login1.Session&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/login1-session-dbus.h" line="65"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="491">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_login_session_override_properties"
              c:identifier="phosh_dbus_login_session_override_properties"
              moved-to="DBusLoginSession.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/login1-session-dbus.c"
           line="499">Overrides all #GObject properties in the #PhoshDBusLoginSession interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/login1-session-dbus.h" line="66"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/login1-session-dbus.c"
             line="507">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="501">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/login1-session-dbus.c"
               line="502">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_mount_operation_handler_interface_info"
              c:identifier="phosh_dbus_mount_operation_handler_interface_info"
              moved-to="DBusMountOperationHandler.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
           line="774">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-Gtk-MountOperationHandler.top_of_page"&gt;org.Gtk.MountOperationHandler&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="72"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="779">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_mount_operation_handler_override_properties"
              c:identifier="phosh_dbus_mount_operation_handler_override_properties"
              moved-to="DBusMountOperationHandler.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
           line="787">Overrides all #GObject properties in the #PhoshDBusMountOperationHandler interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-gtk-mountoperation-dbus.h"
                       line="73"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
             line="795">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="789">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-gtk-mountoperation-dbus.c"
               line="790">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_screen_saver_interface_info"
              c:identifier="phosh_dbus_screen_saver_interface_info"
              moved-to="DBusScreenSaver.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screen-saver-dbus.c"
           line="483">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-ScreenSaver.top_of_page"&gt;org.gnome.ScreenSaver&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="66"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="488">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_screen_saver_override_properties"
              c:identifier="phosh_dbus_screen_saver_override_properties"
              moved-to="DBusScreenSaver.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screen-saver-dbus.c"
           line="496">Overrides all #GObject properties in the #PhoshDBusScreenSaver interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-screen-saver-dbus.h"
                       line="67"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screen-saver-dbus.c"
             line="504">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="498">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screen-saver-dbus.c"
               line="499">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_screenshot_interface_info"
              c:identifier="phosh_dbus_screenshot_interface_info"
              moved-to="DBusScreenshot.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screenshot-dbus.c"
           line="948">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Shell-Screenshot.top_of_page"&gt;org.gnome.Shell.Screenshot&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="82"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="953">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_screenshot_override_properties"
              c:identifier="phosh_dbus_screenshot_override_properties"
              moved-to="DBusScreenshot.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-screenshot-dbus.c"
           line="961">Overrides all #GObject properties in the #PhoshDBusScreenshot interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-screenshot-dbus.h" line="83"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-screenshot-dbus.c"
             line="969">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="963">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-screenshot-dbus.c"
               line="964">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_sensor_proxy_compass_interface_info"
              c:identifier="phosh_dbus_sensor_proxy_compass_interface_info"
              moved-to="DBusSensorProxyCompass.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="2900">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-net-hadess-SensorProxy-Compass.top_of_page"&gt;net.hadess.SensorProxy.Compass&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="376"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2905">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_sensor_proxy_compass_override_properties"
              c:identifier="phosh_dbus_sensor_proxy_compass_override_properties"
              moved-to="DBusSensorProxyCompass.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="2913">Overrides all #GObject properties in the #PhoshDBusSensorProxyCompass interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="377"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="2921">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="2915">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="2916">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_sensor_proxy_interface_info"
              c:identifier="phosh_dbus_sensor_proxy_interface_info"
              moved-to="DBusSensorProxy.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="471">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-net-hadess-SensorProxy.top_of_page"&gt;net.hadess.SensorProxy&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="80"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="476">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_sensor_proxy_override_properties"
              c:identifier="phosh_dbus_sensor_proxy_override_properties"
              moved-to="DBusSensorProxy.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/iio-sensor-proxy-dbus.c"
           line="484">Overrides all #GObject properties in the #PhoshDBusSensorProxy interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/iio-sensor-proxy-dbus.h" line="81"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/iio-sensor-proxy-dbus.c"
             line="492">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="486">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/iio-sensor-proxy-dbus.c"
               line="487">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="dbus_service_error_warn"
                    c:identifier="phosh_dbus_service_error_warn"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="206">Prints a warning when @err is 'real' error. If it merely indicates
that the DBus service is not present at all it just logs a debug
message.</doc>
      <source-position filename="src/util.h" line="16"/>
      <parameters>
        <parameter name="err">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="208">The error to check and print</doc>
        </parameter>
        <parameter name="...">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="209">Format string followed by parameters to insert
      into the format string (as with printf())</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="dbus_session_manager_interface_info"
              c:identifier="phosh_dbus_session_manager_interface_info"
              moved-to="DBusSessionManager.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-dbus.c"
           line="824">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SessionManager.top_of_page"&gt;org.gnome.SessionManager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/gnome-session-dbus.h" line="94"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="829">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="dbus_session_manager_override_properties"
              c:identifier="phosh_dbus_session_manager_override_properties"
              moved-to="DBusSessionManager.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-dbus.c"
           line="837">Overrides all #GObject properties in the #PhoshDBusSessionManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/gnome-session-dbus.h" line="95"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-dbus.c"
             line="845">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="839">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-dbus.c"
               line="840">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="emergency_calls_interface_info"
              c:identifier="phosh_emergency_calls_interface_info"
              moved-to="EmergencyCalls.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/calls-emergency-dbus.c"
           line="408">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Calls-EmergencyCalls.top_of_page"&gt;org.gnome.Calls.EmergencyCalls&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="54"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="413">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="emergency_calls_override_properties"
              c:identifier="phosh_emergency_calls_override_properties"
              moved-to="EmergencyCalls.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/calls-emergency-dbus.c"
           line="421">Overrides all #GObject properties in the #PhoshEmergencyCalls interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/calls-emergency-dbus.h" line="55"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/calls-emergency-dbus.c"
             line="429">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="423">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/calls-emergency-dbus.c"
               line="424">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_warnv"
              c:identifier="phosh_error_warnv"
              introspectable="0">
      <source-position filename="src/util.h" line="24"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="log_domain" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="err" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="code" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="find_base_dir" c:identifier="phosh_find_base_dir">
      <source-position filename="src/bidi.h" line="14"/>
      <return-value transfer-ownership="none">
        <type name="Pango.Direction" c:type="PangoDirection"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="find_systemd_session"
              c:identifier="phosh_find_systemd_session">
      <source-position filename="src/util.h" line="23"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="session_id" transfer-ownership="none">
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="gamma_table_fill" c:identifier="phosh_gamma_table_fill">
      <source-position filename="src/monitor/gamma-table.h" line="13"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="table" transfer-ownership="none">
          <type name="guint16" c:type="guint16*"/>
        </parameter>
        <parameter name="ramp_size" transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="temp" transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="geo_clue_dbus_manager_interface_info"
              c:identifier="phosh_geo_clue_dbus_manager_interface_info"
              moved-to="GeoClueDBusManager.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-manager-dbus.c"
           line="345">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Manager.top_of_page"&gt;org.freedesktop.GeoClue2.Manager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="350">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="geo_clue_dbus_manager_override_properties"
              c:identifier="phosh_geo_clue_dbus_manager_override_properties"
              moved-to="GeoClueDBusManager.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-manager-dbus.c"
           line="358">Overrides all #GObject properties in the #PhoshGeoClueDBusManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/geoclue-manager-dbus.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-manager-dbus.c"
             line="366">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="360">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-manager-dbus.c"
               line="361">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="geo_clue_dbus_org_freedesktop_geo_clue2_agent_interface_info"
              c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_interface_info"
              moved-to="GeoClueDBusOrgFreedesktopGeoClue2Agent.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-agent-dbus.c"
           line="373">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-GeoClue2-Agent.top_of_page"&gt;org.freedesktop.GeoClue2.Agent&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="50"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="378">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="geo_clue_dbus_org_freedesktop_geo_clue2_agent_override_properties"
              c:identifier="phosh_geo_clue_dbus_org_freedesktop_geo_clue2_agent_override_properties"
              moved-to="GeoClueDBusOrgFreedesktopGeoClue2Agent.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/geoclue-agent-dbus.c"
           line="386">Overrides all #GObject properties in the #PhoshGeoClueDBusOrgFreedesktopGeoClue2Agent interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/geoclue-agent-dbus.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/geoclue-agent-dbus.c"
             line="394">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="388">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/geoclue-agent-dbus.c"
               line="389">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_desktop_app_info_for_app_id"
              c:identifier="phosh_get_desktop_app_info_for_app_id">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="47">Looks up an app info object for specified application ID.
Tries a bunch of transformations in order to maximize compatibility
with X11 and non-GTK applications that may not report the exact same
string as their app-id and in their desktop file.</doc>
      <source-position filename="src/util.h" line="20"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="56">GDesktopAppInfo for requested app_id</doc>
        <type name="Gio.DesktopAppInfo" c:type="GDesktopAppInfo*"/>
      </return-value>
      <parameters>
        <parameter name="app_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="49">the app_id</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_resource" c:identifier="phosh_get_resource">
      <source-position filename="src/phosh-resources.h" line="6"/>
      <return-value transfer-ownership="full">
        <type name="Gio.Resource" c:type="GResource*"/>
      </return-value>
    </function>
    <function name="idle_dbus_idle_monitor_interface_info"
              c:identifier="phosh_idle_dbus_idle_monitor_interface_info"
              moved-to="IdleDBusIdleMonitor.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="549">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-Mutter-IdleMonitor.top_of_page"&gt;org.gnome.Mutter.IdleMonitor&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="64"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="554">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="idle_dbus_idle_monitor_override_properties"
              c:identifier="phosh_idle_dbus_idle_monitor_override_properties"
              moved-to="IdleDBusIdleMonitor.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-idle-dbus.c"
           line="562">Overrides all #GObject properties in the #PhoshIdleDBusIdleMonitor interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-idle-dbus.h" line="65"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-idle-dbus.c"
             line="570">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="564">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-idle-dbus.c"
               line="565">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="log_set_log_domains"
              c:identifier="phosh_log_set_log_domains">
      <doc xml:space="preserve"
           filename="src/log.c"
           line="120">Set the current logging domains. This sets an appropriate log
handler as well.</doc>
      <source-position filename="src/log.h" line="15"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="domains" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/log.c"
               line="122">comma separated list of log domains.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="monitor_connector_type_from_name"
              c:identifier="phosh_monitor_connector_type_from_name"
              moved-to="MonitorConnectorType.from_name">
      <source-position filename="src/monitor/monitor.h" line="160"/>
      <return-value transfer-ownership="none">
        <type name="MonitorConnectorType" c:type="PhoshMonitorConnectorType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="monitor_transform_is_tilted"
              c:identifier="phosh_monitor_transform_is_tilted"
              moved-to="MonitorTransform.is_tilted">
      <doc xml:space="preserve"
           filename="src/monitor/monitor.c"
           line="759">We consider a transform to tilt the display if it changes the
display orientation from portrait to landscape or vice versa.</doc>
      <source-position filename="src/monitor/monitor.h" line="166"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/monitor/monitor.c"
             line="766">%TRUE for tilted transforms, otherwise %FALSE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="transform" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/monitor/monitor.c"
               line="761">a #PhoshMonitorTransform</doc>
          <type name="MonitorTransform" c:type="PhoshMonitorTransform"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpris_dbus_media_player2_interface_info"
              c:identifier="phosh_mpris_dbus_media_player2_interface_info"
              moved-to="MprisDBusMediaPlayer2.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="371">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2.top_of_page"&gt;org.mpris.MediaPlayer2&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="50"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="376">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="mpris_dbus_media_player2_override_properties"
              c:identifier="phosh_mpris_dbus_media_player2_override_properties"
              moved-to="MprisDBusMediaPlayer2.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="384">Overrides all #GObject properties in the #PhoshMprisDBusMediaPlayer2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="392">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="386">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="387">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mpris_dbus_media_player2_player_interface_info"
              c:identifier="phosh_mpris_dbus_media_player2_player_interface_info"
              moved-to="MprisDBusMediaPlayer2Player.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="1790">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-mpris-MediaPlayer2-Player.top_of_page"&gt;org.mpris.MediaPlayer2.Player&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="247"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1795">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="mpris_dbus_media_player2_player_override_properties"
              c:identifier="phosh_mpris_dbus_media_player2_player_override_properties"
              moved-to="MprisDBusMediaPlayer2Player.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/mpris-dbus.c"
           line="1803">Overrides all #GObject properties in the #PhoshMprisDBusMediaPlayer2Player interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/mpris-dbus.h" line="248"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/mpris-dbus.c"
             line="1811">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1805">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/mpris-dbus.c"
               line="1806">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="munge_app_id" c:identifier="phosh_munge_app_id">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="114">Munges an app_id according to the rules used by
gnome-shell, feedbackd and phoc for gsettings:</doc>
      <source-position filename="src/util.h" line="21"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="121">The munged_app id</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="app_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="116">the app_id</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="notify_dbus_notifications_interface_info"
              c:identifier="phosh_notify_dbus_notifications_interface_info"
              moved-to="NotifyDBusNotifications.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/notify-dbus.c"
           line="817">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-Notifications.top_of_page"&gt;org.freedesktop.Notifications&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/notify-dbus.h" line="77"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="822">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="notify_dbus_notifications_override_properties"
              c:identifier="phosh_notify_dbus_notifications_override_properties"
              moved-to="NotifyDBusNotifications.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/notify-dbus.c"
           line="830">Overrides all #GObject properties in the #PhoshNotifyDBusNotifications interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/notify-dbus.h" line="78"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/notify-dbus.c"
             line="838">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="832">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/notify-dbus.c"
               line="833">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="ofono_dbus_manager_interface_info"
              c:identifier="phosh_ofono_dbus_manager_interface_info"
              moved-to="OfonoDBusManager.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="2501">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-ofono-Manager.top_of_page"&gt;org.ofono.Manager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="413"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2506">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="ofono_dbus_manager_override_properties"
              c:identifier="phosh_ofono_dbus_manager_override_properties"
              moved-to="OfonoDBusManager.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="2514">Overrides all #GObject properties in the #PhoshOfonoDBusManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="414"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="2522">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="2516">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="2517">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="ofono_dbus_network_registration_interface_info"
              c:identifier="phosh_ofono_dbus_network_registration_interface_info"
              moved-to="OfonoDBusNetworkRegistration.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="1436">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-ofono-NetworkRegistration.top_of_page"&gt;org.ofono.NetworkRegistration&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="230"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1441">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="ofono_dbus_network_registration_override_properties"
              c:identifier="phosh_ofono_dbus_network_registration_override_properties"
              moved-to="OfonoDBusNetworkRegistration.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="1449">Overrides all #GObject properties in the #PhoshOfonoDBusNetworkRegistration interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="231"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="1457">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1451">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="1452">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="ofono_dbus_sim_manager_interface_info"
              c:identifier="phosh_ofono_dbus_sim_manager_interface_info"
              moved-to="OfonoDBusSimManager.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="401">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-ofono-SimManager.top_of_page"&gt;org.ofono.SimManager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="406">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="ofono_dbus_sim_manager_override_properties"
              c:identifier="phosh_ofono_dbus_sim_manager_override_properties"
              moved-to="OfonoDBusSimManager.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-wwan-ofono-dbus.c"
           line="414">Overrides all #GObject properties in the #PhoshOfonoDBusSimManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-wwan-ofono-dbus.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-wwan-ofono-dbus.c"
             line="422">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="416">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-wwan-ofono-dbus.c"
               line="417">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="osk0_sm_puri_osk0_interface_info"
              c:identifier="phosh_osk0_sm_puri_osk0_interface_info"
              moved-to="Osk0SmPuriOSK0.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-osk0-dbus.c"
           line="330">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-sm-puri-OSK0.top_of_page"&gt;sm.puri.OSK0&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="49"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="335">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="osk0_sm_puri_osk0_override_properties"
              c:identifier="phosh_osk0_sm_puri_osk0_override_properties"
              moved-to="Osk0SmPuriOSK0.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/phosh-osk0-dbus.c"
           line="343">Overrides all #GObject properties in the #PhoshOsk0SmPuriOSK0 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/phosh-osk0-dbus.h" line="50"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/phosh-osk0-dbus.c"
             line="351">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="345">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/phosh-osk0-dbus.c"
               line="346">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="polkit_authentication_agent_register"
              c:identifier="phosh_polkit_authentication_agent_register"
              throws="1">
      <source-position filename="src/polkit-auth-agent.h" line="25"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="agent" transfer-ownership="none">
          <type name="PolkitAuthAgent" c:type="PhoshPolkitAuthAgent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rfkill_dbus_rfkill_interface_info"
              c:identifier="phosh_rfkill_dbus_rfkill_interface_info"
              moved-to="RfkillDBusRfkill.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-rfkill-dbus.c"
           line="324">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SettingsDaemon-Rfkill.top_of_page"&gt;org.gnome.SettingsDaemon.Rfkill&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="329">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="rfkill_dbus_rfkill_override_properties"
              c:identifier="phosh_rfkill_dbus_rfkill_override_properties"
              moved-to="RfkillDBusRfkill.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/gsd-rfkill-dbus.c"
           line="337">Overrides all #GObject properties in the #PhoshRfkillDBusRfkill interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/gsd-rfkill-dbus.h" line="54"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/gsd-rfkill-dbus.c"
             line="345">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="339">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gsd-rfkill-dbus.c"
               line="340">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="session_client_private_dbus_client_private_interface_info"
              c:identifier="phosh_session_client_private_dbus_client_private_interface_info"
              moved-to="SessionClientPrivateDBusClientPrivate.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-client-private-dbus.c"
           line="421">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SessionManager-ClientPrivate.top_of_page"&gt;org.gnome.SessionManager.ClientPrivate&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="62"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="426">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="session_client_private_dbus_client_private_override_properties"
              c:identifier="phosh_session_client_private_dbus_client_private_override_properties"
              moved-to="SessionClientPrivateDBusClientPrivate.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-client-private-dbus.c"
           line="434">Overrides all #GObject properties in the #PhoshSessionClientPrivateDBusClientPrivate interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/gnome-session-client-private-dbus.h"
                       line="63"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-client-private-dbus.c"
             line="442">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="436">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-client-private-dbus.c"
               line="437">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="session_presence_dbus_presence_interface_info"
              c:identifier="phosh_session_presence_dbus_presence_interface_info"
              moved-to="SessionPresenceDBusPresence.interface_info">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-presence-dbus.c"
           line="290">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-SessionManager-Presence.top_of_page"&gt;org.gnome.SessionManager.Presence&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="48"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="295">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="session_presence_dbus_presence_override_properties"
              c:identifier="phosh_session_presence_dbus_presence_override_properties"
              moved-to="SessionPresenceDBusPresence.override_properties">
      <doc xml:space="preserve"
           filename="src/dbus/gnome-session-presence-dbus.c"
           line="303">Overrides all #GObject properties in the #PhoshSessionPresenceDBusPresence interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="src/dbus/gnome-session-presence-dbus.h"
                       line="49"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/dbus/gnome-session-presence-dbus.c"
             line="311">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="305">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/dbus/gnome-session-presence-dbus.c"
               line="306">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="strip_suffix_from_app_id"
              c:identifier="phosh_strip_suffix_from_app_id">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="148">Strip the desktop suffix from app_id.</doc>
      <source-position filename="src/util.h" line="22"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="154">The munged_app id</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="app_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="150">the app_id</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="system_prompter_register"
              c:identifier="phosh_system_prompter_register">
      <doc xml:space="preserve"
           filename="src/system-prompter.c"
           line="87">Register the system prompter</doc>
      <source-position filename="src/system-prompter.h" line="12"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/system-prompter.c"
             line="92">The system prompter</doc>
        <type name="Gcr.SystemPrompter" c:type="GcrSystemPrompter*"/>
      </return-value>
    </function>
    <function name="system_prompter_unregister"
              c:identifier="phosh_system_prompter_unregister">
      <source-position filename="src/system-prompter.h" line="13"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="trigger_feedback" c:identifier="phosh_trigger_feedback">
      <doc xml:space="preserve"
           filename="src/feedback-manager.c"
           line="269">Trigger feedback for the given event asynchronously</doc>
      <source-position filename="src/feedback-manager.h" line="26"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/feedback-manager.c"
               line="271">The event's name to trigger feedback for</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_append_to_strv"
              c:identifier="phosh_util_append_to_strv">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="665">Append `element` to an array of strings.</doc>
      <source-position filename="src/util.h" line="40"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="672">A new `NULL` terminated array with the element appended to it.</doc>
        <array c:type="GStrv">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="667">A `NULL` terminated array of strings</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </parameter>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="668">The string to append</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_data_uri_to_pixbuf"
              c:identifier="phosh_util_data_uri_to_pixbuf"
              throws="1">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="551">Converts a data URI to a #GdkPixbuf.</doc>
      <source-position filename="src/util.h" line="38"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="558">The decoded #GdkPixbuf or %NULL on error</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="553">The data URI</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_escape_markup"
              c:identifier="phosh_util_escape_markup">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="333">Escapes the given markup either fully or (when @allow_markup is %TRUE) in a way
that is suitable for a notification body</doc>
      <source-position filename="src/util.h" line="31"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="341">The escaped text</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="markup" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="335">The markup to escape</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="allow_markup" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="336">Whether to allow certain markup</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_file_equal" c:identifier="phosh_util_file_equal">
      <source-position filename="src/util.h" line="37"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file1" transfer-ownership="none">
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="file2" transfer-ownership="none">
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_gesture_is_touch"
              c:identifier="phosh_util_gesture_is_touch">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="408">Allow to check whether a gesture's last event was a touch press or
release.  This can be used to distinguish mouse and touchpad clicks
from touch press/release.</doc>
      <source-position filename="src/util.h" line="32"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="416">%TRUE if this is a touch press or release event, otherwise %FALSE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="gesture" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="410">The gesture</doc>
          <type name="Gtk.GestureSingle" c:type="GtkGestureSingle*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_get_icon_by_wifi_strength"
              c:identifier="phosh_util_get_icon_by_wifi_strength">
      <source-position filename="src/util.h" line="36"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="506">The name of the icon based on the signal strength. If @is_connecting is @TRUE, then it
returns a loading icon.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="strength" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="503">An integer representing the strength of Wi-Fi</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="is_connecting" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="504">If we are trying to connect to Wi-Fi</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_have_gnome_software"
              c:identifier="phosh_util_have_gnome_software">
      <source-position filename="src/util.h" line="33"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="458">the (cached) answer if gnome-software can be found in the path.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="scan" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="456">Whether to scan $PATH again</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_matches_app_info"
              c:identifier="phosh_util_matches_app_info">
      <source-position filename="src/util.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="611">`TRUE` if the info matches search else `FALSE`</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="608">app-info to check</doc>
          <type name="Gio.AppInfo" c:type="GAppInfo*"/>
        </parameter>
        <parameter name="search" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="609">Search string to use for matching</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_open_settings_panel"
              c:identifier="phosh_util_open_settings_panel">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="754">Open the settings panel corresponding to the given name.</doc>
      <source-position filename="src/util.h" line="42"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="panel" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="756">A settings panel name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_remove_from_strv"
              c:identifier="phosh_util_remove_from_strv">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="683">Remove all elements from a string array that match `element`.</doc>
      <source-position filename="src/util.h" line="41"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/util.c"
             line="690">A new `NULL` terminated array with the element removed from it.</doc>
        <array c:type="GStrv">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="685">A `NULL` terminated array of strings</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </parameter>
        <parameter name="element" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="686">The string to remove</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_toggle_style_class"
              c:identifier="phosh_util_toggle_style_class">
      <doc xml:space="preserve"
           filename="src/util.c"
           line="473">Adds or removes the specified style class on the widget.</doc>
      <source-position filename="src/util.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="475">Widget to change styling of</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="style_class" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="476">The name of CSS class</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="toggle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/util.c"
               line="477">Whether the class should be set or unset</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="wl_buffer_new"
              c:identifier="phosh_wl_buffer_new"
              moved-to="WlBuffer.new"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/wl-buffer.c"
           line="22">Creates a new memory buffer to be shared with the Wayland compositor.</doc>
      <source-position filename="src/wl-buffer.h" line="34"/>
      <return-value>
        <doc xml:space="preserve"
             filename="src/wl-buffer.c"
             line="31">The new buffer</doc>
        <type name="WlBuffer" c:type="PhoshWlBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="format"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/wl-buffer.c"
               line="24">The buffer format</doc>
          <type name="gpointer" c:type="wl_shm_format"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wl-buffer.c"
               line="25">The buffer's width in pixels</doc>
          <type name="guint32" c:type="uint32_t"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wl-buffer.c"
               line="26">The buffer's height in lines</doc>
          <type name="guint32" c:type="uint32_t"/>
        </parameter>
        <parameter name="stride" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/wl-buffer.c"
               line="27">The buffer's stride in bytes</doc>
          <type name="guint32" c:type="uint32_t"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
